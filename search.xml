<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jetpack ViewModel 分析</title>
      <link href="/20221210/jetpack-viewmodel-fen-xi/"/>
      <url>/20221210/jetpack-viewmodel-fen-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://developer.android.com/topic/libraries/architecture/viewmodel?hl=zh-cn">ViewModel 官方文档</a>介绍</p><blockquote><p><a href="https://developer.android.com/reference/androidx/lifecycle/ViewModel?hl=zh-cn"><code>ViewModel</code></a>&nbsp;类是一种<a href="https://developer.android.com/topic/architecture/ui-layer/stateholders?hl=zh-cn">业务逻辑或屏幕级状态容器</a>。<br>它用于将状态公开给界面，以及封装相关的业务逻辑。<br>它的主要优点是，它可以缓存状态，并可在配置更改后持久保留相应状态。<br>这意味着在 activity 之间导航时或进行配置更改后（例如旋转屏幕时），界面将无需重新提取数据。</p></blockquote><h2 id="ViewModel-的优势"><a href="#ViewModel-的优势" class="headerlink" title="ViewModel 的优势"></a>ViewModel 的优势</h2><p>ViewModel 可以替代需要手动实现 onSaveInstanceState 等方法来实现数据保存和恢复。<br>在 Navigation 目的地之间导航时或者 Activity 异常销毁时，需要保存数据以便后续重建时恢复。<br>此时，如果您不利用<a href="https://developer.android.com/topic/libraries/architecture/saving-states?hl=zh-cn#onsaveinstancestate">保存实例状态机制</a>存储相应数据，系统便会销毁相应数据。ViewModel 提供了一个便捷的数据持久性 API，可以解决此问题。</p><p>ViewModel 主要优势实际上有两个方面：</p><ul><li>  它允许您持久保留界面状态。</li><li>  它可以提供对业务逻辑的访问权限。</li></ul><h2 id="ViewModel-使用方法"><a href="#ViewModel-使用方法" class="headerlink" title="ViewModel 使用方法"></a>ViewModel 使用方法</h2><h3 id="增加相关库依赖"><a href="#增加相关库依赖" class="headerlink" title="增加相关库依赖"></a>增加相关库依赖</h3><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'androidx.core:core-ktx:1.10.1'</span>  implementation <span class="token string">'androidx.appcompat:appcompat:1.6.1'</span>  implementation <span class="token string">'androidx.activity:activity-ktx:1.7.1'</span>  implementation <span class="token string">'androidx.fragment:fragment-ktx:1.5.7'</span>implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-runtime-ktx:2.6.1"</span></span>  implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-livedata-ktx:2.6.1"</span></span>  implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ViewModel-定义"><a href="#ViewModel-定义" class="headerlink" title="ViewModel 定义"></a>ViewModel 定义</h3><p>分为普通 ViewModel 和 AndroidViewModel (可以拿到 Application 实例)</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainViewModel<span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span class="token comment">// or </span><span class="token keyword">class</span> <span class="token function">MainViewModel</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">AndroidViewModel</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 MainVieModel 中可以定义 UI 界面中需要的数据（对象、LiveData、Flow 等等）和方法，在 Activity 真正销毁前 ViewModel 中的数据不会丢失。</p><h3 id="Activity-中获取"><a href="#Activity-中获取" class="headerlink" title="Activity 中获取"></a>Activity 中获取</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> vm <span class="token operator">=</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token comment">// 引入 activity-ktx 库可以这样初始化 ViewModel</span><span class="token keyword">val</span> vm <span class="token keyword">by</span> viewModels<span class="token operator">&lt;</span>MainViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fragment-中获取"><a href="#Fragment-中获取" class="headerlink" title="Fragment 中获取"></a>Fragment 中获取</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> vm <span class="token operator">=</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token comment">// or </span><span class="token comment">// 获取和 Activity 共享的 ViewModel</span><span class="token keyword">val</span> vm <span class="token operator">=</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span><span class="token function">requireActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token comment">// 引入 fragment-ktx 可以这样初始化</span><span class="token keyword">val</span> vm <span class="token keyword">by</span> viewModels<span class="token operator">&lt;</span>MainViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> vm <span class="token keyword">by</span> activityViewModels<span class="token operator">&lt;</span>MainViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认数据保存恢复方法"><a href="#默认数据保存恢复方法" class="headerlink" title="默认数据保存恢复方法"></a>默认数据保存恢复方法</h2><p>ViewModel 的使用非常简单，也很容易理解，就是一个 <code>生命周期长于 Activity</code> 的对象，区别在于 <code>不会造成内存泄漏</code>。</p><p>ViewModel 不是魔法，站在开发者的角度在 ViewModel 没有问世之前横竖屏切换需要保存状态数据的需求通常都是通过 <code>onSaveInstanceState</code> <code>onRestoreInstanceState</code> 来实现。</p><h3 id="onSaveInstanceState"><a href="#onSaveInstanceState" class="headerlink" title="onSaveInstanceState"></a>onSaveInstanceState</h3><ul><li>onSaveInstanceState 用于在 Activity 横竖屏切换（意外销毁）前保存数据；</li></ul><p>由于是在 Activity 销毁前触发，那么直接来 <code>ActivityThread</code> 中找到 <code>performPauseActivity</code> 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ActivityThread.java</span><span class="token keyword">private</span> <span class="token class-name">Bundle</span> <span class="token function">performPauseActivity</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finished<span class="token punctuation">,</span> <span class="token class-name">String</span> reason<span class="token punctuation">,</span> <span class="token class-name">PendingTransactionActions</span> pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldSaveState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callActivityOnSaveInstanceState</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callActivityOnSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token comment">// 这里通过 ActivityClientRecord 获取到 activity</span>    <span class="token comment">// state 是 Bundle 对象，后面要保存的数据就放在 state 中</span>    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnSaveInstanceState</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有 ActivityThread 调用到了 Instrumentation 中，继续看源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Instrumentation.java</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callActivityOnSaveInstanceState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    activity<span class="token punctuation">.</span><span class="token function">performSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据传入的 activity 调用其 <code>performSaveInstanceState</code> 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Activity.java</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">performSaveInstanceState</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下，onSaveInstanceState 中我们将数据存储在 <code>Bundle</code> 对象中，而这个 Bundle 对象是存储在 <code>ActivityClientRecord</code> 中。</p><h3 id="onRestoreInstanceState"><a href="#onRestoreInstanceState" class="headerlink" title="onRestoreInstanceState"></a>onRestoreInstanceState</h3><ul><li>onRestoreInstanceState 是用于 Activity 横竖屏切换（重建）后获取保存的数据；</li></ul><p>onRestoreInstanceState 的流程就来简单说说，由于在 onStart 后发生回调，所以直接去看 ActivityThread 中的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ActivityThread.java</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleStartActivity</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token class-name">PendingTransactionActions</span> pendingActions<span class="token punctuation">,</span> <span class="token class-name">ActivityOptions</span> activityOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnRestoreInstanceState</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出这里从 <code>ActivityClientRecord</code> 中取出了 activity 和 state(bundle 数据) 进行传递，后面就和 <code>onSaveInstanceState</code> 调用流程类似了。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Activity 在非正常销毁时，在 onStop 之前 (onPause 前后不确定) 会调用 <code>onSaveInstanceState</code> 来把数据保存到 <code>bundle</code> 中；<br>在 onStart 之后会调用 <code>onRestoreInstanceState</code> 来恢复此前保存的数据；<br>另外 onCreate 冲的 <code>savedInstanceState</code> 参数也可以获取到此前保存的数据。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="自定义数据保存恢复方法"><a href="#自定义数据保存恢复方法" class="headerlink" title="自定义数据保存恢复方法"></a>自定义数据保存恢复方法</h2><p>除了 onSaveInstanceState 和 onRestoreInstanceState (<code>Activity</code> 中)，在 <code>ComponentActivity</code> 中还有一组方法可以实现类似的功能，就是 <code>onRetainCustomNonConfigurationInstance</code> 和 <code>getLastCustomNonConfigurationInstance</code>，前者即保存数据，后者即获取保存的数据；</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onRetainCustomNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">SaveStateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>    <span class="token comment">// 获取保存的数据</span>    <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token function">getLastCustomNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> SaveStateData<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 <code>onSaveInstanceState</code> 使用的区别在于 <code>onSaveInstanceState</code> 只能在其参数中的 <code>Bundle</code> 对象中写入数据，而 <code>onRetainCustomNonConfigurationInstance</code> 返回的类型是 <code>Any</code> 不限制数据类型。先来这组方法的源码调用流程。</p><h3 id="onRetainCustomNonConfigurationInstance"><a href="#onRetainCustomNonConfigurationInstance" class="headerlink" title="onRetainCustomNonConfigurationInstance"></a>onRetainCustomNonConfigurationInstance</h3><p><code>onRetainCustomNonConfigurationInstance</code> 是在 <code>ComponentActivity</code> 中定义的，默认实现返回 <code>null</code>，其在 <code>onRetainNonConfigurationInstance</code> 方法中被调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">onRetainCustomNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 默认返回 null, 可以重写</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">onRetainNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 调用👆🏻方法，保存在 custom 变量中</span>    <span class="token class-name">Object</span> custom <span class="token operator">=</span> <span class="token function">onRetainCustomNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里可以看到 ViewModel 相关的源码了，后面再继续说</span>    <span class="token class-name">ViewModelStore</span> viewModelStore <span class="token operator">=</span> mViewModelStore<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewModelStore <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">NonConfigurationInstances</span> nc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NonConfigurationInstances</span><span class="token punctuation">)</span> <span class="token function">getLastNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            viewModelStore <span class="token operator">=</span> nc<span class="token punctuation">.</span>viewModelStore<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewModelStore <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> custom <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 新建 ComponentActivity.NonConfigurationInstances 对象</span>    <span class="token class-name">NonConfigurationInstances</span> nci <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonConfigurationInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// custom 和 viewModelStore 赋值给了 NonConfigurationInstances 对象</span>    nci<span class="token punctuation">.</span>custom <span class="token operator">=</span> custom<span class="token punctuation">;</span>    nci<span class="token punctuation">.</span>viewModelStore <span class="token operator">=</span> viewModelStore<span class="token punctuation">;</span>    <span class="token keyword">return</span> nci<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着找 <code>onRetainNonConfigurationInstance</code> 的定义，在 Activity 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Activity.java</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">onRetainNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 默认返回 null, ComponentActivity 重写了</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">NonConfigurationInstances</span> <span class="token function">retainNonConfigurationInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ComponentActivity 中返回的 NonConfigurationInstances 对象</span>    <span class="token class-name">Object</span> activity <span class="token operator">=</span> <span class="token function">onRetainNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span>    <span class="token comment">// 注意 这里新建的是 Activity.NonConfigurationInstances 对象</span>    <span class="token class-name">NonConfigurationInstances</span> nci <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonConfigurationInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ComponentActivity 中返回的 NonConfigurationInstances 对象</span>    <span class="token comment">// 存储到了新的 NonConfigurationInstances 中的 activity 属性中</span>    nci<span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token comment">// ...</span>    <span class="token keyword">return</span> nci<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个 NonConfigurationInstances 数据结构对比</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ComponentActivity.java</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonConfigurationInstances</span> <span class="token punctuation">{</span>      <span class="token class-name">Object</span> custom<span class="token punctuation">;</span>      <span class="token class-name">ViewModelStore</span> viewModelStore<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">// Activity.java</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonConfigurationInstances</span> <span class="token punctuation">{</span>      <span class="token class-name">Object</span> activity<span class="token punctuation">;</span>      <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>      <span class="token class-name">FragmentManagerNonConfig</span> fragments<span class="token punctuation">;</span>      <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LoaderManager</span><span class="token punctuation">&gt;</span></span> loaders<span class="token punctuation">;</span>      <span class="token class-name">VoiceInteractor</span> voiceInteractor<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着再看一下 <code>NonConfigurationInstances</code> 到底存在了哪里？在 <code>ActivityThread.java</code> 中找到了调用 <code>retainNonConfigurationInstances</code> 的地方：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ActivityThread.java</span><span class="token keyword">void</span> <span class="token function">performDestroyActivity</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finishing<span class="token punctuation">,</span> <span class="token keyword">int</span> configChanges<span class="token punctuation">,</span> <span class="token keyword">boolean</span> getNonConfigInstance<span class="token punctuation">,</span> <span class="token class-name">String</span> reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token comment">// 这个 r 是参数中的 ActivityClientRecord</span>    r<span class="token punctuation">.</span>lastNonConfigurationInstances <span class="token operator">=</span> r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">retainNonConfigurationInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 onSaveInstanceState 一样存储在了 ActivityClientRecord 中，只不过是存到了另外一个属性 <code>lastNonConfigurationInstances</code>。</p><h3 id="getLastCustomNonConfigurationInstance"><a href="#getLastCustomNonConfigurationInstance" class="headerlink" title="getLastCustomNonConfigurationInstance"></a>getLastCustomNonConfigurationInstance</h3><p>看完了存储的流程，简单来看看取数据的流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ComponentActivity.java</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getLastCustomNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 通过父类 Activity#getLastNonConfigurationInstance 获取 NonConfigurationInstances</span>    <span class="token class-name">NonConfigurationInstances</span> nc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NonConfigurationInstances</span><span class="token punctuation">)</span> <span class="token function">getLastNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回 custom</span>    <span class="token keyword">return</span> nc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> nc<span class="token punctuation">.</span>custom <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>Activity</code> 中肯定还需要取一次 <code>ActivityClientRecord</code> 中的 <code>NonConfigurationInstances</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Activity.java</span><span class="token class-name">NonConfigurationInstances</span> mLastNonConfigurationInstances<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getLastNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 返回其 activity 字段</span>    <span class="token keyword">return</span> mLastNonConfigurationInstances <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mLastNonConfigurationInstances<span class="token punctuation">.</span>activity <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// mLastNonConfigurationInstances 赋值在 attach 方法中</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token comment">/*参数太多省略了*/</span> <span class="token class-name">NonConfigurationInstances</span> lastNonConfigurationInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    mLastNonConfigurationInstances <span class="token operator">=</span> lastNonConfigurationInstances<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出在 <code>Activity#attach</code> 方法中就已经拿到了 <code>Activity.NonConfigurationInstances</code> 对象，通过源码知道 <code>Activity#attach</code> 方法是在 <code>ActivityThread</code> 的 <code>performLaunchActivity</code> 中调用，看一下源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ActivityThread.java</span><span class="token keyword">private</span> <span class="token class-name">Activity</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token class-name">Intent</span> customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token comment">// 参数太多 省略了</span>    <span class="token comment">// 可以看到是从 ActivityClientRecord 中取出传入的</span>    activity<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>appContext<span class="token punctuation">,</span> r<span class="token punctuation">.</span>lastNonConfigurationInstancesn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- ![[NonConfigurationInstances.svg]] --><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/NonConfigurationInstances.png" alt="NonConfigurationInstances"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>两种方式都是将数据保存到了 <code>ActivityClientRecord</code> 中，不同的是前者限制了 <code>Bundle</code> 类型，后者 <code>不限制类型</code>（ViewModel 采用的就是后者这组方法实现），不过后者已经在源码中被标记了废弃，并不影响使用，标记废弃是为了让开发者尽可能使用 ViewModel 来实现。</p><h2 id="ViewModel-源码分析"><a href="#ViewModel-源码分析" class="headerlink" title="ViewModel 源码分析"></a>ViewModel 源码分析</h2><p>从前面数据保存和恢复的分析可以看到 ViewModel 的保存、恢复是利用了系统提供的方法，不过还有些细节还需要在源码中探索，比如：如何实现 Activity/Fragment 共享 ViewModel？接下来就来深入 ViewModel 源码。</p><h3 id="ViewModel-实例获取-by-viewModels"><a href="#ViewModel-实例获取-by-viewModels" class="headerlink" title="ViewModel 实例获取 by viewModels"></a>ViewModel 实例获取 by viewModels</h3><p>先来以 Activity 中创建 ViewModel 的这段代码入手：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> vm <span class="token keyword">by</span> viewModels<span class="token operator">&lt;</span>MainViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>viewModels 扩展函数源码：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 这是一个 ComponentActivity 的扩展方法</span><span class="token annotation builtin">@MainThread</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> VM <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> ComponentActivity<span class="token punctuation">.</span><span class="token function">viewModels</span><span class="token punctuation">(</span>    <span class="token comment">// 从命名也可以看出是一个工厂模式，默认是 null</span>    <span class="token keyword">noinline</span> factoryProducer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Factory<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>VM<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 默认 factoryProducer 为 null, 返回的是 AndroidViewModelFactory</span>    <span class="token keyword">val</span> factoryPromise <span class="token operator">=</span> factoryProducer <span class="token operator">?:</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> application <span class="token operator">=</span> application <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span>            <span class="token string-literal singleline"><span class="token string">"ViewModel can be accessed only when Activity is attached"</span></span>        <span class="token punctuation">)</span>        <span class="token comment">// Note: 1 🔽</span>        AndroidViewModelFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 返回了一个 ViewModelLazy 对象，将 viewModelStore、factoryProducer 传入</span>    <span class="token comment">// Note: 3 🔽                   // Note: 2 🔽</span>    <span class="token keyword">return</span> <span class="token function">ViewModelLazy</span><span class="token punctuation">(</span>VM<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> viewModelStore <span class="token punctuation">}</span><span class="token punctuation">,</span> factoryPromise<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要从上面注意点来看</p><ul><li>AndroidViewModelFactory 实例如何获取，</li><li>viewModelStore 实例如何获取，</li><li>ViewModelLazy 逻辑</li></ul><h3 id="1-获取-AndroidViewModelFactory"><a href="#1-获取-AndroidViewModelFactory" class="headerlink" title="1.获取 AndroidViewModelFactory"></a>1.获取 AndroidViewModelFactory</h3><p>AndroidViewModelFactory 是 ViewModelProvider 内部类，实际上是一个单例模式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// ViewModelProvider.kt -&gt; AndroidViewModelFactory</span><span class="token keyword">private</span> <span class="token keyword">var</span> sInstance<span class="token operator">:</span> AndroidViewModelFactory<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token annotation builtin">@JvmStatic</span><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">)</span><span class="token operator">:</span> AndroidViewModelFactory <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sInstance <span class="token operator">=</span> <span class="token function">AndroidViewModelFactory</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sInstance<span class="token operator">!!</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取-ViewModelStore"><a href="#2-获取-ViewModelStore" class="headerlink" title="2.获取 ViewModelStore"></a>2.获取 ViewModelStore</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ComponentActivity.java</span><span class="token keyword">private</span> <span class="token class-name">ViewModelStore</span> mViewModelStore<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ViewModelStore</span> <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mViewModelStore <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第一次启动 activity 为 null</span>        <span class="token comment">// 获取保存的数据</span>        <span class="token class-name">NonConfigurationInstances</span> nc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NonConfigurationInstances</span><span class="token punctuation">)</span> <span class="token function">getLastNonConfigurationInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 优先从保存的数据中获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mViewModelStore <span class="token operator">=</span> nc<span class="token punctuation">.</span>viewModelStore<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 创建新的 ViewModelStore</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mViewModelStore <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mViewModelStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> mViewModelStore<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ViewModelStore 内部仅仅是管理一个 <code>Map&lt;String, ViewModel&gt;</code>，用于缓存、清理创建的 ViewModel。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewModelStore</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ViewModel</span><span class="token punctuation">&gt;</span></span> mMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">ViewModel</span> viewModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ViewModel</span> oldViewModel <span class="token operator">=</span> mMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> viewModel<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldViewModel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              oldViewModel<span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token class-name">ViewModel</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> mMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-ViewModelLazy"><a href="#3-ViewModelLazy" class="headerlink" title="3.ViewModelLazy"></a>3.ViewModelLazy</h3><p>再回来接着看扩展方法 viewModels 返回的 ViewModelLazy：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">class</span> ViewModelLazy<span class="token operator">&lt;</span>VM <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> viewModelClass<span class="token operator">:</span> KClass<span class="token operator">&lt;</span>VM<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// ViewModel 的 class</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> storeProducer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> ViewModelStore<span class="token punctuation">,</span> <span class="token comment">// 默认是 ViewModelStore</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> factoryProducer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> ViewModelProvider<span class="token punctuation">.</span>Factory<span class="token punctuation">,</span> <span class="token comment">// 这里就是 mDefaultFactory</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> extrasProducer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> CreationExtras <span class="token operator">=</span> <span class="token punctuation">{</span> CreationExtras<span class="token punctuation">.</span>Empty <span class="token punctuation">}</span> <span class="token comment">// </span><span class="token punctuation">)</span> <span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>VM<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 注意这里返回的 Lazy，延迟初始化</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> cached<span class="token operator">:</span> VM<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> value<span class="token operator">:</span> VM        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 由于返回的是 Lazy，也就是当使用 ViewModel 时才会调用 get</span>            <span class="token keyword">val</span> viewModel <span class="token operator">=</span> cached            <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>viewModel <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第一次调用是 null，进入 if</span>                <span class="token keyword">val</span> factory <span class="token operator">=</span> <span class="token function">factoryProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取 mDefaultFactory</span>                <span class="token keyword">val</span> store <span class="token operator">=</span> <span class="token function">storeProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取 ViewModelStore</span>                <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span> <span class="token comment">// 生成 ViewModelProvider 对象</span>                    store<span class="token punctuation">,</span> factory<span class="token punctuation">,</span> <span class="token function">extrasProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>viewModelClass<span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>                    cached <span class="token operator">=</span> it  <span class="token comment">// 保存到 cached 变量</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                viewModel            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> cached <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着查看 ViewModelProvider 的 get 方法是如何创建 ViewModel 的：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 存储ViewModel的key的前缀</span><span class="token keyword">internal</span> <span class="token keyword">const</span> <span class="token keyword">val</span> DEFAULT_KEY <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"androidx.lifecycle.ViewModelProvider.DefaultKey"</span></span><span class="token keyword">public</span> <span class="token keyword">open</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token keyword">get</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">val</span> canonicalName <span class="token operator">=</span> modelClass<span class="token punctuation">.</span>canonicalName        <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Local and anonymous classes can not be ViewModels"</span></span><span class="token punctuation">)</span>    <span class="token comment">// 调用重载方法，拼接 key 传入</span>    <span class="token comment">// 当前key即为：androidx.lifecycle.ViewModelProvider.DefaultKey$com.xxx.MainViewModel</span>    <span class="token keyword">return</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">DEFAULT_KEY</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">canonicalName</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> modelClass<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">open</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">val</span> viewModel <span class="token operator">=</span> store<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 优先从 ViewModelStroe 中获取缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modelClass<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果类型相同 直接返回</span>        <span class="token comment">// 这里我们的 factory 是 AndroidViewModelFactory 所以不会走这行代码</span>        <span class="token punctuation">(</span>factory <span class="token keyword">as</span><span class="token operator">?</span> OnRequeryFactory<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onRequery</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">)</span>        <span class="token keyword">return</span> viewModel <span class="token keyword">as</span> T    <span class="token punctuation">}</span>    <span class="token comment">// ...</span>    <span class="token comment">// 这里的 defaultCreationExtras 是上一步骤中的 CreationExtras，默认值为 CreationExtras.Empty</span>    <span class="token comment">// MutableCreationExtras 包装一层就是将 defaultCreationExtras 中所有的键值对都copy一份</span>    <span class="token keyword">val</span> extras <span class="token operator">=</span> <span class="token function">MutableCreationExtras</span><span class="token punctuation">(</span>defaultCreationExtras<span class="token punctuation">)</span>    <span class="token comment">// 将当前 ViewModel 的 key 存储进去</span>    extras<span class="token punctuation">[</span>VIEW_MODEL_KEY<span class="token punctuation">]</span> <span class="token operator">=</span> key        <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 优先调用双参数方法</span>        factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">,</span> extras<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> AbstractMethodError<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用双参数方法发生异常再调用单参数方法</span>        factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>         <span class="token comment">// 获取到 ViewModel 后存储到 viewModelStore 中</span>        <span class="token comment">// 再提一嘴 viewModelStore 是在 ComponentActivity 中定义 </span>        store<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> it<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于到了创建 ViewModel 的部分了，直接去看 <code>ViewModelProvider.AndroidViewModelFactory</code> 的 create 方法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> extras<span class="token operator">:</span> CreationExtras<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>    <span class="token comment">// application 不为 null 调用单参数方法</span>    <span class="token comment">// 在新建 AndroidViewModelFactory 已经传入了 application，一般情况不为 null</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment">// application 如果为 null，则会从传入的 extras 中尝试获取</span>        <span class="token keyword">val</span> application <span class="token operator">=</span> extras<span class="token punctuation">[</span>APPLICATION_KEY<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这个 create 也是双参数，但不是递归，第二个参数是 application，源码贴在下面</span>            <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">,</span> application<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果 application 仍然为 null，且 ViewModel 类型为 AndroidViewModel 则抛异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>AndroidViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment">// 类型不是 AndroidViewModel 则根据 class 创建</span>            <span class="token comment">// 注意这里调用的 super.create 是父类方法</span>            <span class="token comment">// 父类方法直接根据 modelClass.newInstance() 创建，就一行就不贴源码了</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// application 为 null 直接抛异常</span>        <span class="token keyword">throw</span> <span class="token function">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用下面的双参数方法</span>        <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">,</span> application<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">&gt;</span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> app<span class="token operator">:</span> Application<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>    <span class="token comment">// 如果是 AndroidViewModel 类型则获取带 application 的构造参数创建</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>AndroidViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        modelClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>Application<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 直接调用父类 create 方法通过 modelClass.newInstance() 创建</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里 Activity 中的 ViewModel 实例获取就全部分析完了</p><ul><li>Activity 中的 ViewModel 创建都是通过单例工厂 AndroidViewModelFactory 的 create 方法中反射创建，</li><li>在调用 create 创建前会生成字符串 key，创建完成后会将 key 和 vm 对象存储到 ViewModelStore 中，后续获取将优先从 ViewModelStore 缓存中获取。</li></ul><p>从前面的数据保存和恢复可以知道 <code>ViewModelStore</code> 实例在 Activity 意外销毁时，会保存到 <code>ActivityClientRecord</code> 中的 <code>lastNonConfigurationInstances</code>，在 Activity 重新创建时从而可以获取到原来的 <code>ViewModelStore</code>。</p><p>所以 ViewModel 生命周期长于 Activity 就是因为 ViewModelStore 会被保存起来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Jetpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Native 异常捕获与解析</title>
      <link href="/20221009/android-native-crash/"/>
      <url>/20221009/android-native-crash/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Android-native-so"><a href="#Android-native-so" class="headerlink" title="Android native so"></a>Android native so</h2><p>NativeCrash 即 Native Exception, 是 <code>C/C++</code> 运行过程中产生的错误，Native Exception 不同于普通的 Java Exception，普通的 logcat 无法直接还原成可阅读的堆栈，一般没有源码也无法调试。</p><p>普通的 logcat 只能看到类似这样的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">A/libc: Fatal signal <span class="token number">5</span> <span class="token punctuation">(</span>SIGTRAP<span class="token punctuation">)</span>, code <span class="token number">1</span> <span class="token punctuation">(</span>TRAP_BRKPT<span class="token punctuation">)</span>, fault addr 0x72a275a838 <span class="token keyword">in</span> tid <span class="token number">19185</span> <span class="token punctuation">(</span>xcrash.sample<span class="token punctuation">)</span>, pid <span class="token number">19185</span> <span class="token punctuation">(</span>xcrash.sample<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很难从这些信息分析具体原因，这时就需要从 so 相关信息来看。</p><h3 id="分析-so-组成"><a href="#分析-so-组成" class="headerlink" title="分析 so 组成"></a>分析 so 组成</h3><p>一个完整的 so 由 <code>C/c++</code> 代码加一些 <code>debug</code> 信息组成，这些 debug 信息会记录 so 中所有方法的对照表，就是 <code>方法名</code> 和其 <code>偏移地址</code> 的对应表，也叫做符号表，这种 so &nbsp;也叫做未 strip (没有去掉符号表的)，通常体积会比较大。</p><p>而 release 的 so 都会经过 <code>strip</code> 操作，strip 之后的 so 中的 debug 信息会被剥离，整个 so 的体积也会缩小。</p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/5MG6LA.jpg" alt="5MG6LA"></p><p>如下可以看到 strip 之前和之后的大小对比：2.9MB (strip) vs 23.6MB (未 strip)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span>-rw-r--r--  <span class="token number">1</span> weiwei  staff   <span class="token number">2867944</span> <span class="token number">10</span>  <span class="token number">8</span> <span class="token number">10</span>:30 libtest-s.so-rw-r--r--  <span class="token number">1</span> weiwei  staff  <span class="token number">23614624</span> <span class="token number">10</span>  <span class="token number">8</span> <span class="token number">10</span>:30 libtest.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以简单将这个 debug 信息理解为 Java 代码混淆中的 mapping 文件，只有拥有这个 mapping 文件才能进行堆栈分析，没有堆栈信息就很难解决发生的异常。</p><p>所以这些 debug 信息很重要，是我们分析 Native Exception 问题的关键信息，那么我们在编译 so 时候务必保留一份未被 strip 的 so 或者剥离后的符号表信息，以供后面问题分析，并且每次编译的 so 都需要保存，一旦产生代码修改重新编译，那么修改前后的符号表信息会无法对应，也无法进行分析。</p><h3 id="查看-so-信息"><a href="#查看-so-信息" class="headerlink" title="查看 so 信息"></a>查看 so 信息</h3><p>在 macOS/Linux 下可以使用 <code>file</code> 命令查看 so 文件信息：<code>stripped</code> 代表是没有 debug 信息的 so, <code>with debug_info</code>,  <code>not stripped</code> 代表包含 debug 信息的 so。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> libtest.solibtest.so: ELF <span class="token number">64</span>-bit LSB shared object, ARM aarch64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>9a28e26533f985cf3ae8733ccd0c2cae8cc49fb3, with debug_info, not stripped$ <span class="token function">file</span> libtest-s.solibtest-s.so: ELF <span class="token number">64</span>-bit LSB shared object, ARM aarch64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>9a28e26533f985cf3ae8733ccd0c2cae8cc49fb3, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看下如何获取两种状态下的 so。</p><h3 id="获取-so-文件"><a href="#获取-so-文件" class="headerlink" title="获取 so 文件"></a>获取 so 文件</h3><p>无论是使用 mk 或者 Cmake 编译的方式都会同时输出 strip 和未 strip 的 so，下面文件树列表是 Cmake 编译 so 产生的两种对应的 so。</p><p>我们执行 release 任务，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./gradlew libTest:assembleRelease<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完成后可以在 <code>libTest/build/intermediates </code> 目录下找到两种对应的 so: (下面输出结果对应的是 AGP 7.0+)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># weiwei in ~/NativeDemo/libTest/build/intermediates</span>$ tree <span class="token parameter variable">-L</span> <span class="token number">2</span>├── cmake│   └── release│       └── obj│           ├── arm64-v8a│           │   ├── libtest.so│           └── armeabi-v7a│               ├── libtest.so├── merged_native_libs│   └── release│       └── out│           └── lib│               ├── arm64-v8a│               │   ├── libtest.so│               └── armeabi-v7a│                   ├── libtest.so├── stripped_native_libs│   └── release│       └── out│           └── lib│               ├── arm64-v8a│               │   ├── libtest.so│               └── armeabi-v7a│                   ├── libtest.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>cmake</code> 和 <code>merged_native_libs</code> 目录下的 so 文件都是未做 strip 处理的，我们需要保存好这个文件。</li><li><code>stripped_native_libs</code> 目录下则是经过 strip 处理的 so 文件，会被打到最终的 apk 当中。</li></ul><p>保存未做 strip 的 so 文件，最好是在 ci 构建新的 Library 或者 Application 时自动将其保存的特定位置以便于后续分析使用。</p><p>另外也可以通过 Android sdk 提供的工具 <code>aarch64-linux-android-strip</code> 手动进行 strip，工具位于 <code>$HOME/Library/Android/sdk/ndk/21.4.7075529/toolchains</code> 目录下 (自行选择可用的 NDK 版本)</p><p>在 toolchains 目录下通过 <code>fzf</code> 搜索 <code>-android-strip</code> 可以得到如下</p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/ylwbKV.png" alt="ylwbKV"></p><p>然后可以进入 <code>aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin/</code> 目录，使用如下命令可以直接将 debug 的 so 进行 strip 处理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aarch64-linux-android-strip --strip-all libtest.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 Cmake 进行编译的时候，可以增加如下命令，可以直接编译出 strip 的 so</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s")</span><span class="token comment">#set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用 mk 文件进行编译的时候，可以增加如下命令，也可以直接编译出 strip 的 so</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-fvisibility</span><span class="token operator">=</span>hidden<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="异常捕获解析"><a href="#异常捕获解析" class="headerlink" title="异常捕获解析"></a>异常捕获解析</h2><p>可以参考 <a href="https://juejin.cn/post/6932757164003950599">Android NativeCrash 捕获与解析</a> 使用 logcat, DropBox, Breakpad 都可以获取到 Native exception 日志，但都存在不少问题。</p><ul><li>logcat 的缺点是只能测试调试过程中使用，正式环境无法使用。</li><li>DropBox 的缺点是只适用于系统应用，普通应用使用困难。</li><li>Breakpad 是 Google 开源的，非常成熟，但使用比较麻烦，而且代码量很大。</li></ul><p><a href="https://github.com/iqiyi/xCrash">iqiyi/xCrash</a> 是爱奇艺开源的捕获 Java exception, Native exception, ANR 的库，不需要任何 root 权限或系统权限，很适合用来捕获 Native exception，具体使用和原理可以参考项目中的<a href="https://github.com/iqiyi/xCrash/blob/master/README.zh-CN.md">文档</a>。</p><p>当异常发生时， xCrash 捕获异常并保存到初始化设置的目录，Native exception 示例如下（完成可以参考 <a href="https://github.com/iqiyi/xCrash/blob/master/doc/tombstone_native_arm64-v8a.txt">native crash (arm64-v8a)</a>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***Tombstone maker: <span class="token string">'xCrash 2.4.6'</span>Crash type: <span class="token string">'native'</span>Start time: <span class="token string">'2019-10-12T03:18:02.523+0800'</span>Crash time: <span class="token string">'2019-10-12T03:18:21.127+0800'</span>App ID: <span class="token string">'xcrash.sample'</span>App version: <span class="token string">'1.2.3-beta456-patch789'</span>Rooted: <span class="token string">'No'</span>API level: <span class="token string">'29'</span>OS version: <span class="token string">'10'</span>Kernel version: <span class="token string">'Linux version 3.18.137-g382d7256ce44 #1 SMP PREEMPT Fri Jul 12 06:00:07 UTC 2019 (aarch64)'</span>ABI list: <span class="token string">'arm64-v8a,armeabi-v7a,armeabi'</span>Manufacturer: <span class="token string">'Google'</span>Brand: <span class="token string">'google'</span>Model: <span class="token string">'Pixel'</span>Build fingerprint: <span class="token string">'google/sailfish/sailfish:10/QP1A.190711.020/5800535:user/release-keys'</span>ABI: <span class="token string">'arm64'</span>pid: <span class="token number">20501</span>, tid: <span class="token number">20501</span>, name: xcrash.sample <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> xcrash.sample <span class="token operator">&lt;&lt;&lt;</span>signal <span class="token number">11</span> <span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">)</span>, code <span class="token number">1</span> <span class="token punctuation">(</span>SEGV_MAPERR<span class="token punctuation">)</span>, fault addr 0x0x0 0000000000000003 x1 0000000000000000 x2 000000751128fd60 x3 0000007511290020x4 000000751128fd60 x5 00000075a26c1708 x6 000000751128fd50 x7 00000075200a59dcx8 0000000000000000 x9 79fc7e30c0ff4d9e x10 00000000000003e8 x11 0000000000000000x12 0000000000004100 x13 0000000000000001 x14 0000000000080100 x15 0000000000000000x16 00000074b9be4d20 x17 00000074b9bcc86c x18 00000075a57fa000 x19 00000075a4f52000x20 0000000000000000 x21 00000075a4f52000 x22 0000007fe0ef23a0 x23 00000074bb1b62fex24 0000000000000004 x25 00000075a5107020 x26 00000075a4f520b0 x27 0000000000000001x28 0000007fe0ef2130 x29 0000007fe0ef2090sp 0000007fe0ef2070 lr 00000074b9bcc8cc pc 00000074b9bcc884backtrace:<span class="token comment">#00 pc 000000000000b884 /data/app/xcrash.sample-WeCpVYjROKKgYtuzbHflHg==/lib/arm64/libxcrash.so (xc_test_call_4+24)</span><span class="token comment">#01 pc 000000000000b8c8 /data/app/xcrash.sample-WeCpVYjROKKgYtuzbHflHg==/lib/arm64/libxcrash.so (xc_test_call_3+24)</span><span class="token comment">#02 pc 000000000000b8f8 /data/app/xcrash.sample-WeCpVYjROKKgYtuzbHflHg==/lib/arm64/libxcrash.so (xc_test_call_2+24)</span><span class="token comment">#03 pc 000000000000b920 /data/app/xcrash.sample-WeCpVYjROKKgYtuzbHflHg==/lib/arm64/libxcrash.so (xc_test_call_1+16)</span><span class="token comment">#04 pc 000000000000b9b4 /data/app/xcrash.sample-WeCpVYjROKKgYtuzbHflHg==/lib/arm64/libxcrash.so (xc_test_crash+124)</span><span class="token comment">#05 pc 000000000013f350 /apex/com.android.runtime/lib64/libart.so (art_quick_generic_jni_trampoline+144)</span><span class="token comment">#06 pc 00000000001365b8 /apex/com.android.runtime/lib64/libart.so (art_quick_invoke_static_stub+568)</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从捕获到的日志可以看到非常完整的信息：Crash 类型，启动时间，崩溃时间，各种版本信息和设备信息，崩溃的进程和线程，</p><p>从 signal 可以看到崩溃的原因是 <code>fault addr 0x0</code></p><p>具体崩溃的堆栈则是在 <code>backtrace</code> 中，我们可以通过 <code>addr2line</code> 工具配合编译生成的带符号表的 so 文件，找到代码中崩溃的位置</p><p>addr2line 工具位于 <code>$HOME/Library/Android/sdk/ndk/selectVersion/toolchains</code> , 我们在这个目录通过 <code>fzf</code> 搜索 <code>-addr2line</code> ：</p><p><code>~/Library/Android/sdk/ndk/21.4.7075529/toolchains</code> 搜索结果</p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/8xDTeQ.png" alt="8xDTeQ"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin/aarch64-linux-android-addr2linearm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-addr2linex86_64-4.9/prebuilt/darwin-x86_64/bin/x86_64-linux-android-addr2linex86-4.9/prebuilt/darwin-x86_64/bin/i686-linux-android-addr2linellvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android-addr2linellvm/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-addr2linellvm/prebuilt/darwin-x86_64/bin/x86_64-linux-android-addr2linellvm/prebuilt/darwin-x86_64/bin/i686-linux-android-addr2linellvm/prebuilt/darwin-x86_64/bin/llvm-addr2line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>~/Library/Android/sdk/ndk/23.1.7779620/toolchains</code> 搜索结果</p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/mO3apY.png" alt="mO3apY"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">llvm/prebuilt/darwin-x86_64/bin/llvm-addr2line<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出不能 ndk 版本还是不一样，高版本只有一个 <code>llvm-addr2line</code>, 低版本则存在多个 <code>*-linux-android-addr2line</code></p><p>具体使用方法如下: </p><p>通过日志找到崩溃的 so 文件 (未 strip), 然后执行下面指令，传入 so 文件路径和 backtrace 的堆栈信息</p><pre class="line-numbers language-none"><code class="language-none">addr2line -C -f -e 未strip的so路径 backtrace堆栈信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-e 表示打印错误地址的对应路径及行数</li><li>-C -f 表示打印错误行数所在的函数名称</li><li>backtrace 堆栈信息可以写多个，使用空格隔开</li><li>addr2line 程序可以使用完整路径或者切换到所在路径使用</li></ul><p>测试 release 的 arm64 so 示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># weiwei in ~/Library/Android/sdk/ndk/21.4.7075529/toolchains/aarch64-linux-android-4.9/prebuilt/darwin-x86_64/bin</span>aarch64-linux-android-addr2line <span class="token parameter variable">-e</span> xcrash_lib/build/intermediates/merged_native_libs/release/out/lib/arm64-v8a/libxcrash.so 000000000000b884xCrash/xcrash_lib/src/main/cpp/xcrash/xc_test.c:65<span class="token comment"># 实测 ndk/21.4.7075529: aarch64-linux-android-addr2line, x86_64-linux-android-addr2line, i686-linux-android-addr2line 都是可用的，arm-linux-androideabi-addr2line, llvm-addr2line 则不行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># weiwei in ~/Library/Android/sdk/ndk/23.1.7779620/toolchains/llvm/prebuilt/darwin-x86_64/bin</span>llvm-addr2line <span class="token parameter variable">-e</span> xcrash_lib/build/intermediates/merged_native_libs/release/out/lib/arm64-v8a/libxcrash.so 000000000000b884xCrash/xcrash_lib/src/main/cpp/xcrash/xc_test.c:65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到异常发生的位置之后就可以从源代码去分析具体异常原因了，如果不方便保存带 debug 信息的 so 文件，可以单独提取出符号表，符号表提取和使用参考：<a href="https://juejin.cn/post/6932757164003950599#heading-12">Android NativeCrash 捕获与解析# 三、so&nbsp;符号表的提取</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://juejin.cn/post/6932757164003950599">Android NativeCrash 捕获与解析</a></li><li><a href="https://mp.weixin.qq.com/s/g-WzYF3wWAljok1XjPoo7w">Android 平台 Native 代码的崩溃捕获机制及实现</a></li><li><a href="https://github.com/google/breakpad">https://github.com/google/breakpad</a></li><li><a href="https://github.com/iqiyi/xCrash">https://github.com/iqiyi/xCrash</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> C++ </tag>
            
            <tag> NDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 开发环境自动部署</title>
      <link href="/20220918/mac-dev-setup/"/>
      <url>/20220918/mac-dev-setup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Project: <a href="https://github.com/weikeet/macsetup">https://github.com/weikeet/macsetup</a></p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li><a href="https://developer.apple.com/download/more/">Command Line Tools</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>安装好 <a href="https://developer.apple.com/download/more/">Command Line Tools</a> 后，就可以使用 <a href="https://git-scm.com/">Git</a> 命令了。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h3><p>只需要执行以下代码即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://raw.githubusercontent.com/weikeet/macsetup/master/setup.sh <span class="token operator">|</span> <span class="token function">sh</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/.macsetup <span class="token operator">&amp;&amp;</span> <span class="token function">zsh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h3><p>手动 clone 到 <code>~/.macsetup</code> 目录下，然后执行 <code>zsh install.sh</code> 即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/weikeet/macsetup.git ~/.macsetup<span class="token builtin class-name">cd</span> ~/.macsetup <span class="token operator">&amp;&amp;</span> <span class="token function">zsh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><h3 id="Zsh-detects-insecure-completion-dependent-directories"><a href="#Zsh-detects-insecure-completion-dependent-directories" class="headerlink" title="Zsh detects insecure completion-dependent directories"></a>Zsh detects insecure completion-dependent directories</h3><p>安装 oh-my-zsh 后显示 Zsh detects insecure completion-dependent directories … 警告</p><p>解决方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> ~/.macsetup/env/oh_my_zsh_fixed.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2><ul><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术</a></li><li><a href="https://github.com/bestswifter/macbootstrap/">bestswifter/macbootstrap</a></li><li><a href="https://github.com/nicolashery/mac-dev-setup">nicolashery/mac-dev-setup</a></li><li><a href="https://github.com/donnemartin/dev-setup">donnemartin/dev-setup</a></li><li><a href="https://github.com/bkuhlmann/mac_os-config">bkuhlmann/mac_os-config</a></li><li><a href="https://sourabhbajaj.com/mac-setup/">sourabhbajaj/mac-setup/</a></li></ul><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/28900182">Zsh 开发指南</a></li><li><a href="https://blog.csdn.net/u014297722/article/details/54601660">shell 数组、字典、source、split</a></li><li><a href="https://stackoverflow.com/questions/6047648/associative-arrays-error-declare-a-invalid-option">fixed declare: -A: invalid option</a></li><li><a href="https://juejin.cn/post/6844903553119748109">10分钟入门Shell脚本编程</a></li><li><a href="https://juejin.cn/post/6962032698697187364">Shell 脚本常用语法</a></li><li><a href="http://billie66.github.io/TLCL/book/index.html">Shell</a></li><li><a href="https://juejin.cn/post/7108908752174579743">如何优雅地解析命令行选项</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI2OTA3NTk3Ng==&amp;mid=2649284881&amp;idx=1&amp;sn=a5e1039c159422ab90ac97264147b0de">如何优雅地处理命令行参数？</a></li><li><a href="https://cloud.tencent.com/developer/article/1629932">这样处理shell脚本参数，爽多了</a></li></ul><h3 id="Terminal-Beautify"><a href="#Terminal-Beautify" class="headerlink" title="Terminal Beautify"></a>Terminal Beautify</h3><ul><li><a href="https://ohmyz.sh/">oh-my-zsh</a></li><li><a href="https://iterm2.com/">iTerm2 app</a></li><li><a href="https://alacritty.com/">Alacritty app</a></li><li><a href="https://www.macosicons.com/">macOS App icons</a></li><li><a href="https://www.zhihu.com/question/51622732">如何让 iTerm2 在任何界面呼入呼出</a></li><li><a href="https://sspai.com/post/74216">打开终端总有好心情：我的美化方案及配置分享</a></li><li><a href="https://github.com/dracula/iterm">Dracula iTerm2 theme</a></li><li><a href="https://github.com/dracula/zsh">Dracula zsh theme</a></li><li><a href="https://blog.dreamfever.me/2021/02/13/alacritty-pei-zhi-zhi-nan/">Alacritty 配置指南</a></li><li><a href="https://starship.rs/">starship</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 软键盘分析和最佳实践</title>
      <link href="/20220620/android-softkeyboard/"/>
      <url>/20220620/android-softkeyboard/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Project: <a href="https://github.com/weikeet/SoftKeyboardWatcher">https://github.com/weikeet/SoftKeyboardWatcher</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>软键盘是 Android 进行用户交互的重要途径之一，Android 应用开发基本无法避免不使用它。</p></li><li><p>然而官方没有提供一套明确的 API 来获取软键盘相关信息：</p><ul><li>软键盘是否正在展示</li><li>软键盘高度等</li></ul></li><li><p>本次分享将从以下内容来分析软键盘</p><ul><li>软键盘开启与关闭</li><li>软键盘示例分析</li><li>softInputMode 使用及原理</li><li>如何获取可见区域</li><li>WindowInsets API</li><li>软键盘适配最佳实践</li></ul></li></ul><h2 id="软键盘弹出和关闭"><a href="#软键盘弹出和关闭" class="headerlink" title="软键盘弹出和关闭"></a>软键盘弹出和关闭</h2><p>平时和软键盘交互最多的就是 <code>EditText</code>, 当点击 <code>EditText</code> 时键盘就会弹出，当点击返回按钮时键盘收起：</p><img class="h-60" src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-1.gif"><p>既然已经有弹出、收起键盘的例子，那么找找其如何控制键盘的。</p><p>从 TextView (EditText extends TextView) 源码看看如何点击时弹出软键盘</p><h3 id="弹出软键盘"><a href="#弹出软键盘" class="headerlink" title="弹出软键盘"></a>弹出软键盘</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getActionMasked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...  </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mMovement <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">onCheckIsTextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> mText <span class="token keyword">instanceof</span> <span class="token class-name">Spannable</span> <span class="token operator">&amp;&amp;</span> mLayout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//...  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>touchIsFinished <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isTextEditable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> textIsSelectable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Show the IME, except when selecting in read-only text.  </span>      <span class="token keyword">final</span> <span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token function">getInputMethodManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">viewClicked</span><span class="token punctuation">(</span>imm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTextEditable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mEditor<span class="token punctuation">.</span>mShowSoftInputOnFocus <span class="token operator">&amp;&amp;</span> imm <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">showAutofillDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        imm<span class="token punctuation">.</span><span class="token function">showSoftInput</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//...  </span>    <span class="token punctuation">}</span>      <span class="token comment">//...  </span>  <span class="token punctuation">}</span>    <span class="token comment">//...  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出弹出键盘需要两个步骤：</p><blockquote><p>1、获取 InputMethodManager 实例<br>2、调用 showSoftInput()</p></blockquote><h3 id="关闭软键盘"><a href="#关闭软键盘" class="headerlink" title="关闭软键盘"></a>关闭软键盘</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEditorAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> actionCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//...</span><span class="token keyword">if</span> <span class="token punctuation">(</span>actionCode <span class="token operator">==</span> <span class="token class-name">EditorInfo</span><span class="token punctuation">.</span><span class="token constant">IME_ACTION_DONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">InputMethodManager</span> imm <span class="token operator">=</span> <span class="token function">getInputMethodManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> imm<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          imm<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得出关闭键盘也只需要两步：</p><blockquote><p>1、获取 InputMethodManager 实例<br>2、调用 hideSoftInputFromWindow()</p></blockquote><h3 id="注意-📢"><a href="#注意-📢" class="headerlink" title="注意 📢"></a>注意 📢</h3><ol><li><code>imm.showSoftInput(view, code)</code> 通常 view 传入的是 EditText 类型。<ul><li>如果传入其它 <code>View</code>，需要设置 <code>setFocusableInTouchMode(true)</code> 才能弹出键盘。</li><li>比较完善的实现还需在 <code>onTouchEvent()</code> 里弹出键盘、将 <code>Button</code> 与键盘关联，实际上就是模仿 EditText 的实现。</li></ul></li><li><code>imm.showSoftInput(view, code)</code>, <code>imm.hideSoftInputFromWindow(windowToken, code)</code> 两个方法的最后一个参数用来匹配关闭键盘时判断当初弹出键盘时传入的类型，一般填 0 即可。</li><li><code>imm.hideSoftInputFromWindow(windowToken, code)</code> 第一个参数传入的 IBinder windowToken 类型。<ul><li>每个 Activity 创建时候会生成 windowToken，该值存储在 AttachInfo 里。</li><li>因此对于同一个 Activity 里的 ViewTree，每个 View 持有的 windowToken 都是指向相同对象。</li></ul></li></ol><h2 id="软键盘示例分析"><a href="#软键盘示例分析" class="headerlink" title="软键盘示例分析"></a>软键盘示例分析</h2><img h="60" src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-1.gif"><ul><li>当键盘弹起的时，当前能看到的是两个 Window: <code>Activity#Window</code> 和 <code>IME#Window</code></li><li><code>IME#Window</code> 展示遮住 <code>Activity#Window</code> 的部分区域，为了使 <code>EditText</code> 能够被看到，<code>Activity</code> 布局会向上偏移</li></ul><blockquote><p>Window 区域构成和变化情况</p></blockquote><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/H0CsIU.jpg" alt="H0CsIU"></p><blockquote><p>软键盘弹出时 Window 状态：Window {d 855900 InputMethod} 正好在 ImeTestActivity 之上</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>{all|6,7}</span></div><code class="language-bash">$ adb shell dumpsys window<span class="token operator">|</span><span class="token function">grep</span> WindowStateAnimator      Window <span class="token comment">#0: WindowStateAnimator{e30fe7 com.android.systemui.ImageWallpaper}</span>      Window <span class="token comment">#1: WindowStateAnimator{3305794 com.google.android.apps.nexuslauncher/com.google.android.apps.nexuslauncher.NexusLauncherActivity}</span>      Window <span class="token comment">#2: WindowStateAnimator{6bc923d com.google.android.apps.nexuslauncher/com.google.android.apps.nexuslauncher.NexusLauncherActivity}</span>      Window <span class="token comment">#3: WindowStateAnimator{b070a32 com.weiwei.keyboard.watcher.sample/com.weiwei.keyboard.watcher.sample.MainActivity}</span>      Window <span class="token comment">#4: WindowStateAnimator{bc6c383 com.weiwei.keyboard.watcher.sample/com.weiwei.keyboard.watcher.sample.test.ImeTestActivity}</span>      Window <span class="token comment">#5: WindowStateAnimator{d855900 InputMethod}</span>      Window <span class="token comment">#6: WindowStateAnimator{8e51539 ShellDropTarget}</span>      Window <span class="token comment">#7: WindowStateAnimator{917977e StatusBar}</span>      Window <span class="token comment">#8: WindowStateAnimator{8a814df NotificationShade}</span>      Window <span class="token comment">#9: WindowStateAnimator{967052c NavigationBar0}</span>      Window <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是谁控制了 Window 向上偏移呢？</p><ul><li>Window 中恰好就有控制软键盘的参数 WindowManager.LayoutParams.softInputMode</li></ul><blockquote><p>试想以下问题如何解决：<br>1、当键盘弹出时，底部 Button 恰好保持在键盘之上。<br>2、当键盘弹出时，任何 View 都不需要顶上去。</p></blockquote><h2 id="softInputMode-文档说明"><a href="#softInputMode-文档说明" class="headerlink" title="softInputMode 文档说明"></a>softInputMode 文档说明</h2><p>softInputMode 顾名思义：<strong>软键盘模式</strong>，控制软键盘是否可见、关联的 EditText 是否跟随键盘移动等，重点关注以下属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// WindowManager.java</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SOFT_INPUT_ADJUST_UNSPECIFIED</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SOFT_INPUT_ADJUST_RESIZE</span> <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SOFT_INPUT_ADJUST_PAN</span> <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SOFT_INPUT_ADJUST_NOTHING</span> <span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从注释的文档上看：</p><ul><li>ADJUST_UNSPECIFIED: 不指定调整方式，系统自行决定使用哪种调整方式</li><li>ADJUST_RESIZE: 显示软键盘时调整窗口大小，使其内容不被输入法覆盖</li><li>ADJUST_PAN: 显示软键盘时，窗口将回平移来保证输入焦点可见</li><li>ADJUST_NOTHING: 不做任何操作</li></ul><h2 id="softInputMode-设置方法"><a href="#softInputMode-设置方法" class="headerlink" title="softInputMode 设置方法"></a>softInputMode 设置方法</h2><p>softInputMode 默认是 ADJUST_UNSPECIFIED 模式，其他模式设置方法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">方法<span class="token number">1</span> Activity#onCreate  window<span class="token punctuation">.</span><span class="token function">setSoftInputMode</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>SOFT_INPUT_ADJUST_NOTHING<span class="token punctuation">)</span>方法<span class="token number">2</span> AndroidManifest<span class="token punctuation">.</span>xml activity tagandroid<span class="token operator">:</span>windowSoftInputMode<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"adjustNothing"</span></span>方法<span class="token number">3</span> Application<span class="token operator">/</span>Activity theme  <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"android:windowSoftInputMode"</span></span><span class="token operator">&gt;</span>adjustNothing<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="softInputMode-示例对比"><a href="#softInputMode-示例对比" class="headerlink" title="softInputMode 示例对比"></a>softInputMode 示例对比</h2><p>以这三种布局约束排列结构为示例：分别点击两个 EditText 来测试弹出和收起软键盘</p><img class="h-100" src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/byqhVE.jpg"><hr><h2 id="SOFT-INPUT-ADJUST-RESIZE"><a href="#SOFT-INPUT-ADJUST-RESIZE" class="headerlink" title="SOFT_INPUT_ADJUST_RESIZE"></a>SOFT_INPUT_ADJUST_RESIZE</h2><table><thead><tr><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-resize-1.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-resize-2.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-resize-3.gif" class="h-100"></th></tr></thead></table><p>从三个示例 gif 可以看出：软键盘弹出/关闭时，布局高度会随着改变，布局中的控件会重新布局。</p><p>所以与底部没有约束关系的 View 在布局高度变化的时候，不会跟随移动。</p><ul><li>那么思考一下 ADJUST_RESIZE 模式下的几个问题：<ul><li>如何改变布局高度？</li><li>改变了哪个布局的高度？</li><li>是否一定会改变布局高度？</li></ul></li></ul><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>由以上的示例可知一定是 ViewTree 里的某个 ViewGroup 高度改变了。</p><p>键盘本身是一个 Window，键盘弹出影响了 <code>ActivityWindow</code> 大小，从而导致 ViewTree 变化，而 Window 和 ViewTree 的联系则是通过 <code>ViewRootImpl.java</code> 实现的</p><p><code>ViewRootImpl</code> 接收 <code>WMS 事件</code> 的处理过程如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ViewRootImpl.java</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ViewRootHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleMessageImpl</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//接收窗口变化事件</span>      <span class="token keyword">case</span> <span class="token constant">MSG_RESIZED</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//args 记录了各个区域大大小</span>        <span class="token class-name">SomeArgs</span> args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeArgs</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>        <span class="token comment">//-------------------&gt;Note 1</span>        <span class="token comment">//arg 1----&gt;Window 的尺寸</span>        <span class="token comment">//arg 2----&gt;内容区域限定边界</span>        <span class="token comment">//arg 3-----&gt;可见区域的限定边界</span>        <span class="token comment">//arg 6-----&gt;固定区域的限定边界</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mWinFrame<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingOverscanInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingContentInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingStableInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">6</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingDisplayCutout<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">9</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingVisibleInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingOutsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">7</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> mPendingBackDropFrame<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>arg <span class="token number">4</span> <span class="token operator">==</span> <span class="token keyword">null</span>            <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>argi <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span>            <span class="token operator">&amp;&amp;</span> mDisplay<span class="token punctuation">.</span><span class="token function">getDisplayId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> args<span class="token punctuation">.</span>argi <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//各个区域大小都没变化，则不作任何操作</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> <span class="token constant">MSG_RESIZED_REPORT</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">SomeArgs</span> args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeArgs</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>          <span class="token comment">//...</span>          <span class="token keyword">final</span> <span class="token keyword">boolean</span> framesChanged <span class="token operator">=</span> <span class="token operator">!</span>mWinFrame<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token operator">!</span>mPendingOverscanInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token operator">!</span>mPendingContentInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token operator">!</span>mPendingStableInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">6</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token operator">!</span>mPendingDisplayCutout<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">9</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token operator">!</span>mPendingVisibleInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token operator">!</span>mPendingOutsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>arg <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//重新设置 Window 尺寸</span>          <span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将值记录到各个成员变量里</span>          mPendingOverscanInsets<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mPendingContentInsets<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mPendingStableInsets<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mPendingDisplayCutout<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DisplayCutout</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mPendingVisibleInsets<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mPendingOutsets<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mPendingBackDropFrame<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Rect</span><span class="token punctuation">)</span> args<span class="token punctuation">.</span>arg <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mForceNextWindowRelayout <span class="token operator">=</span> args<span class="token punctuation">.</span>argi <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>          mPendingAlwaysConsumeSystemBars <span class="token operator">=</span> args<span class="token punctuation">.</span>argi <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>          args<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what <span class="token operator">==</span> <span class="token constant">MSG_RESIZED_REPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reportNextDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>mView <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>framesChanged <span class="token operator">||</span> configChanged<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//尺寸发生变化，强制走 layout+draw 过程-----------&gt;Note2</span>            <span class="token function">forceLayout</span><span class="token punctuation">(</span>mView<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">//重新 layout--------------&gt;Note3</span>          <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码列出了三个注意点，分别来看看：</p><p><strong>Note 1</strong></p><blockquote><p>//arg 1—-&gt;Window 的尺寸<br>//arg 2—-&gt;内容区域限定边界<br>//arg 3—–&gt;可见区域的限定边界<br>//arg 6—–&gt;固定区域的限定边界<br>arg 是 Rect 类型</p></blockquote><p>“限定边界”是什么意思呢？以小米 6 测试机为例 (屏幕尺寸 1920 x 1080)：可以看出，所谓的”限定边界”实际上就是上面矩形区域。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/MOu2ZNAwZwMdfb25nt76qmRW3aHYfib3Jcb824y8lXxDxZSyicd1YpSeBM9CIlIJ6yj3ibhExG2Af8qeopGTfnIlg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>当键盘弹出时：</p><ul><li>arg 1—-&gt;Rect(0, 0 - 1080, 1920)</li><li>arg 2—-&gt;Rect(0, 63 - 0, 972)</li><li>arg 3—-&gt;Rect(0, 63 - 0, 972)</li><li>arg 6—-&gt;Rect(0, 63 - 0, 126)</li></ul><p>当键盘收起后：</p><ul><li>arg 1—-&gt;Rect(0, 0 - 1080, 1920)</li><li>arg 2—-&gt;Rect(0, 63 - 0, 126)</li><li>arg 3—-&gt;Rect(0, 63 - 0, 126)</li><li>arg 6—-&gt;Rect(0, 63 - 0, 126)</li></ul><p>看到此，大家都明白了：</p><ul><li>arg 1 表示的屏幕尺寸。</li><li>arg 6 表示的是状态栏和导航栏的高度。</li><li>arg 6 赋值给了 mPendingStableInsets，从名字可以看出，这值是不变的。</li></ul><p>无论键盘弹出还是关闭，这两个值都不变，变的是 arg 2 和 arg 3，而 arg 2 赋值给了 mPendingContentInsets，arg 3 赋值给了 mPendingVisibleInsets。好了，现在 arg 2、arg 3、arg 6 都记录到成员变量里了。</p><p><strong>Note 2 &amp; 3</strong></p><p>尺寸发生了变化后调用：</p><p>forceLayout(mView)—&gt;ViewTree 里每个 View/ViewGroup 打上 layout, draw 标记，也就是说每个 View/ViewGroup 最后都会执行三大流程。</p><p>requestLayout()—&gt; 触发执行三大流程</p><p>既然记录了尺寸的变化，继续跟踪这些值怎么使用。调用 requestLayout() 将会触发执行 performTraversals() 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ViewRootImpl.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mFirst <span class="token operator">||</span> windowShouldResize <span class="token operator">||</span> insetsChanged <span class="token operator">||</span>      viewVisibilityChanged <span class="token operator">||</span> params <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> mForceNextWindowRelayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token keyword">boolean</span> hwInitialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//内容边界是否发生变化</span>    <span class="token keyword">boolean</span> contentInsetsChanged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">//...</span>      <span class="token comment">//内容区域变化-----------&gt;Note 1</span>      contentInsetsChanged <span class="token operator">=</span> <span class="token operator">!</span>mPendingContentInsets<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>        mAttachInfo<span class="token punctuation">.</span>mContentInsets<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentInsetsChanged <span class="token operator">||</span> mLastSystemUiVisibility <span class="token operator">!=</span>          mAttachInfo<span class="token punctuation">.</span>mSystemUiVisibility <span class="token operator">||</span> mApplyInsetsRequested          <span class="token operator">||</span> mLastOverscanRequested <span class="token operator">!=</span> mAttachInfo<span class="token punctuation">.</span>mOverscanRequested          <span class="token operator">||</span> outsetsChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//...</span>        <span class="token comment">//分发 Inset-----------&gt;Note2</span>        <span class="token function">dispatchApplyInsets</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        contentInsetsChanged <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//...</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//...</span>  <span class="token punctuation">}</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要看两个点：</p><p><strong>Note 1</strong>: 内容区域发生变化</p><ul><li>当设置 SOFT_INPUT_ADJUST_RESIZE，键盘弹起时内容区域发生变化，因此会执行 dispatchApplyInsets()</li><li>当设置 SOFT_INPUT_ADJUST_PAN，键盘弹起时内容部区域不变，因此不会执行 dispatchApplyInsets()</li></ul><p><strong>Note 2</strong>: 分发 Inset</p><p>这些记录的值会存储在 AttachInfo 对应的变量里。该方法调用栈如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/MOu2ZNAwZwMdfb25nt76qmRW3aHYfib3Jia0cOnrqxNZMK6fz8Bwqiaouks0V0DgnV8gUpXHfhTKKBEq0fjJW6OEw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>dispatchApplyWindowInsets(WindowInsets insets）里的 insets 构成是通过计算之前记录在 mPendingXx 里的边界值。</p><p>最终调用 fitSystemWindowsInt():</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// View.java</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">fitSystemWindowsInt</span><span class="token punctuation">(</span><span class="token class-name">Rect</span> insets<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//对于 DecorView 的子布局 LinearLayout 来说，默认 fitsSystemWindows=true</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> <span class="token constant">FITS_SYSTEM_WINDOWS</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">FITS_SYSTEM_WINDOWS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token comment">//设置 padding</span>    <span class="token function">internalSetPadding</span><span class="token punctuation">(</span>localInsets<span class="token punctuation">.</span>left<span class="token punctuation">,</span> localInsets<span class="token punctuation">.</span>top<span class="token punctuation">,</span> localInsets<span class="token punctuation">.</span>right<span class="token punctuation">,</span> localInsets<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这答案就呼之欲出了，DecorView 的子布局 LinearLayout 设置 padding，从而影响 LinearLayout 子布局的高度，最终会影响到 Activity 布局文件的高度。</p><hr><h2 id="SOFT-INPUT-ADJUST-PAN"><a href="#SOFT-INPUT-ADJUST-PAN" class="headerlink" title="SOFT_INPUT_ADJUST_PAN"></a>SOFT_INPUT_ADJUST_PAN</h2><table><thead><tr><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-1.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-2.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-3.gif" class="h-100"></th></tr></thead></table><p>软键盘弹出/关闭时，整个布局会上移，布局高度不会改变，布局中的控件不会重新布局。</p><ul><li>ADJUST_PAN 如何移动整个布局？</li></ul><p>当点击输入框 1 的时候，界面没有移动，当点击输入框 2 的时候，界面向上移动了。接下来将分析为啥会有这样的表现。</p><h3 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h3><p><code>ADJUST_PAN</code> 和 <code>ADJUST_RESIZE</code> 流程差不多，也是在 ViewRootImpl 里接收窗口变化的通知，不同的是：</p><p>当键盘弹起时：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- arg <span class="token number">1</span>----<span class="token operator">&gt;</span>Rect<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span> - <span class="token number">1080</span>, <span class="token number">1920</span><span class="token punctuation">)</span>- arg <span class="token number">2</span>----<span class="token operator">&gt;</span>Rect<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">63</span> - <span class="token number">0</span>, <span class="token number">126</span><span class="token punctuation">)</span>- arg <span class="token number">3</span>----<span class="token operator">&gt;</span>Rect<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">63</span> - <span class="token number">0</span>, <span class="token number">972</span><span class="token punctuation">)</span>- arg <span class="token number">6</span>----<span class="token operator">&gt;</span>Rect<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">63</span> - <span class="token number">0</span>, <span class="token number">126</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 arg 2 没有变化，也就是内容区域没有变，最终不会执行 <code>ViewRootImp-&gt; dispatchApplyInsets(xx)</code> ，当然布局的高度就不会变。</p><p>先来分析为什么点击输入框 2 能往上移动。我们知道布局移动无非就是坐标发生改变，或者内容滚动了，不管是何种形式最终都需要通过对 Canvas 进行位移才能实现移动的效果。</p><p>当窗口事件到来之后，发起 View 的三大绘制流程，并且将限定边界存储到 AttachInfo 的成员变量里，有如下关系：</p><ul><li>mPendingContentInsets–&gt;mAttachInfo.mContentInsets;</li><li>mPendingVisibleInsets–&gt;mAttachInfo.mVisibleInsets;</li></ul><p>依旧是从三大流程开启的方法开始分析。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ViewRootImpl.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span>  <span class="token comment">//在执行 Draw 过程之前执行</span>  <span class="token keyword">boolean</span> cancelDraw <span class="token operator">=</span> mAttachInfo<span class="token punctuation">.</span>mTreeObserver<span class="token punctuation">.</span><span class="token function">dispatchOnPreDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>isViewVisible<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancelDraw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token comment">//开启 Draw 过程</span>    <span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>performDraw() 最终执行了 scrollToRectOrFocus() 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// View.java</span><span class="token keyword">boolean</span> <span class="token function">scrollToRectOrFocus</span><span class="token punctuation">(</span><span class="token class-name">Rect</span> rectangle<span class="token punctuation">,</span> <span class="token keyword">boolean</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Rect</span> ci <span class="token operator">=</span> mAttachInfo<span class="token punctuation">.</span>mContentInsets<span class="token punctuation">;</span> <span class="token comment">//窗口内容区域</span>  <span class="token keyword">final</span> <span class="token class-name">Rect</span> vi <span class="token operator">=</span> mAttachInfo<span class="token punctuation">.</span>mVisibleInsets<span class="token punctuation">;</span> <span class="token comment">//窗口可见区域</span>  <span class="token keyword">int</span> scrollY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//滚动距离</span>  <span class="token keyword">boolean</span> handled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vi<span class="token punctuation">.</span>left <span class="token operator">&gt;</span> ci<span class="token punctuation">.</span>left <span class="token operator">||</span> vi<span class="token punctuation">.</span>top <span class="token operator">&gt;</span> ci<span class="token punctuation">.</span>top <span class="token operator">||</span> vi<span class="token punctuation">.</span>right <span class="token operator">&gt;</span> ci<span class="token punctuation">.</span>right <span class="token operator">||</span> vi<span class="token punctuation">.</span>bottom <span class="token operator">&gt;</span> ci<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    scrollY <span class="token operator">=</span> mScrollY<span class="token punctuation">;</span>    <span class="token comment">//找到当前有焦点的 View------------&gt;Note1</span>    <span class="token keyword">final</span> <span class="token class-name">View</span> focus <span class="token operator">=</span> mView<span class="token punctuation">.</span><span class="token function">findFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>focus <span class="token operator">==</span> lastScrolledFocus <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mScrollMayChange <span class="token operator">&amp;&amp;</span> rectangle <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//焦点没有发生切换，不做操作</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      mLastScrolledFocus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">View</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>focus<span class="token punctuation">)</span><span class="token punctuation">;</span>      mScrollMayChange <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment">// Try to find the rectangle from the focus view.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>focus<span class="token punctuation">.</span><span class="token function">getGlobalVisibleRect</span><span class="token punctuation">(</span>mVisRect<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//...</span>        <span class="token comment">//找到当前焦点与可见区域的相交部分</span>        <span class="token comment">//mVisRect 为当前焦点在 Window 里的可见部分</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTempRect<span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>mVisRect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>mTempRect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>mView<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>vi<span class="token punctuation">.</span>top<span class="token operator">-</span>vi<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//...</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mTempRect<span class="token punctuation">.</span>top <span class="token operator">&lt;</span> vi<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果当前焦点位置在窗口可见区域上边，说明焦点 View 应该往下移动到可见区域里边</span>            scrollY <span class="token operator">=</span> mTempRect<span class="token punctuation">.</span>top <span class="token operator">-</span> vi<span class="token punctuation">.</span>top<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mTempRect<span class="token punctuation">.</span>bottom <span class="token operator">&gt;</span> <span class="token punctuation">(</span>mView<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>vi<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果当前焦点位置在窗口可见区域之下，说明其应该往上移动到可见区域里边-------&gt;Note 2</span>            scrollY <span class="token operator">=</span> mTempRect<span class="token punctuation">.</span>bottom <span class="token operator">-</span> <span class="token punctuation">(</span>mView<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>vi<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//无需滚动-------&gt;Note 3</span>            scrollY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollY <span class="token operator">!=</span> mScrollY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//滚动距离发生变化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mScroller <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroller</span><span class="token punctuation">(</span>mView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//开始设置滚动-----------&gt;Note 4</span>      mScroller<span class="token punctuation">.</span><span class="token function">startScroll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mScrollY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> scrollY<span class="token operator">-</span>mScrollY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mScroller <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mScroller<span class="token punctuation">.</span><span class="token function">abortAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//赋值给成员变量</span>    mScrollY <span class="token operator">=</span> scrollY<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> handled<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Note 1: 对于上面的 Demo 来说，当前的焦点 View 就是 EditText，点击哪个 EditText，哪个就获得焦点。</li><li>Note 2: 对于输入框 2 来说，因为键盘弹出会遮住它，通过计算满足”当前焦点位置在窗口可见区域之下，说明其应该往上移动到可见区域里边” 条件，因此 srolly &gt; 0</li><li>Note 3: 而对于输入框 1 来说，当键盘弹出时，它没有被键盘遮挡，走到 else 分支，因此 scrollY = 0</li><li>Note 4: 滚动是借助 <code>Scoller</code> 类完成的。</li></ul><p>上面的操作实际上就是为了确认滚动值，并记录在成员变量 <code>mScrollY</code> 里，继续来看如何使用滚动值呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ViewRootImpl.java</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fullRedrawNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span>  <span class="token keyword">boolean</span> animating <span class="token operator">=</span> mScroller <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mScroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> curScrollY<span class="token punctuation">;</span>  <span class="token comment">//获取当前需要滚动的 scroll 值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>animating<span class="token punctuation">)</span> <span class="token punctuation">{</span>    curScrollY <span class="token operator">=</span> mScroller<span class="token punctuation">.</span><span class="token function">getCurrY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    curScrollY <span class="token operator">=</span> mScrollY<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//...</span>  <span class="token keyword">int</span> xOffset <span class="token operator">=</span> <span class="token operator">-</span>mCanvasOffsetX<span class="token punctuation">;</span>  <span class="token comment">//记录在 yOffset 里</span>  <span class="token keyword">int</span> yOffset <span class="token operator">=</span> <span class="token operator">-</span>mCanvasOffsetY <span class="token operator">+</span> curScrollY<span class="token punctuation">;</span>  <span class="token keyword">boolean</span> useAsyncReport <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirty<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> mIsAnimating <span class="token operator">||</span> accessibilityFocusDirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAttachInfo<span class="token punctuation">.</span>mThreadedRenderer <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mAttachInfo<span class="token punctuation">.</span>mThreadedRenderer<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//...</span>      <span class="token comment">//对于走硬件加速绘制</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mHardwareYOffset <span class="token operator">!=</span> yOffset <span class="token operator">||</span> mHardwareXOffset <span class="token operator">!=</span> xOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//记录偏移量到 mHardwareYOffset 里</span>        mHardwareYOffset <span class="token operator">=</span> yOffset<span class="token punctuation">;</span>        mHardwareXOffset <span class="token operator">=</span> xOffset<span class="token punctuation">;</span>        invalidateRoot <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//...</span>      mAttachInfo<span class="token punctuation">.</span>mThreadedRenderer<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>mView<span class="token punctuation">,</span> mAttachInfo<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">//软件绘制, 传入 yOffset</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">drawSoftware</span><span class="token punctuation">(</span>surface<span class="token punctuation">,</span> mAttachInfo<span class="token punctuation">,</span> xOffset<span class="token punctuation">,</span> yOffset<span class="token punctuation">,</span> scalingRequired<span class="token punctuation">,</span> dirty<span class="token punctuation">,</span> surfaceInsets<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//...</span>  <span class="token keyword">return</span> useAsyncReport<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚动值分别传递给了硬件加速绘制分支和软件绘制分支，在各自的分支里对 Canvas 进行平移。</p><p><strong>小结</strong></p><blockquote><p>当设置 SOFT_INPUT_ADJUST_PAN 时，如果发现键盘遮住了当前有焦点的 View，那么会对 RootView (此处 Demo 里 DecorView 作为 RootView) 的 Canvas 进行平移，直至有焦点的 View 显示到可见区域为止。所以点击输入框 2 的时候布局会整体向上移动。</p></blockquote><p>同样的最后用图展示这种移动效果：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/MOu2ZNAwZwMdfb25nt76qmRW3aHYfib3Jq9JWVIwcBIjEUXVLy3MxzianNoneysHbibxB8seS4H01b8Ln1qf2ziaDg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h2 id="SOFT-INPUT-ADJUST-NOTHING"><a href="#SOFT-INPUT-ADJUST-NOTHING" class="headerlink" title="SOFT_INPUT_ADJUST_NOTHING"></a>SOFT_INPUT_ADJUST_NOTHING</h2><p>软键盘弹出/关闭时，整个布局不会发生任何变化（不放 gif 图了）没有事件发出，自然不会产生任何效果了。</p><hr><h2 id="SOFT-INPUT-ADJUST-UNSPECIFIED"><a href="#SOFT-INPUT-ADJUST-UNSPECIFIED" class="headerlink" title="SOFT_INPUT_ADJUST_UNSPECIFIED"></a>SOFT_INPUT_ADJUST_UNSPECIFIED</h2><p>默认的效果与 SOFT_INPUT_ADJUST_PAN 一致。</p><table><thead><tr><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-1.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-2.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-pan-3.gif" class="h-100"></th></tr></thead></table><p>在 View 里增加 isScrollContainer 属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:isScrollContainer="true"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新运行后效果如下：</p><table><thead><tr><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-resize-1.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-resize-2.gif" class="h-100"></th><th><img src=" https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/ime-resize-3.gif" class="h-100"></th></tr></thead></table><p>可以看到 <code>ADJUST_UNSPECIFIED</code> 模式下产生的效果可能与 <code>ADJUST_PAN</code> 相同，<code>也可能与 ADJUST_RESIZE</code> 相同。</p><p>接下来就来分析 <code>选择的标准</code> 是什么？</p><h3 id="原理分析-2"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h3><p>从 <code>ViewRootImpl #performTraversals ()</code> 方法开始分析：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mFirst <span class="token operator">||</span> mAttachInfo<span class="token punctuation">.</span>mViewVisibilityChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mAttachInfo<span class="token punctuation">.</span>mViewVisibilityChanged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resizeMode <span class="token operator">=</span> mSoftInputMode <span class="token operator">&amp;</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_MASK_ADJUST</span><span class="token punctuation">;</span>    <span class="token comment">//如果没有设置，那么默认为 0，即 SOFT_INPUT_ADJUST_UNSPECIFIED</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resizeMode <span class="token operator">==</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_ADJUST_UNSPECIFIED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//查看 mScrollContainers 数组中的元素 --&gt; Note 1</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> mAttachInfo<span class="token punctuation">.</span>mScrollContainers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAttachInfo<span class="token punctuation">.</span>mScrollContainers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isShown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//如果有且 ScrollContainer=true 则设为 SOFT_INPUT_ADJUST_RESIZE 模式</span>          resizeMode <span class="token operator">=</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_ADJUST_RESIZE</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resizeMode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果没有设置为 resize 模式，则设置 pan 模式</span>        resizeMode <span class="token operator">=</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_ADJUST_PAN</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lp<span class="token punctuation">.</span>softInputMode <span class="token operator">&amp;</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_MASK_ADJUST</span><span class="token punctuation">)</span> <span class="token operator">!=</span> resizeMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lp<span class="token punctuation">.</span>softInputMode <span class="token operator">=</span> <span class="token punctuation">(</span>lp<span class="token punctuation">.</span>softInputMode <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">.</span><span class="token constant">SOFT_INPUT_MASK_ADJUST</span><span class="token punctuation">)</span> <span class="token operator">|</span> resizeMode<span class="token punctuation">;</span>        <span class="token comment">//最后赋值给 params，让 Window 属性生效</span>        params <span class="token operator">=</span> lp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note 1: <code>mAttachInfo.mScrollContainers: ArrayList&lt;View&gt;</code> 即可滚动的 View list，什么时候添加元素进去的呢？</p><p>调用 View #setScrollContainer 方法时会把 View 添加到 <code>mAttachInfo.mScrollContainers</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScrollContainer</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isScrollContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isScrollContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAttachInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mPrivateFlags<span class="token operator">&amp;</span><span class="token constant">PFLAG_SCROLL_CONTAINER_ADDED</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mAttachInfo<span class="token punctuation">.</span>mScrollContainers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; add</span>      mPrivateFlags <span class="token operator">|=</span> <span class="token constant">PFLAG_SCROLL_CONTAINER_ADDED</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mPrivateFlags <span class="token operator">|=</span> <span class="token constant">PFLAG_SCROLL_CONTAINER</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags<span class="token operator">&amp;</span><span class="token constant">PFLAG_SCROLL_CONTAINER_ADDED</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mAttachInfo<span class="token punctuation">.</span>mScrollContainers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; remove</span>    <span class="token punctuation">}</span>    mPrivateFlags <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token constant">PFLAG_SCROLL_CONTAINER</span><span class="token operator">|</span><span class="token constant">PFLAG_SCROLL_CONTAINER_ADDED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们常用的 RecyclerView 就在构造函数里默认设置了该值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">RecyclerView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setScrollContainer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以容器可以滚动的话，那么它的高度可以伸缩的，既然可以伸缩，那么刚好符合 SOFT_INPUT_ADJUST_RESIZE 模式，因此此种情况下会设置为 SOFT_INPUT_ADJUST_RESIZE 模式。</p><h2 id="如何获取可见区域"><a href="#如何获取可见区域" class="headerlink" title="如何获取可见区域"></a>如何获取可见区域</h2><p>从前面的分析可以知道：状态栏、导航栏、屏幕可见区域、内容区域限定边界都是存储在如下变量里：</p><blockquote><p>AttachInfo.mStableInsets 状态栏导航栏<br>AttachInfo.mContentInsets 内容区域限定边界<br>AttachInfo.mVisibleInsets 可见区域限定边界</p></blockquote><p>fixme-能获取到上面的值，什么状态栏、导航栏、键盘高度获取不在话下。发现这些字段的访问权限是”default”，当然你想到了反射，没错反射是可以获取这些值，但是在 Android 10.0 之后不能反射了。</p><p>反射行不通，还好 Android 还开了个口子：getWindowVisibleDisplayFrame()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWindowVisibleDisplayFrame</span><span class="token punctuation">(</span><span class="token class-name">Rect</span> outRect<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mAttachInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">//获取 Window 尺寸，注意此处的尺寸是包含状态栏、导航栏</span>      <span class="token comment">//与 getWindowManager().getDefaultDisplay().getRealSize()尺寸一致;</span>      mAttachInfo<span class="token punctuation">.</span>mSession<span class="token punctuation">.</span><span class="token function">getDisplayFrame</span><span class="token punctuation">(</span>mAttachInfo<span class="token punctuation">.</span>mWindow<span class="token punctuation">,</span> outRect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//...</span>    <span class="token keyword">final</span> <span class="token class-name">Rect</span> insets <span class="token operator">=</span> mAttachInfo<span class="token punctuation">.</span>mVisibleInsets<span class="token punctuation">;</span>    <span class="token comment">//拿到可见区域(限定边界) 运算一下，将可见区域记录在 outRect(相对于屏幕)</span>    outRect<span class="token punctuation">.</span>left <span class="token operator">+=</span> insets<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    outRect<span class="token punctuation">.</span>top <span class="token operator">+=</span> insets<span class="token punctuation">.</span>top<span class="token punctuation">;</span>    outRect<span class="token punctuation">.</span>right <span class="token operator">-=</span> insets<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    outRect<span class="token punctuation">.</span>bottom <span class="token operator">-=</span> insets<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到的 outRect 就是可见区域的位置坐标。</p><p>到此我们明白了，屏幕尺寸我们是知道的，outRect 我们也知道了，反推 mAttachInfo.mVisibleInsets 也可以算出来了，这个值有了，键盘高度也就有了。曲线救国之路至此完成了。</p><p>值得注意的是 <code>getWindowVisibleDisplayFrame()</code> 的计算依赖于 mAttachInfo.mVisibleInsets，而 <code>mAttachInfo.mVisibleInsets</code> 值发生变化的条件是设置了 <code>SOFT_INPUT_ADJUST_RESIZE</code> or <code>SOFT_INPUT_ADJUST_PAN</code> 模式。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>通过前面的示例可以看出 adjustPan 体验不太友好，adjustResize 在某些情况下又会失效，且不能完全满足需求。</p><p>adjustPan 和 adjustResize 都无法达到我们的高要求和兼容性，正如问题所说的，它们存在各种问题。</p><p>而在 adjustNothing 模式下，软键盘弹出时，页面是完全不偏不移的，我们只要能在这种模式下监听到软键盘弹出、收起事件和高度，就能自行控制页面的内容偏移或者 resize。那么怎么才能监听到弹出、收起甚至得到准确高度？</p><p>如果想做到完全可空，那么只有 adjustNothing 可选择，</p><p>adjustNothing 是一个可怕的模式，它的意思是，当键盘弹出时，Activity 不做任何变形、偏移响应。 </p><p>那么在 adjustNothing 模式下，我们如何接管软键盘逻辑？我们为什么要选择 adjustNothing？ </p><p>纯纯写作采用的方式是：在 Activity 层上加入一层完全看不见的 Window，由这个 Window 来监听键盘变化，每一个 Window 都可以设置 softInputMode，因此它可以单独设置为 adjustResize，这样当这个 Window 本身被挤压时，我们就能判断和计算出键盘的状态了，进而再通知到编辑器 Activity。</p><h3 id="弹出-关闭"><a href="#弹出-关闭" class="headerlink" title="弹出/关闭"></a>弹出/关闭</h3><h3 id="判断是否展示"><a href="#判断是否展示" class="headerlink" title="判断是否展示"></a>判断是否展示</h3><h2 id="优化补充"><a href="#优化补充" class="headerlink" title="优化补充"></a>优化补充</h2><p>现如果用户使用 FooView 浮窗组件，在 Android 9.0 之上将监听不到键盘状态。这是个坑 - 可以通过提供 Window type 解决</p><!--这个方法曾经一度完全失效，是在 Android 9 开发者预览版的时候，Drakeet 发现了相关问题，并且向谷歌反馈，谷歌立马修复了它--><h2 id="WindowInsets-Api"><a href="#WindowInsets-Api" class="headerlink" title="WindowInsets Api"></a>WindowInsets Api</h2><p>Android 11 的一些 Window Insets 相关内容提供了向下兼容： 附图是 Chris Banes 提供的示例，从图中可见，之后我们将不再需要调用一堆的 flags 和 setSystemUiVisibility(int) 了，新的接口 setDecorFitsSystemWindows 能够更方便的配置 DoctorView 是否 fit，这应该影响状态栏和导航栏区域 UI 的延伸。<br>另外，我们可以通过 ViewCompat.getRootWindowInsets(view) 来快捷获取 root insets 了，而且，ime 软键盘 insets API 也能同时获得兼容，终于，到 Android 11 时代，我们终于可以方便地获取键盘高度了？！<br>拭目以待。🌚 附：这是该 PR 的描述： </p><ul><li><p>Backport WindowInsetsCompat.getInsets(), getInsetsIgnoringVisibility and isVisible() APIs. </p></li><li><p>Works with both adjustResize and adjustPan </p></li><li><p>Backport WindowInsetsCompat.Builder APIs. </p></li><li><p>Also backports WindowCompat.setDecorFitsSystemWindows().</p></li><li><p>支持 WindowInsetsCompat.getInsets()、getInsetsIgnoringVisibility 和 isVisible()API。</p></li><li><p>与 adjustResize 和 adjustPan 一起工作。</p></li><li><p>回传 WindowInsetsCompat.Builder APIs。</p></li><li><p>同时备份 WindowCompat.setDecorFitsSystemWindows()。</p></li></ul><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/uPic/H4cOzP.jpg" alt="H4cOzP"></p><h3 id="setWindowInsetsAnimationCallback"><a href="#setWindowInsetsAnimationCallback" class="headerlink" title="setWindowInsetsAnimationCallback"></a>setWindowInsetsAnimationCallback</h3><p>onPrepare -&gt; onStart-&gt; onProgress… -&gt; onEnd</p><p>弹出软键盘过程中 imeVisible 状态<br>onPrepare: false<br>onStart: true<br>onProgress: false -&gt; false -&gt; true… -&gt; true<br>onEnd: true</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">15</span>:16:46.726 D/SoftKeyboardWatcher: onPrepare: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>false, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:46.744 D/SoftKeyboardWatcher: onStart: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">962</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:46.747 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>false, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:46.760 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>false, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:46.764 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">14</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:46.779 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">79</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">15</span>:16:47.154 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">960</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:47.171 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">961</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:47.187 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">962</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:16:47.188 D/SoftKeyboardWatcher: onEnd: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">962</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>收起软键盘过程中 imeVisible 状态<br>onPrepare: true<br>onStart: false<br>onProgress: true -&gt; true… -&gt; false<br>onEnd: false</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">15</span>:19:39.994 D/SoftKeyboardWatcher: onPrepare: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">962</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.026 D/SoftKeyboardWatcher: onStart: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>false, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.028 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">962</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.045 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">962</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.060 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">947</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.077 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">882</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">15</span>:19:40.439 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.456 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>true, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.478 D/SoftKeyboardWatcher: onProgress: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>false, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">15</span>:19:40.479 D/SoftKeyboardWatcher: onEnd: <span class="token assign-left variable">imeVisible</span><span class="token operator">=</span>false, <span class="token assign-left variable">imeHeight</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">navigationBarsHeight</span><span class="token operator">=</span><span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误纠正"><a href="#错误纠正" class="headerlink" title="错误纠正"></a>错误纠正</h2><p><del>可以看出，EditText 随着键盘顶上去了，ImageView 随着键盘顶上去了。</del></p><p>（实际上以上布局仅仅是扩大了 ImageView 展示范围 - 表述有误，并不是单纯扩大范围，而是让 ImageView 和 EditText 占满父控件）</p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p><a href="https://juejin.cn/post/7064175843840360462"># Android 监听软键盘的高度并解决其覆盖输入框的问题</a><br><a href="https://juejin.im/post/5ef850c9f265da231019f6e4"># 这交互炸了系列： 仿微信键盘弹出体验</a><br><a href="https://mp.weixin.qq.com/s/6VJALLA1bAFSujkZkdSNVQ"># Android 软键盘的那些坑，原理篇来了！</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650835965&amp;idx=1&amp;sn=94d8776faa38a0c0f7a90e7951c11303"># Android 软键盘的那些坑，一招搞定！</a><br><a href="https://github.com/liangjingkanji/soft-input-event">liangjingkanji/soft-input-event</a><br><a href="https://github.com/android/user-interface-samples/tree/main/WindowInsetsAnimation">android/user-interface-samples/WindowInsetsAnimation</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WindowInsets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android WindowInsets 分析和最佳实践</title>
      <link href="/20220325/android-windowinsets/"/>
      <url>/20220325/android-windowinsets/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-Insets"><a href="#什么是-Insets" class="headerlink" title="什么是 Insets"></a>什么是 Insets</h2><p>屏幕上除了开发者 app 绘制的内容还有系统的 Insets（插入物），Insets 区域负责描述屏幕的哪些部分会与系统 UI 相交。如 <code>Starus bar</code> 或 <code>Navigation bar</code>：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/hGnYQS.jpg"></p><blockquote><p>常见的 Insets 有：</p><ul><li>  <code>STATUS_BAR</code>，用于展示系统时间，电量，wifi 等信息</li><li>  <code>NAVIGATION_BAR</code>，虚拟导航栏（区别于实体的三大金刚键），形态有三大金刚键导航，手势导航两种。（有些设备形态如 TV 没有导航栏）</li><li>  <code>IME</code>，软键盘，用于输入文字</li></ul></blockquote><p>其中 <code>STATUS_BAR</code> 与 <code>NAVIGATION_BAR</code> 又被称为 <code>System bar</code>。</p><p><strong>如果开发者绘制的内容出现在了系统 UI 区域内，就可能出现视觉与手势的冲突。开发者可以借助 Insets 把 view 从屏幕边缘向内移动到一个合适的位置。</strong></p><p>在源码中，Insets 对象拥有 4 个 int 值，用于描述矩形四个边的偏移：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/QAWAQc.jpg" alt="QAWAQc"></p><blockquote><p>📢 注意：不要把 Insets 的 <code>top</code> ，<code>bottom</code>，<code>left</code>，<code>right</code> 与 Rect 的搞混，前者描述的是<strong>偏移</strong>，后者是<strong>坐标</strong>。</p></blockquote><p>关于 Insets 更详尽的信息，可以 <a href="https://juejin.cn/post/6844904006343458830" title="https://juejin.cn/post/6844904006343458830">查看这篇文章</a>。</p><h2 id="setSystemUiVisibility-与-WTFs"><a href="#setSystemUiVisibility-与-WTFs" class="headerlink" title="setSystemUiVisibility 与 WTFs"></a>setSystemUiVisibility 与 WTFs</h2><p>View 的源码中有一个 <code>setSystemUiVisibility()</code> 的方法，虽然<strong>该方法在 Android 11 已被弃用</strong>，但按照本专栏的一贯风格，我们还是要来介绍一下该方法。</p><p>有些场景开发者可能希望 app 的内容可以绘制到状态栏或导航栏的区域以提供更好的用户体验，因此系统提供了 <code>setSystemUiVisibility</code> 方法，开发者可以通过向该方法传入不同的 flag 以应对不同的使用场景。</p><p>这些 flag 被称为 <code>Window Transform Flags</code>，简称 WTFs（滑稽脸😏），同样的，它们在 Android 11 中被弃用。常用的 flag 如下：</p><pre class="line-numbers language-none"><code class="language-none">SYSTEM_UI_FLAG_VISIBLESYSTEM_UI_FLAG_LOW_PROFILESYSTEM_UI_FLAG_HIDEN_NAVIGATIONSYSTEM_UI_FLAG_FULLSCREENSYSTEM_UI_FLAG_IMMERSIVE_STICKYSYSTEM_UI_FLAG_IMMERSIVESYSTEM_UI_FLAG_LIGHT_STATUS_BARSYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARSYSTEM_UI_FLAG_LAYOUT_STABLESYSTEM_UI_FLAG_LAYOUT_HIDEN_NAVIGATIONSYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想了解这些 flag 的效果可以参考 <a href="https://blog.csdn.net/QQxiaoqiang1573/article/details/79867127"># Android setSystemUiVisibility详解</a>。</p><h2 id="System-bar-能力变化史"><a href="#System-bar-能力变化史" class="headerlink" title="System bar 能力变化史"></a>System bar 能力变化史</h2><h3 id="Android-4-4-之前"><a href="#Android-4-4-之前" class="headerlink" title="Android 4.4 之前"></a>Android 4.4 之前</h3><p>用户内容显示在 <code>System bar</code> 之间，即下图红框所在区域：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2cq336.jpg" alt="2cq336"></p><p>开发者可以使用 <code>setSystemUiVisibility</code> 方法将内容绘制到状态栏后面，下图红框区域：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/voT6SW.jpg" alt="voT6SW"></p><h3 id="Android-4-4"><a href="#Android-4-4" class="headerlink" title="Android 4.4"></a>Android 4.4</h3><p>Android 4.4 引入了 <code>android:windowTranslucentStatus</code> 和 <code>android:windowTranslucentNavigation</code> ，允许开发者将 <code>System bar</code> 设置成透明：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/65mvhq.jpg" alt="65mvhq"></p><blockquote><p><code>System bar</code> background 是由 WindowManager 绘制的（利用 Window 的 flag）</p></blockquote><h3 id="Android-5-0"><a href="#Android-5-0" class="headerlink" title="Android 5.0"></a>Android 5.0</h3><p>之前版本 <code>System bar</code> 都是由 WindowManager 绘制的，在 Android 5.0，引入了 <code>android:windowDrawsSystemBarBackgrounds</code>，当 <code>windowDrawsSystemBarBackgrounds</code> 为 true（默认值） 时，<code>System bar</code> 的 background 在 Window 内部。如下图：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/7tQy0G.jpg" alt="7tQy0G"></p><p>开发者可以调用 Window 的方法为 <code>System bar</code> 设置颜色：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/vFsSjI.jpg" alt="vFsSjI"><br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/tpnKKz.jpg" alt="tpnKKz"></p><blockquote><p>📢<strong>注意</strong>：<code>windowTranslucentStatus</code> 和 <code>windowTranslucentNavigation</code> <strong>要比为 <code>System bar</code> 设置自定义颜色的优先级更高</strong>。</p><p>当 <code>windowTranslucentStatus</code> 或 <code>windowTranslucentNavigation</code> 设置为 true 后会导致 <code>windowDrawsSystemBarBackgrounds</code> 为 <strong>false</strong>，<code>System bar</code> background 由 WindowManager 接管。</p></blockquote><p>自 Android 5.0 后，当 <code>windowDrawsSystemBarBackgrounds</code> 为 true 时，<code>System bar</code> 作为 window 的一部分。换言之，DecorView（FrameLayout 子类）有<strong>三个</strong>子 View：显示 App 内容的 LinearLayout 以及 <code>Status bar</code> 和 <code>Navigation bar</code>。</p><p>默认情况下，App 的内容显示在 <code>System bar</code> 中间。</p><p>理论上，显示 App 内容的 LinearLayout 应该充满屏幕，<strong>系统使用了 paddingTop 和 marginBottom 为 <code>System bar</code> 预留出了空间</strong>。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/1WZMbK.jpg" alt="1WZMbK"></p><p>那么 App 的内容区域是如何绘制到 <code>System bar</code> 后面的？很简单，<strong>LinearLayout 没有 padding 和 margin（我们在后文介绍原理）</strong>，充满屏幕：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/0zX8PF.jpg" alt="0zX8PF"></p><h3 id="Android-10"><a href="#Android-10" class="headerlink" title="Android 10"></a>Android 10</h3><p>随着全面屏设备的普及，越来越多的 Android 设备突破了 16:9 的限制，Android 10 推出了新的导航模式：手势导航。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/551e6750903b4e309fdd9c1558fc3322~tplv-k3u1fbpfcp-watermark.awebp"></p><p>新的手势导航与原来的三大金刚键的 <code>Navigation bar</code> 一样，只不过高度变小了。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/HpzE2F.jpg" alt="HpzE2F"></p><p>如果 <code>Navigation bar</code> 是透明的，底部的「小白条」是可以跟随背景动态改变颜色的（与 iOS 一样，不知道谁抄的谁🤣）<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c883a2db5a174d29888773b53506318d~tplv-k3u1fbpfcp-watermark.awebp"></p><h3 id="Android-11"><a href="#Android-11" class="headerlink" title="Android 11"></a>Android 11</h3><p>Android 11 引入了 <code>WindowInsetsAnimation</code> 允许监听 Insets 的变化进度，使用户体验更加丝滑。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/541f8f3b1c1f486d9015214ff9bc53c7~tplv-k3u1fbpfcp-watermark.awebp"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>为了方便开发者更合理地使用设备屏幕绘制内容，Android 在历代版本不断迭代 <code>System bar</code> 控制的 API，功能越来越完善。</p><p>当开发者将 App 内容绘制到 <code>System bar</code> 后面时要考虑视觉冲突和手势冲突。</p><p>为了防止 App 内容区域与 <code>System bar</code> 发生视觉冲突，官方提供了两种 API， <code>WidowInsets</code> 与 <code>fitsSystemWindows</code> 。</p><h2 id="WindowInsets"><a href="#WindowInsets" class="headerlink" title="WindowInsets"></a>WindowInsets</h2><p><code>WindowInsets</code> 描述了一组 Window Content 的 Insets，未来可能会继续添加新的 Insets 类型。目前已有的 Insets 类型有：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">androidx<span class="token punctuation">.</span>core<span class="token punctuation">.</span>view</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowInsetsCompat</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">FIRST</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATUS_BARS</span> <span class="token operator">=</span> <span class="token constant">FIRST</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NAVIGATION_BARS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CAPTION_BAR</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">IME</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SYSTEM_GESTURES</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MANDATORY_SYSTEM_GESTURES</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TAPPABLE_ELEMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DISPLAY_CUTOUT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">LAST</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIZE</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WINDOW_DECOR</span> <span class="token operator">=</span> <span class="token constant">LAST</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用位运算管理状态是很常见并高效的方式，如果对这部分内容不了解，可以移步 <a href="https://juejin.cn/user/1081575170900958/posts">KunMinX</a> 的 <a href="https://juejin.cn/post/6844903879155384333">这篇文章 就算不去火星种土豆，也请务必掌握的 Android 状态管理最佳实践！</a> 入门</p><p><code>System bar</code> 包括 <code>Status bar</code>，<code>Navigation bar</code>，<code>Caption bar</code>，但<strong>不包括软键盘</strong>（<code>ime</code>）<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/WymOx4.jpg" alt="WymOx4"></p><h3 id="onApplyWindowInsets-与-setOnApplyWindowInsetsListener"><a href="#onApplyWindowInsets-与-setOnApplyWindowInsetsListener" class="headerlink" title="onApplyWindowInsets 与 setOnApplyWindowInsetsListener"></a>onApplyWindowInsets 与 setOnApplyWindowInsetsListener</h3><p>开发者可以通过在自定义 View 中重写 <code>onApplyWindowInsets()</code> 方法或调用 <code>setOnApplyWindowInsetsListener()</code> 来监听 <code>WindowInsets</code> 的变化，通过对 View 添加 <code>margin</code> 或 <code>padding</code> 的方式处理解决冲突。</p><p>这两个方法是互斥的，当存在 <code>OnApplyWindowInsetsListener</code> 时不会执行 <code>onApplyWindowInsets</code>：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/ZrAubd.jpg" alt="ZrAubd"></p><blockquote><p>开发者可以在也可 <code>OnApplyWindowInsetsListener</code> 手动调用 <code>onApplyWindowInsets</code> 使两个方法同时被执行。</p></blockquote><h3 id="WindowInsets-分发"><a href="#WindowInsets-分发" class="headerlink" title="WindowInsets 分发"></a>WindowInsets 分发</h3><p>前文我们提到，如果开发者绘制的内容出现在了系统 UI 区域内，就可能出现视觉与手势的冲突。开发者可以借助 Insets 把 view 从屏幕边缘向内移动到一个合适的位置，此时 <code>View#onApplyWindowInsets()</code> 会被调用。那么这些 Insets 是如何分发给 View 的呢？</p><p>笔者在 <a href="https://juejin.cn/post/6911176251495579655" title="https://juejin.cn/post/6911176251495579655">View 事件分发机制，大型职场 PUA 现场</a> 一文中把 Android 的视图树抽象为 <strong>N 叉树</strong>。</p><p>与 View 的事件分发一样，<code>WindowInsets</code> 的分发也是 N 叉树的遍历过程：</p><p>从 N 叉树的根节点（DecoView）开始，按照 <strong>深度优先</strong> 的方式分发给 子 view。</p><p>Android 10 和 Android 11 两个版本官方连续修改了 <code>ViewGroup#dispatchApplyWindowInsets()</code> 的逻辑（具体我们在源码解析篇介绍）。</p><p>如果 app <code>targetSdkVersion &lt; 30</code> ，如果某个节点消费了 Insets，<strong>所有没遍历到的节点都不会</strong>收到 <code>WindowInsets</code> 的分发；</p><p>当 app 运行在 Android 11 以上版本的设备上且 <code>targetSdkVersion &gt;= 30</code>，如果某个节点消费了 Insets，<strong>该节点的所有子节点不会</strong>收到 <code>WindowInsets</code> 分发。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/LfaBdL.jpg" alt="LfaBdL"></p><p>旧版本的分发有一个问题，无法做到两个同级的 View 同时消费 <code>WindowInsets</code>，如下图：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/P8ykcX.jpg" alt="P8ykcX"></p><blockquote><p>我们可以将 Level2-1 和 Level2-2 看成顶部导航和底部导航，按照旧逻辑，当 Level2-1 消费了 <code>WindowInsets</code>，另一个 View 便没机会了。</p></blockquote><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>  由于开发者可以将 App 内容绘制到与系统 UI 相交的位置，因此官方为开发者提供了解决视觉冲突的方式，<code>WindowInsets</code></li><li>  开发者可以重写 <code>View#onApplyWindowInsets</code> 或 <code>View#setOnApplyWindowInsetsListener</code> 来根据 WindowInsets 对系统 UI 进行位置避让（对 view 设置 padding 或 margin）。</li><li>  下一节介绍的 <code>fitsSystemWindows</code> 的默认行为也是通过 <code>onApplyWindowInsets</code> 实现的。</li></ul><h1 id="fitsSystemWindows"><a href="#fitsSystemWindows" class="headerlink" title="fitsSystemWindows"></a>fitsSystemWindows</h1><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/b98jig.jpg" alt="b98jig"></p><p><code>setFitsSystemWindows</code> 是 View 中 API 14 后加入的方法，对应的 xml 属性是 <code>android:fitsSystemWindows</code></p><p><strong><code>fitsSystemWindows</code> 的默认行为是：通过 padding 为 <code>System bar</code> 预留出空间</strong>。如前文提到的 DecorView 的 LinearLayout，它的 <code>paddingTop</code> 就是 <code>fitsSystemWindows = true</code> 影响的。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/RspJPI.jpg" alt="RspJPI"></p><blockquote><p>默认情况下 DecorView 的子 view 是 inflate <code>screen_simple.xml</code> 得到的。</p></blockquote><p>那么这个 padding 是如何设置的？</p><p><code>View#onApplyWindowInsets()</code> 中会判断 <code>fitsSystemWindows</code> 最终调用到 <code>internalSetPadding()</code> 方法：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/wC8itg.jpg" alt="wC8itg"></p><blockquote><p>📢 注意：<strong>这会使开发者在 xml 中定义的 padding 失效</strong>。</p></blockquote><p><code>fitsSystemWindows</code> 这个 API 另很多开发者迷惑，一个重要原因是很多时候 <code>fitsSystemWindows</code> 并不是使用的默认行为，如 <code>DrawerLayout</code> 和 <code>CoordinatorLayout</code>。</p><h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p>DrawerLayout <code>fitsSystemWindow = true</code> 时：</p><ul><li>  API &gt; 21 时设置 <code>setSystemUiVisibility(SYSTEM_UI_FLAG_LAYOUT_STABLE | SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN)</code></li><li>  <code>onMeasure()</code> 时调用子 view <code>dispatchApplyWindowInsets()</code>（正常父 View 消费 <code>WindowInsets</code> 后子 View 接收不到分发）</li><li>  <code>onDraw()</code> 时调用 <code>setStatusBackground(?android:colorPrimaryDark)</code></li></ul><h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p>CoordinatorLayout <code>fitsSystemWindow = true</code> 时：</p><ul><li>  API &gt; 21 时设置 <code>setSystemUiVisibility(SYSTEM_UI_FLAG_LAYOUT_STABLE | SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN)</code></li><li>  根据需要 <code>setStatusBackground</code></li><li>  允许设置 behavior 的子 View 拦截并响应 <code>WindowInsets</code> 的变化</li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>关于 <code>fitsSystemWindows</code>，你必须知道以下几点：</p><ul><li><code>fitsSystemWindows</code> 是深度优先（我们可以将视图树看成一个 N叉树）的，第一个设置 <code>fitsSystemWindows</code> 的 view 会去消费 insets 并影响视觉；</li><li>padding 在 view layout 之前就已经设置了，因此<strong>不要</strong>误认为设置padding 时了解 view 所在的位置</li><li>开发者在 xml 或 view 初始化设置的 padding 会被<strong>覆盖</strong></li><li>  <a href="https://link.juejin.cn/?target=https://developer.android.com/reference/com/google/android/material/appbar/AppBarLayout.html" title="https://developer.android.com/reference/com/google/android/material/appbar/AppBarLayout.html">AppBarLayout</a>，<a href="https://link.juejin.cn/?target=https://developer.android.com/reference/androidx/coordinatorlayout/widget/CoordinatorLayout.html" title="https://developer.android.com/reference/androidx/coordinatorlayout/widget/CoordinatorLayout.html">CoordinatorLayout</a>，<a href="https://link.juejin.cn/?target=https://developer.android.com/reference/androidx/drawerlayout/widget/DrawerLayout.html" title="https://developer.android.com/reference/androidx/drawerlayout/widget/DrawerLayout.html">DrawerLayout</a> 等 view 会自定义 <code>fitsSystemWindows</code> 的行为</li></ul><h2 id="处理-WindowInsets-的最佳实践"><a href="#处理-WindowInsets-的最佳实践" class="headerlink" title="处理 WindowInsets 的最佳实践"></a>处理 WindowInsets 的最佳实践</h2><h3 id="使用-Jetpack-提供的-Compat-API"><a href="#使用-Jetpack-提供的-Compat-API" class="headerlink" title="使用 Jetpack 提供的 Compat API"></a>使用 Jetpack 提供的 Compat API</h3><p>Android Jetpack 组件库中的 <a href="https://link.juejin.cn/?target=https://developer.android.com/jetpack/androidx/releases/core" title="https://developer.android.com/jetpack/androidx/releases/core">androidx.core</a> 提供了大量兼容旧版本的 Compat API，如 <code>ViewCompat</code>，<code>WindowInsetsCompat</code>，<code>WindowInsetsControllerCompat</code> 等等。</p><p>下图是 <code>ViewCompat#getWindowInsetsController</code> 方法，用于获取 <code>WindowInsetsController</code>，同时兼容低版本：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/HyNTRE.jpg" alt="HyNTRE"></p><h3 id="获取WindowInsets"><a href="#获取WindowInsets" class="headerlink" title="获取WindowInsets"></a>获取WindowInsets</h3><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/Baeg38.jpg" alt="Baeg38"></p><p>使用 <code>ViewCompat.getRootWindowInsets(view)</code> 获取 <code>WindowInsets</code>。请注意：</p><ul><li>该方法返回分发给视图树的<strong>原始</strong> insets</li><li>insets 只有在 view attached 才是可用的</li><li>  API 20 及以下 <strong>永远</strong> 返回 false</li></ul><h3 id="获取-System-bar-和-软键盘的高度"><a href="#获取-System-bar-和-软键盘的高度" class="headerlink" title="获取 System bar 和 软键盘的高度"></a>获取 System bar 和 软键盘的高度</h3><h4 id="❌-错误用法"><a href="#❌-错误用法" class="headerlink" title="❌ 错误用法"></a>❌ 错误用法</h4><h4 id="🙅🏻‍♀️不要固定-status-bar-的高度"><a href="#🙅🏻‍♀️不要固定-status-bar-的高度" class="headerlink" title="🙅🏻‍♀️不要固定 status bar 的高度"></a>🙅🏻‍♀️不要固定 status bar 的高度</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">res/values<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dimen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status_bar_size<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>25dp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dimen</span><span class="token punctuation">&gt;</span></span>res/values-v23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dimen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status_bar_size<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>24dp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dimen</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同 Android 版本 <code>status bar</code> 的高度是不同的！不同设备也可能定制自己的高度。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/cuO06T.jpg" alt="cuO06T"></p><h4 id="🙅🏻‍♀️读取系统内部资源"><a href="#🙅🏻‍♀️读取系统内部资源" class="headerlink" title="🙅🏻‍♀️读取系统内部资源"></a>🙅🏻‍♀️读取系统内部资源</h4><p>framework 的 <code>dimens.xml</code> 存储了一些列系统内部资源。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/oMnMPK.jpg" alt="oMnMPK"></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> resourceId <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"status_bar_height"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"dimen"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"android"</span></span><span class="token punctuation">)</span><span class="token keyword">return</span> resources<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果系统内部资源名称变化怎么办？</p><p><strong>「野路子」代码可能有效，但不健壮。</strong></p><h4 id="✅-正确用法"><a href="#✅-正确用法" class="headerlink" title="✅ 正确用法"></a>✅ 正确用法</h4><ol><li> 获取 <code>WindowInsets</code></li><li> 通过 <code>WindowInsets#getInsets(type)</code> 获取 Insets</li><li> 通过 Insets.top 或 Insets.bottom 获取 <code>System bar</code> 高度</li></ol><p>为了兼容旧版本，我们使用 Compat API：</p><ol><li> <code>val windowInsetsCompat = ViewCompat.getRootWindowInsets(view)</code> 获取 WindowInsets</li><li> <code>val insets = windowInsetsCompat?.getInsets(WindowInsetsCompat.Type.statusBars())</code> 获取 Insets</li><li> <code>insets?.top</code> 或 <code>insets?.bottom</code> 获取 <code>System bar</code> 高度</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">ViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>decorView<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getInsets</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>topViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>decorView<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getInsets</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>bottom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当 <code>System bar</code> 隐藏时 getInsets() 获取的高度为 0，如果想在隐藏状态时也能获取高度，可以使用 <code>getInsetsIgnoringVisibility()</code> 方法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">ViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>decorView<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getInsetsIgnoringVisibility</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>topViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>decorView<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getInsetsIgnoringVisibility</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>bottom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e25896e1c9984e8186f5c7a24bec910c~tplv-k3u1fbpfcp-watermark.awebp"></p><h3 id="WindowInsetsController"><a href="#WindowInsetsController" class="headerlink" title="WindowInsetsController"></a>WindowInsetsController</h3><p>Android 30 引入了 <code>WindowInsetsController</code> 来控制 <code>WindowInsets</code>，主要功能包括：</p><ul><li>  显示/隐藏 <code>System bar</code></li><li>  设置 <code>System bar</code> 前景（如状态栏的文字图标）是亮色还是暗色</li><li>  逐帧控制 insets 动画，例如可以让软键盘弹出得更丝滑</li></ul><h4 id="显示隐藏-System-bar"><a href="#显示隐藏-System-bar" class="headerlink" title="显示隐藏 System bar"></a>显示隐藏 System bar</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 状态栏是否可见</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token boolean">true</span><span class="token comment">// 显示状态栏</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 隐藏状态栏</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">statusBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 导航栏是否可见</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">navigationBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token boolean">true</span><span class="token comment">// 显示导航栏</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">navigationBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 隐藏导航栏</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">navigationBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 软键盘是否可见</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getRootWindowInsets</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">ime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token boolean">false</span><span class="token comment">// 显示软键盘</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">ime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 隐藏软键盘</span>ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">ime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdbb9ed084fa4b29a36730da2bec9f12~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="设置-System-bar-前景亮色-暗色"><a href="#设置-System-bar-前景亮色-暗色" class="headerlink" title="设置 System bar 前景亮色/暗色"></a>设置 System bar 前景亮色/暗色</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">ViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>isAppearanceLightStatusBars <span class="token operator">=</span> isLightViewCompat<span class="token punctuation">.</span><span class="token function">getWindowInsetsController</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>isAppearanceLightNavigationBars <span class="token operator">=</span> isLight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="适配-edge-to-edge"><a href="#适配-edge-to-edge" class="headerlink" title="适配 edge-to-edge"></a>适配 edge-to-edge</h2><p>何为 edge-to-edge？如下图，即应用内容的绘制范围从顶部状态栏下方开始，延伸至底部导航栏上方：<br><img src="https://developer.android.com/images/guide/navigation/e2e-intro.gif"></p><p>关于 edge-to-edge 的适配，<a href="https://link.juejin.cn/?target=https://developer.android.com/training/gestures/edge-to-edge" title="https://developer.android.com/training/gestures/edge-to-edge">官方文档</a> 写得很完整，主要分三步：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 1. 使内容区域全屏</span>WindowCompat<span class="token punctuation">.</span><span class="token function">setDecorFitsSystemWindows</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">// 2. 设置 System bar 透明</span>window<span class="token punctuation">.</span>statusBarColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>TRANSPARENTwindow<span class="token punctuation">.</span>navigationBarColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>TRANSPARENT<span class="token comment">// 3. 可能出现视觉冲突的 view 处理 insets</span>ViewCompat<span class="token punctuation">.</span><span class="token function">setOnApplyWindowInsetsListener</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span> view<span class="token punctuation">,</span> windowInsets <span class="token operator">-&gt;</span>  <span class="token keyword">val</span> insets <span class="token operator">=</span> windowInsets<span class="token punctuation">.</span><span class="token function">getInsets</span><span class="token punctuation">(</span>WindowInsetsCompat<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token function">systemBars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 此处更改的 margin，也可设置 padding，视情况而定</span>  view<span class="token punctuation">.</span>updateLayoutParams<span class="token operator">&lt;</span>MarginLayoutParams<span class="token operator">&gt;</span> <span class="token punctuation">{</span>      topMargin <span class="token operator">=</span> insets<span class="token punctuation">.</span>top      leftMargin <span class="token operator">=</span> insets<span class="token punctuation">.</span>left      bottomMargin <span class="token operator">=</span> insets<span class="token punctuation">.</span>bottom      rightMargin <span class="token operator">=</span> insets<span class="token punctuation">.</span>right  <span class="token punctuation">}</span>  WindowInsetsCompat<span class="token punctuation">.</span>CONSUMED<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<strong>处理 insets 时要保证计算操作有幂等性</strong>，即多次进行该计算所得到的结果应该相同，否则 margin/padding 会越来越大！</p><p>处理 insets 也可以通过 重写 <code>View#onApplyWindowInsets</code> 来操作。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>  随着 Android 的不断迭代，开发者可以更充分地利用屏幕空间，能够将内容绘制在系统 UI 后面；</li><li>  Android 使用 Insets 来描述系统 UI 与屏幕相交的区域，开发者可以使用 <code>fitsSystemWindows</code> 和 <code>WindowInsets</code> 来处理视觉和手势冲突；</li><li>  <code>WindowInsets</code> 的分发根据 <code>targetSDKVersion</code> 的不同而略有差别；</li><li>  <code>fitsSystemWindows</code> 的默认行为是：通过 padding 为 <code>System bar</code> 预留出空间，本质也是利用 WindowInsets 处理视觉冲突；</li><li>  一些自定义 view 如 DrawerLayout 会更改 <code>fitsSystemWindows</code> 的默认行为；</li><li>  处理 <code>WindowInsets</code> 可以使用 Jetpack <code>androidx.core</code> 提供的一些列 Compat 类；</li><li>  牢记获取 <code>Status bar</code> 高度的正确姿势，并避免错误用法；</li><li>  适配 edge-to-edge 以给用户更好的使用体验</li></ul><h1 id="推荐阅读和参考资源"><a href="#推荐阅读和参考资源" class="headerlink" title="推荐阅读和参考资源"></a>推荐阅读和参考资源</h1><ul><li>  <a href="https://juejin.cn/post/6844904001721335815" title="https://juejin.cn/post/6844904001721335815">开启全面屏体验 | 手势导航 (一)</a></li><li>  <a href="https://juejin.cn/post/6844904006343458830" title="https://juejin.cn/post/6844904006343458830">处理视觉冲突 | 手势导航 (二)</a></li><li>  <a href="https://juejin.cn/post/6844904021367472142" title="https://juejin.cn/post/6844904021367472142">如何处理手势冲突 | 手势导航连载 (三)</a></li><li>  <a href="https://juejin.cn/post/6844904034281717768" title="https://juejin.cn/post/6844904034281717768">沉浸模式 | 手势导航连载 (四)</a></li><li>  <a href="https://link.juejin.cn/?target=https://medium.com/androiddevelopers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec" title="https://medium.com/androiddevelopers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec">Why would I want to fitsSystemWindows?</a></li><li>  <a href="https://link.juejin.cn/?target=https://medium.com/androiddevelopers/windowinsets-listeners-to-layouts-8f9ccc8fa4d1" title="https://medium.com/androiddevelopers/windowinsets-listeners-to-layouts-8f9ccc8fa4d1">WindowInsets — listeners to layouts</a></li><li>  <a href="https://link.juejin.cn/?target=https://www.bilibili.com/video/BV11U4y1T7D1" title="https://www.bilibili.com/video/BV11U4y1T7D1">Becoming a master window fitter🔧</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://juejin.cn/post/7038422081528135687">Android Detail：Window 篇—— WindowInsets 与 fitsSystemWindow</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WindowInsets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 逆向之 Smali 语法</title>
      <link href="/20210809/android-smali-grammary/"/>
      <url>/20210809/android-smali-grammary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="APK"><a href="#APK" class="headerlink" title="APK"></a>APK</h3><p>APK其实就是一个ZIP压缩包，将APK后缀改成ZIP后就可以解压出APK内部文件。</p><h3 id="Dalvik字节码"><a href="#Dalvik字节码" class="headerlink" title="Dalvik字节码"></a>Dalvik字节码</h3><p>Dalvik是google专门为Android操作系统设计的一个虚拟机，经过深度的优化。虽然Android上的程序是使用java来开发的，但是Dalvik和标准的java虚拟机JVM还是两回事。Dalvik VM是<code>基于寄存器</code>的，而JVM是<code>基于栈</code>的；Dalvik有专属的文件执行格式<code>dex(dalvik executable)</code>，而JVM则执行的是<code>java字节码</code>。Dalvik VM比JVM<code>速度更快</code>，<code>占用空间更少</code>。</p><h2 id="如何逆向"><a href="#如何逆向" class="headerlink" title="如何逆向"></a>如何逆向</h2><h3 id="反编译为Smali工程"><a href="#反编译为Smali工程" class="headerlink" title="反编译为Smali工程"></a>反编译为Smali工程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:30:45]</span>$ <span class="token builtin class-name">pwd</span>/Users/weicools/Downloads/AndroidReverse<span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:30:47]</span>$ <span class="token function">ls</span>abc.apk<span class="token comment"># 1. apktool反编译apk</span><span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:30:54]</span>$ apktool d --only-main-classe abc.apk<span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:30:47]</span>$ <span class="token function">ls</span>abc    abc.apk<span class="token comment"># 2. 重新打包Apk</span><span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:31:02] C:130</span>$ apktool b abc<span class="token comment"># 3. 签名Apk</span><span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:31:13] C:130</span>$ jarsigner <span class="token parameter variable">-verbose</span> <span class="token parameter variable">-keystore</span> custom.keystore <span class="token parameter variable">-signedjar</span> abc_signed.apk /abc/dist/abc.apk custom<span class="token comment"># weicools in ~/Downloads/AndroidReverse [14:31:20] C:130</span>$ <span class="token builtin class-name">cd</span> filemagic<span class="token comment"># 4. 查看反编译生成的工程目录</span><span class="token comment"># weicools in ~/Downloads/AndroidReverse/filemagic on git:master o [14:31:33]</span>$ <span class="token function">ls</span>AndroidManifest.xml res                 smali_classes4smali               smali_classes5apktool.yml         lib                 smali_classes2      assets              smali_classes3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p>使用 <code>jadx-gui</code> 打开对呀Apk即可，加固的Apk需要先脱壳 才能查看源码</p><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>代码可以通过 <code>jadx-gui</code> 查看，但是这个工具查代码并不方便，所以还是推荐在 <code>jadx-gui</code> 中<code>开启反混淆</code>并把源码<code>保存为Gradle工程</code>，然后使用Android Studio查看，。</p><ol><li>首先看这个类有没有<code>静态方法</code>和<code>静态代码块</code>，因为这类代码会在对象初始化前运行，可能在这里<code>加载so文件</code>，或者是<code>加密校验</code>等操作。</li><li>再看看这个类的<code>构造方法</code>。</li><li>最后看<code>生命周期方法</code>。</li></ol><h2 id="Smali语法"><a href="#Smali语法" class="headerlink" title="Smali语法"></a>Smali语法</h2><p>smali就是Dalvik VM内部执行的核心代码，它有自己的一套语法。要了解 smali 语法规范，可以先从了解 Dalvik 虚拟机字节码的指令格式开始。3.1 Dalvik 虚拟机字节码指令格式在 Android 4.0 源码 Dalvik/docs 目录下提供了一份文档 instruction-formats.html，里面详细列举了 Dalvik 虚拟机字节码指令的所有格式。</p><h3 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h3><table><thead><tr><th align="left">指令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">.field private isFlag:z</td><td align="left">定义变量</td></tr><tr><td align="left">.method</td><td align="left">方法</td></tr><tr><td align="left">.parameter</td><td align="left">方法参数</td></tr><tr><td align="left">.prologue</td><td align="left">方法开始</td></tr><tr><td align="left">.line 12</td><td align="left">此方法位于12行</td></tr><tr><td align="left">invoke-super</td><td align="left">调用父类方法</td></tr><tr><td align="left">const/high16 v0,0x7fo3</td><td align="left">把0x7fo3赋值给v0</td></tr><tr><td align="left">invoke-direct</td><td align="left">调用函数</td></tr><tr><td align="left">return-void</td><td align="left">函数返回void</td></tr><tr><td align="left">.end method</td><td align="left">函数结束</td></tr><tr><td align="left">new-instance</td><td align="left">创建实例</td></tr><tr><td align="left">input-object</td><td align="left">对象赋值</td></tr><tr><td align="left">iget-object</td><td align="left">调用对象</td></tr><tr><td align="left">Invoke-static</td><td align="left">调用静态函数</td></tr></tbody></table><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th align="left">符号</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">B</td><td align="left">byte</td></tr><tr><td align="left">C</td><td align="left">char</td></tr><tr><td align="left">D</td><td align="left">double</td></tr><tr><td align="left">F</td><td align="left">float</td></tr><tr><td align="left">I</td><td align="left">int</td></tr><tr><td align="left">J</td><td align="left">long</td></tr><tr><td align="left">S</td><td align="left">short</td></tr><tr><td align="left">V</td><td align="left">void-只用于返回值类型</td></tr><tr><td align="left">Z</td><td align="left">boolean</td></tr><tr><td align="left">[XXX</td><td align="left">Array</td></tr><tr><td align="left">Lxxx/yyy</td><td align="left">Object</td></tr></tbody></table><blockquote><p>数组：</p><p>在基本类型前加上前中括号“[”，例如int数组和float数组分别表示为：[I、[F</p><p>对象：</p><p>以L作为开头，格式是<code>LpackageName/objectName;</code></p><p>String对象在smali中为：<code>Ljava/lang/String;</code></p><p>类里面的内部类：<code>LpackageName/objectName$subObjectName;</code></p></blockquote><h3 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h3><p>函数公式为：</p><pre class="line-numbers language-none"><code class="language-none">FuncName (ParamType1ParamType2ParamType3...)ReturnType<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数之间没有间隔。举例：</p><pre class="line-numbers language-none"><code class="language-none">foo ()V --&gt; void foo()foo (III)Z --&gt; boolean foo(int, int, int)foo (Z[I[ILjava/lang/String;J)Ljava/lang/String; --&gt; String foo(boolean, int[], int[], String, long)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件分析-TODO"><a href="#文件分析-TODO" class="headerlink" title="文件分析 - TODO"></a>文件分析 - TODO</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token keyword">public</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token keyword">super</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>common<span class="token operator">/</span><span class="token class-name">BaseActivity</span><span class="token punctuation">;</span><span class="token punctuation">.</span>source <span class="token string">"WMWActivity.java"</span># interfaces<span class="token punctuation">.</span><span class="token keyword">implements</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>burstly<span class="token operator">/</span>lib<span class="token operator">/</span>ui<span class="token operator">/</span><span class="token class-name">IBurstlyAdListener</span><span class="token punctuation">;</span># annotations<span class="token punctuation">.</span>annotation system <span class="token class-name">Ldalvik</span><span class="token operator">/</span>annotation<span class="token operator">/</span><span class="token class-name">MemberClasses</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span>$<span class="token class-name">MessageHandler</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span>$<span class="token class-name">FinishActivityArgs</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span>end annotation# <span class="token keyword">static</span> fields<span class="token punctuation">.</span>field <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token constant">PREFS_INSTALLATION_ID</span><span class="token operator">:</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token string">"installationId"</span><span class="token comment">//...</span># instance fields<span class="token punctuation">.</span>field <span class="token keyword">private</span> _activityPackageName<span class="token operator">:</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token comment">//...</span># direct methods<span class="token punctuation">.</span>method <span class="token keyword">static</span> constructor <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">3</span>    <span class="token punctuation">.</span>prologue    <span class="token comment">//...</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method<span class="token punctuation">.</span>method <span class="token keyword">public</span> constructor <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">3</span>    <span class="token punctuation">.</span>prologue    <span class="token comment">//...</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method<span class="token punctuation">.</span>method <span class="token keyword">static</span> synthetic access$<span class="token function">100</span><span class="token punctuation">(</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">0</span>    <span class="token punctuation">.</span>parameter <span class="token string">"x0"</span>    <span class="token punctuation">.</span>prologue    <span class="token punctuation">.</span>line <span class="token number">37</span>    invoke<span class="token operator">-</span>direct <span class="token punctuation">{</span>p0<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">initIap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method<span class="token punctuation">.</span>method <span class="token keyword">static</span> synthetic access$<span class="token function">200</span><span class="token punctuation">(</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>common<span class="token operator">/</span><span class="token class-name">WMWView</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>locals <span class="token number">1</span>    <span class="token punctuation">.</span>parameter <span class="token string">"x0"</span>    <span class="token punctuation">.</span>prologue    <span class="token punctuation">.</span>line <span class="token number">37</span>    iget<span class="token operator">-</span>object v0<span class="token punctuation">,</span> p0<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span>_view<span class="token operator">:</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>common<span class="token operator">/</span><span class="token class-name">WMWView</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token operator">-</span>object v0<span class="token punctuation">.</span>end method<span class="token comment">//...</span>#virtual methods<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">4</span>    <span class="token punctuation">.</span>prologue    <span class="token comment">//...</span>    <span class="token keyword">goto</span> <span class="token operator">:</span>goto_0<span class="token punctuation">.</span>end method<span class="token punctuation">.</span>method <span class="token keyword">public</span> <span class="token function">didScreenCaptured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">6</span>    <span class="token punctuation">.</span>prologue    <span class="token comment">//...</span>    <span class="token keyword">goto</span> <span class="token operator">:</span>goto_0<span class="token punctuation">.</span>end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="smali寄存器"><a href="#smali寄存器" class="headerlink" title="smali寄存器"></a>smali寄存器</h4><p>Dalvik VM与JVM的最大的区别之一就是Dalvik VM是<code>基于寄存器</code>的。基于寄存器是什么意思呢？也就是说，在smali里的所有操作都必须经过寄存器来进行：</p><p><code>本地寄存器</code>用<code>v开头数字结尾</code>的符号来表示，如v0、v1、v2、…</p><p><code>参数寄存器</code>用<code>p开头数字结尾</code>的符号来表示，如p0、p1、p2、…</p><p>特别注意的是，p0不一定是函数中的第一个参数：</p><ul><li>在<code>非static函数</code>中，p0代指<code>this</code>，p1表示函数的第一个参数，p2代表函数中的第二个参数…</li><li>在<code>static函数</code>中p0才对应第一个参数（因为Java的static方法中没有this方法）。</li></ul><p>本地寄存器没有限制，理论上是可以任意使用的，下面是例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v0<span class="token punctuation">,</span> <span class="token number">0x0</span>iput<span class="token operator">-</span><span class="token keyword">boolean</span> v0<span class="token punctuation">,</span> p0<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span>isRunning<span class="token operator">:</span><span class="token class-name">Z</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面的两句中，使用了v0本地寄存器，并把值0x0存到v0中，然后第二句用<code>iput-boolean</code>这个指令把v0中的值存放到<code>com.disney.WMW.WMWActivity.isRunning</code>这个成员变量中。</p><p>即相当于：<code>this.isRunning = false;</code>（上面说过，在非static函数中p0代表的是<code>this</code>，在这里就是com.disney.WMW.WMWActivity实例）。</p><h4 id="smali中的继承、接口、包信息"><a href="#smali中的继承、接口、包信息" class="headerlink" title="smali中的继承、接口、包信息"></a>smali中的继承、接口、包信息</h4><pre class="line-numbers language-lang-smali" data-language="lang-smali"><code class="language-lang-smali">.class public Lcom/disney/WMW/WMWActivity; .super Lcom/disney/common/BaseActivity;.source "WMWActivity.java"# interfaces.implements Lcom/burstly/lib/ui/IBurstlyAdListener;# annotations.annotation system Ldalvik/annotation/MemberClasses;    value = {        Lcom/disney/WMW/WMWActivity$MessageHandler;,        Lcom/disney/WMW/WMWActivity$FinishActivityArgs;    }.end annotation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第1行: <code>.class</code> 是com.disney.WMW这个package下的一个类</p><p>第2行: <code>.super</code> 继承自com.disney.common.BaseActivity</p><p>第3行: <code>.source</code> 是一个由WMWActivity.java编译得到的smali文件</p><p>第5-6行: <code>.implements</code> 实现了一个com.burstly.lib.ui这个package下（一个广告SDK）的IBurstyAdListener接口</p><p>第8-14行: 定义了内部类：它有两个成员内部类——MessageHandler和FinishActivityArgs，内部类将在后面小节中会有提及</p><p>所以对应的Java代码大概是这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">WMWActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">implements</span> <span class="token class-name">IBurstlyAdListener</span><span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token keyword">class</span> <span class="token class-name">MessageHandler</span> <span class="token punctuation">{</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">FinishActivityArgs</span><span class="token punctuation">{</span>        <span class="token comment">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="smali中的成员变量"><a href="#smali中的成员变量" class="headerlink" title="smali中的成员变量"></a>smali中的成员变量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token keyword">static</span> fields<span class="token punctuation">.</span>field <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token constant">PREFS_INSTALLATION_ID</span><span class="token operator">:</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token string">"installationId"</span><span class="token comment">//...</span># instance fields<span class="token punctuation">.</span>field <span class="token keyword">private</span> _activityPackageName<span class="token operator">:</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义的<code>static fields</code>和<code>instance fields</code>均为成员变量，格式是：</p><pre class="line-numbers language-none"><code class="language-none">.field public/private [static] [final] varName:&lt;类型&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而static fields和instance fields还是有区别的，当然区别很明显，那就是static fields是static的，而instance则不是。</p><p>根据这个区别来获取这些不同的成员变量时也有不同的指令。</p><p>获取的指令有：<code>iget/sget</code>、<code>iget-boolean/sget-boolean</code>、<code>iget-object/sget-object</code>等，</p><p>操作的指令有：<code>iput/sput</code>、<code>iput-boolean/sput-boolean</code>、<code>iput-object/sput-object</code>等。</p><p>没有“-object”后缀的表示操作的成员变量对象是基本数据类型，带“-object”表示操作的成员变量是对象类型，特别地，boolean类型则使用带“-boolean”的指令操作。</p><h5 id="获取static-fields指令示例"><a href="#获取static-fields指令示例" class="headerlink" title="获取static fields指令示例"></a>获取static fields指令示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">sget<span class="token operator">-</span>object v0<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token constant">PREFS_INSTALLATION_ID</span><span class="token operator">:</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>sget-object</code> 就是用来获取变量值并保存到紧接着的<code>本地寄存器</code>中，在这里，把上面出现的<code>PREFS_INSTALLATION_ID</code>这个String成员变量获取并放到v0寄存器中，<strong>注意：前面需要该变量所属的类的类型，后面需要加一个冒号和该成员变量的类型</strong>，中间是 <code>-&gt;</code> 表示所属关系。</p><h5 id="获取instance-fields指令示例"><a href="#获取instance-fields指令示例" class="headerlink" title="获取instance fields指令示例"></a>获取instance fields指令示例</h5><p>指令与static fields的基本一样，只是由于不是static变量，不能仅仅指出该变量所在类的类型，还需要该变量所在类的实例。看例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">iget<span class="token operator">-</span>object v0<span class="token punctuation">,</span> p0<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span>_view<span class="token operator">:</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>common<span class="token operator">/</span><span class="token class-name">WMWView</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到<code>iget-object</code>指令比<code>sget-object</code>多了一个参数，就是该变量所在类的实例，在这里就是p0即<code>this</code>。</p><h5 id="获取array指令-aget和aget-object"><a href="#获取array指令-aget和aget-object" class="headerlink" title="获取array指令: aget和aget-object"></a>获取array指令: aget和aget-object</h5><p>指令使用和上述类似，不细述。</p><h5 id="put指令使用和get指令相似"><a href="#put指令使用和get指令相似" class="headerlink" title="put指令使用和get指令相似"></a>put指令使用和get指令相似</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v3<span class="token punctuation">,</span> <span class="token number">0x0</span>sput<span class="token operator">-</span>object v3<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span>globalIapHandler<span class="token operator">:</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>config<span class="token operator">/</span><span class="token class-name">GlobalPurchaseHandler</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相当于：<code>this.globalIapHandler = null;</code>（null = 0x0）</p><pre class="line-numbers language-lang-java" data-language="lang-java"><code class="language-lang-java">.local v0, wait:Landroid/os/Message;const/4 v1, 0x2iput v1, v0, Landroid/os/Message;-&gt;what:I<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>相当于：<code>wait.what = 0x2;</code>（wait是Message的实例）</p><h4 id="smali中的函数调用"><a href="#smali中的函数调用" class="headerlink" title="smali中的函数调用"></a>smali中的函数调用</h4><p>smali中的函数和成员变量一样也分为两种类型，但是不同成员变量中的<code>static和instance之分</code>，而是<code>direct和virtual之分</code>。那么direct method和virtual method有什么区别呢？</p><p>直白地讲，direct method就是<code>private函数</code>，其余的<code>public和protected函数</code>都属于virtual method。所以在调用函数时，有<code>invoke-direct</code>，<code>invoke-virtual</code>，另外还有<code>invoke-static</code>、<code>invoke-super</code>以及<code>invoke-interface</code>等几种不同的指令。当然其实还有<code>invoke-XXX/range</code>指令的，这是参数多于4个的时候调用的指令，比较少见，了解下即可。</p><h5 id="invoke-static"><a href="#invoke-static" class="headerlink" title="invoke-static"></a>invoke-static</h5><p>顾名思义就是调用static函数的，因为是static函数，所以比起其他调用少一个参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">UnlockHelper</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">unlockCrankypack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Z</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里注意到invoke-static后面有一对大括号“{}”，其实是<strong>调用该方法的实例+参数列表</strong>，由于这个方法既不需参数也是static的，所以{}内为空，再看一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span><span class="token operator">-</span>string v0<span class="token punctuation">,</span> <span class="token string">"fmodex"</span>invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">{</span>v0<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个是调用<code>static void System.loadLibrary(String)</code>来加载NDK编译的so库用的方法，同样也是这里v0就是参数<code>”fmodex”</code>了。</p><h5 id="invoke-super"><a href="#invoke-super" class="headerlink" title="invoke-super"></a>invoke-super</h5><p>调用父类方法用的指令，在onCreate、onDestroy等方法都能看到，略。</p><h5 id="invoke-direct"><a href="#invoke-direct" class="headerlink" title="invoke-direct"></a>invoke-direct</h5><p>调用private函数的，例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">invoke<span class="token operator">-</span>direct <span class="token punctuation">{</span>p0<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">getGlobalIapHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>config<span class="token operator">/</span><span class="token class-name">GlobalPurchaseHandler</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里GlobalPurchaseHandler getGlobalIapHandler()就是定义在WMWActivity中的一个private函数，如果修改smali时错用invoke-virtual或invoke-static将在回编译后程序运行时引发一个常见的VerifyError</p><h5 id="invoke-virtual"><a href="#invoke-virtual" class="headerlink" title="invoke-virtual"></a>invoke-virtual</h5><p>用于调用protected或public函数，同样注意修改smali时不要错用invoke-direct或invoke-static，例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sget<span class="token operator">-</span>object v0<span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span>shareHandler<span class="token operator">:</span><span class="token class-name">Landroid</span><span class="token operator">/</span>os<span class="token operator">/</span><span class="token class-name">Handler</span><span class="token punctuation">;</span>invoke<span class="token operator">-</span>virtual <span class="token punctuation">{</span>v0<span class="token punctuation">,</span> v3<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>os<span class="token operator">/</span><span class="token class-name">Handler</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>v0是shareHandler:Landroid/os/Handler，v3是传递给removeCallbackAndMessage方法的Ljava/lang/Object参数就可以了。</p><h5 id="invoke-xxx-range"><a href="#invoke-xxx-range" class="headerlink" title="invoke-xxx/range"></a>invoke-xxx/range</h5><p>当方法的参数多于5个时（含5个），不能直接使用以上的指令，而是在后面加上“/range”，使用方法也有所不同：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">invoke<span class="token operator">-</span><span class="token keyword">static</span><span class="token operator">/</span>range <span class="token punctuation">{</span>v0 <span class="token punctuation">.</span><span class="token punctuation">.</span> v5<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcn</span><span class="token operator">/</span>game189<span class="token operator">/</span>sms<span class="token operator">/</span><span class="token constant">SMS</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">checkFee</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">Landroid</span><span class="token operator">/</span>app<span class="token operator">/</span><span class="token class-name">Activity</span><span class="token punctuation">;</span><span class="token class-name">Lcn</span><span class="token operator">/</span>game189<span class="token operator">/</span>sms<span class="token operator">/</span><span class="token class-name">SMSListener</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Z</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刚才看到的例子都是“调用函数”这个操作而已，貌似没有取函数返回的结果的操作？</p><p>在Java代码中<code>调用函数和返回函数结果</code>是一条语句完成的，而在smali里则需要分开来完成，在使用上述指令后，如果调用的函数返回非void，那么还需要用到<code>move-result</code>（返回基本数据类型）和<code>move-result-object</code>（返回对象）指令：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span><span class="token operator">/</span><span class="token number">4</span> v2<span class="token punctuation">,</span> <span class="token number">0x0</span>invoke<span class="token operator">-</span>virtual <span class="token punctuation">{</span>p0<span class="token punctuation">,</span> v2<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span><span class="token constant">WMW</span><span class="token operator">/</span><span class="token class-name">WMWActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">getPreferences</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">Landroid</span><span class="token operator">/</span>content<span class="token operator">/</span><span class="token class-name">SharedPreferences</span><span class="token punctuation">;</span>move<span class="token operator">-</span>result<span class="token operator">-</span>object v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>v1保存的就是调用getPreferences(int)方法返回的SharedPreferences实例</p><pre class="line-numbers language-lang-java" data-language="lang-java"><code class="language-lang-java">invoke-virtual {v2}, Ljava/lang/String;-&gt;length()Imove-result v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>v2保存的则是调用String.length()返回的整型。</p><h4 id="smali中函数实体分析"><a href="#smali中函数实体分析" class="headerlink" title="smali中函数实体分析"></a>smali中函数实体分析</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>method <span class="token keyword">protected</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>locals <span class="token number">0</span>    <span class="token punctuation">.</span>prologue    <span class="token punctuation">.</span>line <span class="token number">277</span>    invoke<span class="token operator">-</span><span class="token keyword">super</span> <span class="token punctuation">{</span>p0<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>disney<span class="token operator">/</span>common<span class="token operator">/</span><span class="token class-name">BaseActivity</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token punctuation">.</span>line <span class="token number">279</span>    <span class="token keyword">return</span><span class="token operator">-</span><span class="token keyword">void</span><span class="token punctuation">.</span>end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是<code>onDestroy()</code>函数，它的作用大家都知道。首先看到函数内第一句：<code>.local 0</code>，这句话很重要，标明了你在这个函数中<code>最少要用到的本地寄存器的个数</code>。这里由于只需要调用一个<code>父类的onDestroy()</code>处理，所以只需要用到p0，所以使用到的本地寄存器数为0。如果不清楚这个规则，很容易在植入代码后<code>忘记修改.local</code> 的值，那么回编译后运行时将会得到一个VerifyError错误，而且极难发现问题所在。我正是被这个问题困扰了很多次，最后研究发现.local的值有这个规律，于是在文档查证了一下果然是这个问题。例如我往<code>onDestroy()</code>增加一句：<code>this.existed = true;</code> 那么应该改为（注意修改.local的值为1——使用到了v0这一个本地寄存器）：</p><pre class="line-numbers language-lang-java" data-language="lang-java"><code class="language-lang-java">.method protected onDestroy()V    .locals 1    .prologue    .line 277    const/4 v0, 0x1    iput-boolean v0, p0, Lcom/disney/WMW/WMWActivity;-&gt;exited:Z    invoke-super {p0}, Lcom/disney/common/BaseActivity;-&gt;onDestroy()V    .line 279    return-void.end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外注意到<code>.line</code>这个标识，它是标注了该代码在<code>原Java文件中的行数</code>，Dalvik VM运行到<code>.line XX</code>时就将这个值存起来，如果在这一行运行时出错了，就往catLog输出这个值，这样我们就能看到具体是哪一行的问题了。</p><h3 id="smali插桩"><a href="#smali插桩" class="headerlink" title="smali插桩"></a>smali插桩</h3><p>何为插桩，引用一下wiki的解释：程序插桩，最早是由J.C. Huang 教授提出的，它是在保证被测程序原有逻辑完整性的基础上在程序中插入一些探针（又称为“探测仪”），通过探针的执行并抛出程序运行的特征数据，通过对这些数据的分析，可以获得程序的控制流和数据流信息，进而得到逻辑覆盖等动态信息，从而实现测试目的的方法。</p><p>插桩思路是，比如有些应用为防止被修改，会在开启的时候检查签名，签名结果为false的时候就会退出应用。所以就要定位检查的函数，然后通过log把目标值打印出来。</p><ol><li><p>写一个打印log的静态类</p></li><li><p>将其转换成smali文件</p></li><li><p>把文件放入工程里</p></li><li><p>在要打印log的地方添加如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">{</span>v1<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>softard<span class="token operator">/</span><span class="token class-name">MyLog</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新打包APK，运行，就可以看到打印结果</p></li></ol><p>补充一份实例：先写一个Log类：</p><pre class="line-numbers language-lang-java" data-language="lang-java"><code class="language-lang-java">package com.softard.xxxx;import android.util.Log;public class LogUtil {    public static final String TAG = "WOW";    public static void print() {        Log.d(TAG, "Code running in here.");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后Android Studio将java代码转换成<code>smali</code></p><pre class="line-numbers language-lang-smali" data-language="lang-smali"><code class="language-lang-smali">.class public Lcom/softard/xxxx/LogUtil;.super Ljava/lang/Object;.source "LogUtil.java"# static fields.field public static final TAG:Ljava/lang/String; = "WOW"# direct methods.method public constructor ()V    .registers 1    .prologue    .line 10    invoke-direct {p0}, Ljava/lang/Object;-&gt;()V    return-void.end method.method public static print()V    .registers 2    .prologue    .line 14    const-string v0, "WOW"    const-string v1, "Code running in here."    invoke-static {v0, v1}, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I    .line 15    return-void.end method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把<code>LogUtil.smali</code>文件放到反编译后的<code>smali</code>文件夹下的根目录。放根目录是为了绕过包名的影响，方便调用，所以<code>LogUtil.smali</code>文件的包名要去掉：</p><pre class="line-numbers language-lang-smali" data-language="lang-smali"><code class="language-lang-smali">.class public Lcom/softard/xxxx/LogUtil; -&gt; .class public LLogUtil;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在目标位置调用打印方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">invoke<span class="token operator">-</span>virtual <span class="token punctuation">{</span>p1<span class="token punctuation">,</span> v0<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>view<span class="token operator">/</span><span class="token class-name">View</span>$<span class="token class-name">OnClickListener</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">LLogUtil</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>  <span class="token operator">&lt;</span><span class="token operator">-</span>在此调用<span class="token punctuation">.</span>line <span class="token number">51</span>invoke<span class="token operator">-</span><span class="token keyword">static</span> <span class="token punctuation">{</span>p0<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Lcom</span><span class="token operator">/</span>softard<span class="token operator">/</span>rxdemo<span class="token operator">/</span>demo<span class="token operator">/</span><span class="token class-name">Chapter9</span><span class="token punctuation">;</span><span class="token operator">-&gt;</span><span class="token function">practice1</span><span class="token punctuation">(</span><span class="token class-name">Landroid</span><span class="token operator">/</span>content<span class="token operator">/</span><span class="token class-name">Context</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>加代码的时候要注意，要找对地方加，就是在上个方法调用完后添加，比如<code>invoke-virtual</code> <code>invoke-static</code>等。而且这些指令后面不能有<code>move-result-object</code>，因为这个指令是获取方法的返回值，所以一般这么加代码：</p><ul><li>在invoke-static/invoke-virtual 指令返回类型是<code>V</code>之后可以加入</li><li>在invoke-static/invoke-virtual 指令返回类型不是<code>V</code>，那么在<code>move-result-object</code>命令之后可以加入</li></ul></blockquote><p>然后打包签名安装运行，可以看到我们要的log</p><pre class="line-numbers language-lang-txt" data-language="lang-txt"><code class="language-lang-txt">&gt; adb logcat -s WOW16:12:55.443 26400 26400 D WOW     : Code running in here.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="smali修改"><a href="#smali修改" class="headerlink" title="smali修改"></a>smali修改</h3><p>一般不会大量修改代码，而是会改一些关键逻辑。比如if，有时候修改一个判断就可以达到逻辑跳转的目的。</p><pre class="line-numbers language-lang-java" data-language="lang-java"><code class="language-lang-java">if-eq vA, VB, cond_** 如果vA等于vB则跳转到cond_**。相当于if (vA==vB)if-ne vA, VB, cond_** 如果vA不等于vB则跳转到cond_**。相当于if (vA!=vB)if-lt vA, VB, cond_** 如果vA小于vB则跳转到cond_**。相当于if (vAvB)if-ge vA, VB, cond_** 如果vA大于等于vB则跳转到cond_**。相当于if (vA&gt;=vB)if-eqz vA, :cond_** 如果vA等于0则跳转到:cond_** 相当于if (VA==0)if-nez vA, :cond_** 如果vA不等于0则跳转到:cond_**相当于if (VA!=0)if-ltz vA, :cond_** 如果vA小于0则跳转到:cond_**相当于if (VA&lt;0)if-lez vA, :cond_** 如果vA小于等于0则跳转到:cond_**相当于if (VA&lt;=0)if-gtz vA, :cond_** 如果vA大于0则跳转到:cond_**相当于if (VA&gt;0)if-gez vA, :cond_** 如果vA大于等于0则跳转到:cond_**相当于if (VA&gt;=0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不建议在程序原有的方法上增加大量逻辑，这样可能会出现很多寄存器方面的错误导致编译失败。比较好的方法是：</p><ol><li>把想要增加的逻辑先用java写成一个apk</li><li>然后把这个apk反编译成smali文件，随后把反编译后的这部分逻辑的smali文件插入到目标程序的smali文件夹中</li><li>然后再在原来的方法上采用invoke的方式调用新加入的逻辑。这样的话不管加入再多的逻辑，也只是修改了原程序的几行代码而已。</li></ol><h2 id="汇编ARM指令"><a href="#汇编ARM指令" class="headerlink" title="汇编ARM指令"></a>汇编ARM指令</h2><h3 id="ARM指令中寻址方式"><a href="#ARM指令中寻址方式" class="headerlink" title="ARM指令中寻址方式"></a>ARM指令中寻址方式</h3><ul><li><p>立即数寻址</p><p>也叫立即寻址，是一种特殊寻址方式。操作数本身包含在指令中，只要取出指令也就取到了操作数，该操作数叫立即数，对应寻址方式叫做立即寻址。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">MOV R0, #64; R0←64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>寄存器寻址</p><p>利用寄存器中的数值作为操作数，也称为寄存器直接寻址。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">ADD R0, R1, R2; R0←R1+R2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>寄存器间接寻址</p><p>把寄存器中的值作为地址，通过这个地址去取得操作数，操作数本身存放在存储器中。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">LDR R0,[R1]; R0←[R1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>寄存器偏移寻址</p><p>这是ARM指令集特有的寻址方式，它是在寄存器寻址得到操作数后再进行位移操作，得到最终操作数。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">MOV R0,R2,LSL #3; R0←R2*8, R2的值左移3位，结果赋值给R0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>寄存器基址变址寻址</p><p>是在寄存器间接寻址的基础上扩展来的。它将寄存器中的值与指令中给出的地址偏移量相加，从而得到一个地址，通过这个地址取得操作数。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">LDR R0,[R1, #4]; R0←[R1+4] 将R1的内容加上4形成操作数地址，取得的操作数存入寄存器R0中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>多寄存器寻址</p><p>可以一次完成多个寄存器值的传送</p></li></ul><pre class="line-numbers language-none"><code class="language-none">LDMIA R0,{R1,R2,R3,R4}; R1←[R0], R2←[R0+4], R3←[R0+8], R4←[R0+12]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>堆栈寻址</p><p>堆栈按先进后出工作，使用堆栈指针SP指示当前的操作位置，堆栈指针总是指向栈顶</p></li></ul><pre class="line-numbers language-none"><code class="language-none">STMFD SP!, {R1 - R7, LR} 将R1-R7 LR压入堆栈。满递减堆栈LDMED SP!,{R1 - R7, LR} 将堆栈中的数据取回到R1-R7，LR寄存器。空递减堆栈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ARM中寄存器"><a href="#ARM中寄存器" class="headerlink" title="ARM中寄存器"></a>ARM中寄存器</h3><ul><li><strong>R0-R3</strong>: 用于函数参数及返回值的传递</li><li><strong>R4-R6,R8,R10-R11</strong>: 没有特殊规定，就是普通的通用寄存器</li><li><strong>R7</strong>: 栈帧指针（Frame Pointer）指向前一个保存的栈帧和链接寄存器（link register lr）在栈上的地址</li><li><strong>R9</strong>: 操作系统保留</li><li><strong>R12</strong>: IP intra-procedure scratch</li><li><strong>R13</strong>: SP stack pointer 栈顶指针</li><li><strong>R14</strong>: link register 存放函数的返回地址</li><li><strong>R15</strong>: pogram counter 指向当前指令地址</li></ul><h3 id="ARM常用指令"><a href="#ARM常用指令" class="headerlink" title="ARM常用指令"></a>ARM常用指令</h3><ul><li><strong>ADD</strong> 加指令</li><li><strong>SUB</strong> 减指令</li><li><strong>STR</strong> 把寄存器内容存到栈上</li><li><strong>LDR</strong> 把栈上内容载入一个寄存器中</li><li><strong>.W</strong> 是一个可选指令宽度说明符。不会影响为此指令的行为，它只是确保生成32位指令。</li><li><strong>BL</strong> 执行函数调用，并把使lr指向调用者的下一条指令，即函数的返回地址</li><li><strong>BLX</strong> 同上，但是在ARM和thumb指令集间切换</li><li><strong>CMP</strong> 指令进行比较两个操作数的大小</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[Android 逆向之 smali]( <a href="http://wossoneri.github.io/2019/09/12/">http://wossoneri.github.io/2019/09/12/</a> [Android][Security]Decompile-smali/)</li><li><a href="https://misakikata.github.io/2019/01/Android-%E9%80%86%E5%90%91Smali%E8%AF%AD%E8%A8%80%E5%88%9D%E8%AF%86/">Android 逆向Smali语言初识</a></li><li><a href="https://juejin.im/post/6844903732774174734">Smali 语法解析——Hello World</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Kotlin  实现高效动态编写布局, Drawable, Animation</title>
      <link href="/20200625/android-fluent-ui/"/>
      <url>/20200625/android-fluent-ui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>In your <code>build.gradle</code>:</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">allprojects <span class="token punctuation">{</span>  repositories <span class="token punctuation">{</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In your <code>module/build.gradle</code>:</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>  implementation <span class="token string">'com.weicools:fluent-ui:1.0.1'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> rootView <span class="token operator">=</span> constraintLayout <span class="token punctuation">{</span>  layoutParams <span class="token operator">=</span> <span class="token function">defaultParams</span><span class="token punctuation">(</span>matchParent<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>  <span class="token function">imageView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iconId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    layoutParams <span class="token operator">=</span> <span class="token function">constraintParams</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">.</span>dp<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftToLeft <span class="token operator">=</span> parentId      centerVerticalOf <span class="token operator">=</span> parentId      leftMargin <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">.</span>dp    <span class="token punctuation">}</span>    imageResource <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_arrow  <span class="token punctuation">}</span>  <span class="token function">textView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    layoutParams <span class="token operator">=</span> <span class="token function">constraintParams</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> wrapContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      leftToRight <span class="token operator">=</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iconId      rightToRight <span class="token operator">=</span> parentId      centerVerticalOf <span class="token operator">=</span> parentId      leftMargin <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">.</span>dp      rightMargin <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">.</span>dp    <span class="token punctuation">}</span>    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"layout title"</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Note 📢<br>The main process is automatically initialized context by default, Multiple processes need to be initialized manually: [FluentUiInitializer.initialize]<br>Avoid using <code>xxxResourceOf</code> methods (such as <code>colorResourceOf</code>, <code>dimenResourceOf</code>, etc.) in View/Layout (which internally depends on appContext).<br>Using them directly can cause the View/Layout to fail to preview because during preview, appContext is not initialized and cannot access the relevant resources.</p></blockquote><h3 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h3><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/NWvJSz.png" alt="Usage sample"></p><h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><pre class="line-numbers language-none"><code class="language-none">com.weikeet.ui├── animation   -&gt; 动画: Kotlin dsl 构建动画├── app         -&gt; 应用: app context 以及通过 app context 获取相关资源├── graphics    -&gt; 图形: Kotlin dsl 构建 drawable├── res         -&gt; 资源: color, dimen, drawable, font, string├── unit        -&gt; 单位: dp, sp, px 转换├── view        -&gt; 视图: Kotlin dsl 构建 view, viewgroup├── widget      -&gt; 控件: Kotlin 控件属性扩展└── window      -&gt; 窗口: WindowInsets(StatusBar, NavigationBar, ime) 相关监听<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>快速创建动画 animator</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">startFloatAnimation</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">1f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  doOnFloatUpdate <span class="token punctuation">{</span> animatedValue <span class="token operator">-&gt;</span>    <span class="token comment">// do something</span>  <span class="token punctuation">}</span>  doOnStart <span class="token punctuation">{</span>    <span class="token comment">// do something</span>  <span class="token punctuation">}</span>  doOnEnd <span class="token punctuation">{</span>    <span class="token comment">// do something</span>  <span class="token punctuation">}</span>  duration <span class="token operator">=</span> <span class="token number">240</span>  <span class="token comment">// repeatCount = 0</span>  <span class="token comment">// repeatMode = </span>  <span class="token comment">// startDelay = 0</span>  <span class="token comment">// interpolator = LinearInterpolator()</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>more uses see <a href="library/src/main/kotlin/com/weikeet/ui/animation/Animator.kt">Animator.kt</a></p><h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><blockquote><p>避免在 View/Layout 直接使用 <code>dpOf(xx)</code> 和 <code>xxxResourceOf</code> 方法 (如 <code>colorResourceOf</code>, <code>dimenResourceOf</code> 等),<br>直接使用会导致 View/Layout 预览失败, 因为预览时 appContext 未初始化, 无法访问相关资源.<br>应该使用 xx.dp, dip(xx), <code>xxxResources</code> 方法 (如 <code>colorResources</code>, <code>dimenResources</code> 等)</p></blockquote><p>资源获取</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// get resource using app context</span><span class="token keyword">val</span> color <span class="token operator">=</span> <span class="token function">colorResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">)</span><span class="token keyword">val</span> colorList <span class="token operator">=</span> <span class="token function">colorStateListOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">)</span><span class="token keyword">val</span> dimen16 <span class="token operator">=</span> <span class="token function">dimenResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>padding_16<span class="token punctuation">)</span><span class="token keyword">val</span> dimenSize16 <span class="token operator">=</span> <span class="token function">dimenSizeResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>padding_16<span class="token punctuation">)</span><span class="token keyword">val</span> dimenOffset16 <span class="token operator">=</span> <span class="token function">dimenOffsetResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>padding_16<span class="token punctuation">)</span><span class="token keyword">val</span> drawable <span class="token operator">=</span> <span class="token function">drawableResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_arrow<span class="token punctuation">)</span><span class="token keyword">val</span> font <span class="token operator">=</span> <span class="token function">fontResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>font<span class="token punctuation">.</span>font_name<span class="token punctuation">)</span><span class="token keyword">val</span> string <span class="token operator">=</span> <span class="token function">stringResourceOf</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unit 转换</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Convert dp to px using app context</span><span class="token keyword">val</span> dp10 <span class="token operator">=</span> <span class="token function">dpOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">val</span> dp10f <span class="token operator">=</span> <span class="token function">dpOf</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="graphics"><a href="#graphics" class="headerlink" title="graphics"></a>graphics</h3><p>使用 Kotlin dsl 像 xml 一样构建 drawable</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// create drawable using kotlin dsl</span><span class="token keyword">val</span> drawable <span class="token operator">=</span> shapeDrawable <span class="token punctuation">{</span>  corners <span class="token punctuation">{</span>    radius <span class="token operator">=</span> <span class="token number">20f</span><span class="token punctuation">.</span>dp  <span class="token punctuation">}</span>  solidColor <span class="token operator">=</span> <span class="token number">0xff00ff00</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>more uses see</p><ul><li><a href="library/src/main/kotlin/com/weikeet/ui/graphics/drawable/Drawable.kt">Drawable.kt</a></li><li><a href="library/src/main/kotlin/com/weikeet/ui/graphics/drawable/Shapes.kt">Shapes.kt</a></li><li><a href="library/src/main/kotlin/com/weikeet/ui/graphics/drawable/States.kt">States.kt</a></li></ul><h3 id="res"><a href="#res" class="headerlink" title="res"></a>res</h3><p>Context/Fragment/View 快捷获取资源</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// get color using context/fragment/view resource</span><span class="token keyword">val</span> color <span class="token operator">=</span> <span class="token function">colorResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">)</span><span class="token keyword">val</span> colorList <span class="token operator">=</span> <span class="token function">colorStateList</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">)</span><span class="token keyword">val</span> dimen16 <span class="token operator">=</span> <span class="token function">dimenResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>padding_16<span class="token punctuation">)</span><span class="token keyword">val</span> dimenSize16 <span class="token operator">=</span> <span class="token function">dimenSizeResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>padding_16<span class="token punctuation">)</span><span class="token keyword">val</span> dimenOffset16 <span class="token operator">=</span> <span class="token function">dimenOffsetResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>padding_16<span class="token punctuation">)</span><span class="token keyword">val</span> drawable <span class="token operator">=</span> <span class="token function">drawableResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_arrow<span class="token punctuation">)</span><span class="token keyword">val</span> font <span class="token operator">=</span> <span class="token function">fontResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>font<span class="token punctuation">.</span>font_name<span class="token punctuation">)</span><span class="token keyword">val</span> string <span class="token operator">=</span> <span class="token function">stringResources</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h3><p>dp, px 转换</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Convert dp to px using context/fragment/view resource</span><span class="token keyword">val</span> dp10 <span class="token operator">=</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">val</span> dp10f <span class="token operator">=</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">)</span><span class="token comment">// Convert sp to px using system resource</span><span class="token keyword">val</span> dp20 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">.</span>dp<span class="token keyword">val</span> dp20f <span class="token operator">=</span> <span class="token number">20f</span><span class="token punctuation">.</span>dp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><p>使用 Kotlin dsl 像 xml 一样构建 View, ViewGroup</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> rootView <span class="token operator">=</span> constraintLayout <span class="token punctuation">{</span>  layoutParams <span class="token operator">=</span> <span class="token function">defaultParams</span><span class="token punctuation">(</span>matchParent<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>  <span class="token function">imageView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iconId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    layoutParams <span class="token operator">=</span> <span class="token function">constraintParams</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">.</span>dp<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">textView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>textId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    layoutParams <span class="token operator">=</span> <span class="token function">constraintParams</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> wrapContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>more uses see <a href="library/src/main/kotlin/com/weikeet/ui/view">ui/view</a></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>kotlin 控件属性扩展</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">context<span class="token punctuation">.</span><span class="token function">textView</span> <span class="token punctuation">{</span>  textColorResource <span class="token operator">=</span> R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorPrimary  stringResource <span class="token operator">=</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>app_name  <span class="token comment">// ...</span><span class="token punctuation">}</span>context<span class="token punctuation">.</span><span class="token function">imageView</span> <span class="token punctuation">{</span>  imageResource <span class="token operator">=</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_arrow  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>more uses see <a href="library/src/main/kotlin/com/weikeet/ui/widget">ui/widget</a></p><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>WindowInsets 相关监听</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// adapt edge to edge</span><span class="token function">WindowInsetsEdgeDelegate</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// listen window insets</span>view<span class="token punctuation">.</span><span class="token function">doOnApplyWindowInsets</span> <span class="token punctuation">{</span> windowInsets <span class="token operator">-&gt;</span>  <span class="token comment">// do something</span>  <span class="token comment">// eg: view.updatePadding(top = windowInsets.systemBarTop)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>more uses see <a href="library/src/main/kotlin/com/weikeet/ui/window">ui/window</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用FRP进行内网穿透</title>
      <link href="/20200404/intranet-penetration-by-frp/"/>
      <url>/20200404/intranet-penetration-by-frp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用frp进行内网穿透"><a href="#使用frp进行内网穿透" class="headerlink" title="使用frp进行内网穿透"></a>使用frp进行内网穿透</h1><p>FRP项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a><br>FRP中文说明：<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">https://github.com/fatedier/frp/blob/master/README_zh.md</a></p><h2 id="frp是什么"><a href="#frp是什么" class="headerlink" title="frp是什么"></a>frp是什么</h2><p>简单地说:frp就是一个<a href="https://www.zhihu.com/question/24723688">反向代理软件</a>，它体积轻量但功能很强大，可以<strong>使处于内网或防火墙后的设备对外界提供服务</strong>，它支持 <strong>HTTP、TCP、UDP</strong>等众多协议。</p><h2 id="为什么需要内网穿透"><a href="#为什么需要内网穿透" class="headerlink" title="为什么需要内网穿透"></a>为什么需要内网穿透</h2><p><strong>从公网中访问自己的私有设备向来是一件难事儿。</strong><br>自己的主力台式机、NAS等等设备，它们可能处于路由器后，或者运营商因为IP地址短缺不给你分配公网IP地址。如果我们想直接访问到这些设备（远程桌面，远程文件，SSH等等），一般来说要通过一些转发或者P2P组网软件的帮助。<br>我有一台计算机位于一个很复杂的局域网中，我想要实现远程桌面和文件访问，目前来看其所处的网络环境很难通过简单的端口映射将其暴露在公网之中，我试过这么几种方法：</p><span id="more"></span><ol><li>远程桌面使用TeamViewer。可用，但需要访问端也拥有TeamViewer软件，不是很方便，希望能使用Windows自带的远程桌面。且TeamViewer不易实现远程文件访问。</li><li>使用蒲公英VPN软件进行组网，可用，但免费版本网络速度极慢，体验不佳，几乎无法正常使用。</li><li>使用花生壳软件进行DDNS解析，可用，但同第二点所述，免费版本有带宽限制，无法实际使用。</li><li><strong>搭建frp服务器进行内网穿透，可用且推荐，可以达到不错的速度，且理论上可以开放任何想要的端口，可以实现的功能远不止远程桌面或者文件共享。</strong></li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建一个完整的frp服务链，我们需要</p><ol><li>VPS一台（也可以是具有公网IP的实体机）</li><li>访问目标设备（就是你最终要访问的设备，例如：PC，NAS，路由器）</li><li>简单的Linux基础（会用cp等几个简单命令即可）</li></ol><h3 id="VPS相关"><a href="#VPS相关" class="headerlink" title="VPS相关"></a>VPS相关</h3><ul><li>因为frp的原理是利用服务端（所准备的VPS）进行转发，因而VPS的速度直接决定了之后连接的质量，请根据自己的需要选择相应主机配置。</li><li>本人使用了搬瓦工的洛杉矶机房，北京联通下测试速度也还过得去。</li><li>系统使用Ubuntu 16.04.5 x64，frp客户端和服务端本身同时均支持Linux和Windows，且配置方法一样，请根据实际环境自行测试，如果你是新建的VPS，那选择Ubuntu 16.04.5 x64就可以了。</li></ul><h2 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h2><p>SSH连接到VPS之后运行如下命令查看处理器架构，根据架构下载不同版本的frp</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home<span class="token comment"># arch</span>x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>这里选择的是Linux x86_64的版本：frp_0.32.1_linux_amd64.tar.gz</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载frp程序</span>root@Weicools:/home<span class="token comment"># </span><span class="token function">wget</span> https://github.com/fatedier/frp/releases/download/v0.32.1/frp_0.32.1_linux_amd64.tar.gz<span class="token comment"># 解压</span>root@Weicools:/home<span class="token comment"># </span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> frp_0.32.1_linux_amd64.tar.gz<span class="token comment"># 改个名字</span>root@Weicools:/home<span class="token comment"># </span><span class="token function">cp</span> <span class="token parameter variable">-r</span> frp_0.32.1_linux_amd64 frp<span class="token comment"># 进入frp程序目录</span>root@Weicools:/home<span class="token comment"># </span><span class="token builtin class-name">cd</span> frproot@Weicools:/home/frp<span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只需要关注如下几个文件</p><ul><li>frps 服务端程序</li><li>frps.ini 服务端配置文件</li><li>frpc 客户端程序</li><li>frpc.ini 客户端配置文件</li></ul><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>编辑frp服务端配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home/frp<span class="token comment"># </span><span class="token function">vim</span> frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>服务端配置文件内容根据需求自行配置，编辑完成后保存（vim保存如果不会请自行搜索）。</p><h4 id="简洁版本"><a href="#简洁版本" class="headerlink" title="简洁版本"></a>简洁版本</h4><pre class="line-numbers language-none"><code class="language-none">[common]                                                                                                                   bind_port = 7000token = 12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="带Dashboard版本"><a href="#带Dashboard版本" class="headerlink" title="带Dashboard版本"></a>带Dashboard版本</h4><pre class="line-numbers language-none"><code class="language-none">[common]bind_port = 7000dashboard_port = 7500token = 12345678    dashboard_user = admindashboard_pwd = adminvhost_http_port = 10080vhost_https_port = 10443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置注意事项"><a href="#配置注意事项" class="headerlink" title="配置注意事项"></a>配置注意事项</h4><ul><li><code>bind_port = 7000</code> 可以自行修改（如果没有必要，端口均可使用默认值），但要和接后面客户端配置文件中的 <code>bind_port</code> 相同，且服务端的7000端口需要放行，具体可以用宝塔面板（安全选项）进行设置，或者网上查询命令设置放行的方法。</li><li><code>dashboard_port</code> 是服务端仪表板的端口，若使用7500端口（需要放行），在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li><li><code>token</code> 是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li><li><code>dashboard_user</code> 和 <code>dashboard_pwd</code> 表示打开仪表板页面登录的用户名和密码，自行设置即可。</li><li><code>vhost_http_port</code> 和 <code>vhost_https_port</code> 用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。</li></ul><h3 id="运行frps服务端"><a href="#运行frps服务端" class="headerlink" title="运行frps服务端"></a>运行frps服务端</h3><p>配置完成服务端配置文件之后我们就可以运行frps的服务端了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home/frp<span class="token comment"># </span>./frps <span class="token parameter variable">-c</span> frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果看到屏幕输出一下这样的内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><pre class="line-numbers language-none"><code class="language-none">2020/04/03 22:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:70002020/04/03 22:22:39 [I] [service.go:172] http service listen on 0.0.0.0:100802020/04/03 22:22:39 [I] [service.go:193] https service listen on 0.0.0.0:104432020/04/03 22:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:75002020/04/03 22:22:39 [I] [root.go:210] Start frps success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时访问 <code>服务端IP:7500</code> 并使用自己设置的用户名密码登录，即可看到仪表板界面<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/FIRUx8.png" alt="frp服务端仪表板界面"></p><h3 id="服务端后台运行和自启"><a href="#服务端后台运行和自启" class="headerlink" title="服务端后台运行和自启"></a>服务端后台运行和自启</h3><h4 id="后台运行方法-nohup"><a href="#后台运行方法-nohup" class="headerlink" title="后台运行方法-nohup"></a>后台运行方法-nohup</h4><p>至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 <a href="https://ehlxr.me/2017/01/18/Linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/">nohup命令</a>（nohup后台程序管理或关闭相关命令可自行查询资料）将其运行在后台。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home/frp<span class="token comment"># </span><span class="token function">nohup</span> ./frps <span class="token parameter variable">-c</span> frps.ini <span class="token operator">&amp;</span><span class="token comment"># 或者</span>root@Weicools:/home/frp<span class="token comment"># </span><span class="token function">nohup</span> ./frps <span class="token parameter variable">-c</span> frps.ini <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下内容即表示正常运行</p><pre class="line-numbers language-none"><code class="language-none">nohup: ignoring input and appending output to 'nohup.out'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可先使用 <code>Ctrl+C</code> 关闭 nohup，frps依然会在后台运行，使用 <code>jobs</code> 命令查看后台运行的程序，在结果中我们可以看到frps正在后台正常运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home/frp<span class="token comment"># jobs</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Running    <span class="token function">nohup</span> ./frps <span class="token parameter variable">-c</span> frps.ini <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时访问 x.x.x.x:7500 依然可以打开仪表板界面，至此，服务端即设置完成，就可以关闭SSH窗口了。</p><h4 id="后台运行方法-systemctl"><a href="#后台运行方法-systemctl" class="headerlink" title="后台运行方法-systemctl"></a>后台运行方法-systemctl</h4><h5 id="运行服务创建"><a href="#运行服务创建" class="headerlink" title="运行服务创建"></a>运行服务创建</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home<span class="token comment"># </span><span class="token function">vim</span> /lib/systemd/system/frps.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>frps.service文件内容</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description=frps serviceAfter=network.target syslog.targetWants=network.target[Service]Type=simpleExecStart=/home/frp/frps -c /home/frp/frps.ini[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动后台服务"><a href="#启动后台服务" class="headerlink" title="启动后台服务"></a>启动后台服务</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home<span class="token comment"># </span>systemctl start frps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="开启自启动"><a href="#开启自启动" class="headerlink" title="开启自启动"></a>开启自启动</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@Weicools:/home<span class="token comment"># </span>systemctl <span class="token builtin class-name">enable</span> frps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="停止frp服务端"><a href="#停止frp服务端" class="headerlink" title="停止frp服务端"></a>停止frp服务端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先找到这个进程</span>root@Weicools:/home<span class="token comment"># </span><span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> frp<span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span>root    <span class="token number">22416</span>  <span class="token number">0.0</span>  <span class="token number">1.2</span> <span class="token number">114188</span> <span class="token number">12432</span> ?    Sl    <span class="token number">2019</span>   <span class="token number">1</span>:05 ./frps <span class="token parameter variable">-c</span> ./frps.ini<span class="token comment"># 然后kill -9 进程号</span>root@Weicools:/home<span class="token comment"># </span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">22416</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h2><p>根据设备的情况选择相应的frp程序进行<a href="https://github.com/fatedier/frp/releases">下载</a></p><p>Windows下下载和解压等步骤不再描述。假定你下载了 <code>frp_0.32.1_windows_amd64.zip</code>，将其解压在了D盘根目录下，并且将文件夹重命名为 <code>frp</code>。</p><p>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p><pre class="line-numbers language-none"><code class="language-none">[common]server_addr = x.x.x.xserver_port = 7000token = 12345678[RDP]type = tcplocal_ip = 127.0.0.1           local_port = 3389remote_port = 7001  [SMB]type = tcplocal_ip = 127.0.0.1local_port = 445remote_port = 7002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>RDP即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。</li><li>SMB即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。</li></ol><p>其中common字段下的三项即为服务端的设置。</p><ul><li><code>server_addr</code> 为服务端IP地址，填入即可。</li><li><code>server_port</code> 为服务器端口，填入你设置的端口号即可，服务端配置的 <code>bind_port</code> 例如：7000</li><li><code>token</code> 是你在服务器上设置的连接口令，原样填入即可。</li></ul><h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><p>frp实际使用时，会按照端口号进行对应的转发，原理如下图所示。</p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/gZRQkk.jpg" alt="gZRQkk"></p><p>上面 <code>frpc.ini</code> 的 <code>Remote Desktop</code> <code>SMB</code> 字段都是自己定义的规则，自定义端口对应时格式如下</p><pre class="line-numbers language-none"><code class="language-none">[xxx]type = tcplocal_ip = 127.0.0.1           local_port = 1234remote_port = 5678 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>[xxx]</code> 表示一个规则名称，自己定义，便于查询即可。</li><li><code>type</code> 表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。</li><li><code>local_port</code> 是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。</li><li><code>remote_port</code> 是该条规则在服务端开放的端口号，自己填写并记录即可。</li></ul><h3 id="运行frpc"><a href="#运行frpc" class="headerlink" title="运行frpc"></a>运行frpc</h3><p>配置完成frpc.ini后，就可以运行frpc了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用命令提示符或Powershell进入该目录下</span><span class="token builtin class-name">cd</span> D:<span class="token punctuation">\</span>frp`<span class="token comment"># 执行</span>./frpc <span class="token parameter variable">-c</span> frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行frpc程序，窗口中输出如下内容表示运行正常。</p><pre class="line-numbers language-none"><code class="language-none">2020/04/03 23:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]2020/04/03 23:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]2020/04/03 23:14:56 [I] [control.go:143] [smb] start proxy success2020/04/03 23:14:56 [I] [control.go:143] [rdp] start proxy success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。</p><h3 id="客户端后台运行及自启"><a href="#客户端后台运行及自启" class="headerlink" title="客户端后台运行及自启"></a>客户端后台运行及自启</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>frpc运行时始终有一个命令行窗口运行在前台，影响美观，我们可以使用一个批处理文件来将其运行在后台，而且可以双击执行，每次打开frpc不用再自己输命令了。<br>在任何一个目录下新建一个文本文件并将其重命名为<code>frpc.bat</code>，编辑，粘贴如下内容并保存。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token keyword">if</span> <span class="token string">"%1"</span> <span class="token operator">==</span> <span class="token string">"h"</span> goto beginmshta vbscript:createobject<span class="token punctuation">(</span><span class="token string">"wscript.shell"</span><span class="token punctuation">)</span>.run<span class="token punctuation">(</span><span class="token string">""</span>"%~nx0<span class="token string">""</span> h",0<span class="token punctuation">)</span><span class="token punctuation">(</span>window.close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token builtin class-name">exit</span>:beginREM<span class="token builtin class-name">cd</span> D:<span class="token punctuation">\</span>frpfrpc <span class="token parameter variable">-c</span> frpc.ini<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将cd后的路径更改为你的frpc实际存放的目录。</p><p>之后直接运行这个 <code>.bat</code> 文件即可启动frpc并隐藏窗口（可在任务管理器中退出）。<br>至于开机启动，把这个 .bat 文件直接扔进Windows的开机启动文件夹就好了)<br>至此，Windows客户端配置完成，之后就是你自己根据需要在frpc.ini后追加规则即可。</p><p>客户端启动后台运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./frpc <span class="token parameter variable">-c</span> frpc.ini <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> /mnt/user/moedata/frp/frpc <span class="token parameter variable">-c</span> /mnt/user/moedata/frp/frpc.ini <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端停止后台运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> frp<span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> NAS </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用NPS进行内网穿透</title>
      <link href="/20200316/intranet-penetration-by-nps/"/>
      <url>/20200316/intranet-penetration-by-nps/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="下载-NPS-程序安装"><a href="#下载-NPS-程序安装" class="headerlink" title="下载 NPS 程序安装"></a>下载 NPS 程序安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行如下命令，根据CPU架构，选择相应版本并进行下载</span><span class="token function">wget</span> https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_amd64_server.tar.gz<span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> linux_amd64_server.tar.gz<span class="token comment"># 文件夹改个名，方便使用</span><span class="token function">cp</span> <span class="token parameter variable">-r</span> linux_amd64_server nps_server<span class="token comment"># 进入nps_server</span><span class="token builtin class-name">cd</span> nps_server<span class="token comment"># 开启Nps</span>./nps start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h4 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h4><pre class="line-numbers language-none"><code class="language-none"># docker方式docker run -d --name npsserver --net=host -v /home/npsconf:/conf ffdfgdfg/nps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="nps-conf-关键配置"><a href="#nps-conf-关键配置" class="headerlink" title="nps.conf 关键配置"></a>nps.conf 关键配置</h4><pre class="line-numbers language-none"><code class="language-none"># Public password, which clients can use to connect to the server# After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.public_vkey=abcdx#webweb_host=1.2.3.4web_username=UserNameweb_password=xzyweb_port = 8012<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@WeicoolsNAS:/mnt/user/moedata/<span class="token comment">#</span><span class="token function">mkdir</span> NpsClientroot@WeicoolsNAS:/mnt/user/moedata/<span class="token comment">#</span><span class="token builtin class-name">cd</span> NpsClientroot@WeicoolsNAS:/mnt/user/moedata/NpsClient<span class="token comment">#</span><span class="token function">wget</span> https://github.com/cnlh/nps/releases/download/v0.26.6/linux_amd64_client.tar.gzroot@WeicoolsNAS:/mnt/user/moedata/NpsClient<span class="token comment">#</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> linux_amd64_client.tar.gz<span class="token comment"># 临时运行测试</span>root@WeicoolsNAS:/mnt/user/moedata/NpsClient<span class="token comment">#</span>./npc <span class="token parameter variable">-server</span><span class="token operator">=</span><span class="token number">104.36</span>.64.74:8024 <span class="token parameter variable">-vkey</span><span class="token operator">=</span>weicools@2233 <span class="token parameter variable">-type</span><span class="token operator">=</span>tcp<span class="token comment"># 后台运行</span>root@WeicoolsNAS:/mnt/user/moedata/NpsClient<span class="token comment">#</span><span class="token function">nohup</span> ./npc <span class="token parameter variable">-server</span><span class="token operator">=</span>weicools.tk:8024 <span class="token parameter variable">-vkey</span><span class="token operator">=</span>weicools@2233 <span class="token parameter variable">-type</span><span class="token operator">=</span>tcp<span class="token function">nohup</span> ./npc <span class="token parameter variable">-server</span><span class="token operator">=</span>weicools.tk:8024 <span class="token parameter variable">-vkey</span><span class="token operator">=</span>weicools@12138 <span class="token parameter variable">-type</span><span class="token operator">=</span>tcp<span class="token function">nohup</span> ./npc <span class="token parameter variable">-server</span><span class="token operator">=</span><span class="token number">104.36</span>.64.74:8024 <span class="token parameter variable">-vkey</span><span class="token operator">=</span>weicools@2233 <span class="token parameter variable">-type</span><span class="token operator">=</span>tcp<span class="token function">nohup</span> ./npc <span class="token parameter variable">-server</span><span class="token operator">=</span><span class="token number">104.36</span>.64.74:8024 <span class="token parameter variable">-vkey</span><span class="token operator">=</span>weicools@12138 <span class="token parameter variable">-type</span><span class="token operator">=</span>tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NPS-开机自启"><a href="#NPS-开机自启" class="headerlink" title="NPS 开机自启"></a>NPS 开机自启</h3><h4 id="群晖"><a href="#群晖" class="headerlink" title="群晖"></a>群晖</h4><blockquote><p><a href="https://www.jianshu.com/p/2f4d13636e38">https://www.jianshu.com/p/2f4d13636e38</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">Weicools@WeicoolsSyno:~$ sudo -ivi /usr/syno/etc.defaults/rc.sysv/autonps.shinput: /var/services/homes/Weicools/NpsClient/./npc -server=weicools.tk:8024 -vkey=weicools@12138 -type=tcpvi /etc/rcinput(:$):# Auto start nps client/usr/syno/etc.defaults/rc.sysv/autonps.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Unraid"><a href="#Unraid" class="headerlink" title="Unraid"></a>Unraid</h4><p><a href="https://www.vediotalk.com/archives/4184">https://www.vediotalk.com/archives/4184</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> NAS </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口号占用解决方法</title>
      <link href="/20200306/port-number-occupy-solution/"/>
      <url>/20200306/port-number-occupy-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="端口号占用解决方法"><a href="#端口号占用解决方法" class="headerlink" title="端口号占用解决方法"></a>端口号占用解决方法</h1><h2 id="Linux-端口号占用解决方法"><a href="#Linux-端口号占用解决方法" class="headerlink" title="Linux 端口号占用解决方法"></a>Linux 端口号占用解决方法</h2><h3 id="查询端口号"><a href="#查询端口号" class="headerlink" title="查询端口号"></a>查询端口号</h3><ol><li>使用<code>netstat</code>命令<br>netstat -tunlp 会显示所有端口和所有对应的程序，如果像得到自己关系的结果，可以使用 grep 对结果集进行过滤。例如：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tunlp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就能过滤出只带有 java 进程的所有端口被占用的情况。</p><span id="more"></span><ol start="2"><li>使用<code>lsof -i:某个端口</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看22号端口被占用的程序</span><span class="token function">lsof</span> <span class="token parameter variable">-i:22</span><span class="token comment"># 通过上述命令，可以查看到相应的进程号，如果还想查看该进程的详细信息可以使用：</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> 进程号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token parameter variable">-9</span> PID号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="windows-端口占用解决方法"><a href="#windows-端口占用解决方法" class="headerlink" title="windows 端口占用解决方法"></a>windows 端口占用解决方法</h2><p>查看所有的端口占用情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-ano</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找指定端口的占用情况<br>例如查找 8080 端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-ano</span> <span class="token operator">|</span> findstr <span class="token string">"8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过查找端口号就能找到相应的进程号，通过查找相应的进程号就能找到相应进程的详细信息<br>查看对应 PID 对应的进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tasklist <span class="token operator">|</span> findstr <span class="token string">"5555"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 tasklist 可以列出具体的进程信息<br>通过进程名，停止进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">taskkill /f /t /im xxx.exetaskkill <span class="token parameter variable">-PID</span> <span class="token operator">&lt;</span>进程号<span class="token operator">&gt;</span> <span class="token parameter variable">-F</span> //强制关闭某个进程 ，例如：taskkill <span class="token parameter variable">-PID</span> <span class="token number">5555</span> <span class="token parameter variable">-F</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android TabLayout</title>
      <link href="/20200225/android-widget-tablayout/"/>
      <url>/20200225/android-widget-tablayout/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Android-TabLayout"><a href="#Android-TabLayout" class="headerlink" title="Android TabLayout"></a>Android TabLayout</h1><h2 id="优雅地修改指示器宽度"><a href="#优雅地修改指示器宽度" class="headerlink" title="优雅地修改指示器宽度"></a>优雅地修改指示器宽度</h2><p>在开发过程中，经常会碰到把指示器的宽度，做的和文字宽度一样，或者比文字宽度还要短的设计。使用 TabLayout 我们可以快速实现一个 Material Design 风格的标签栏，但 TabLayout 的指示线 Indicator 默认是占满一格 Tab 的，且官方未直接提供修改 Indicator 宽度的方法。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>如果你的项目中也有修改指示线宽度的需求，并且已经在网上找过修改方法，很可能你现在项目中用的就是这个方法。通过分析源码用反射实现的，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIndicatorWidth</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">TabLayout</span> tabLayout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> margin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tabLayout<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Field</span> mTabStripField <span class="token operator">=</span> tabLayout<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mTabStrip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mTabStripField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">LinearLayout</span> mTabStrip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinearLayout</span><span class="token punctuation">)</span> mTabStripField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tabLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mTabStrip<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">View</span> tabView <span class="token operator">=</span> mTabStrip<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Field</span> mTextViewField <span class="token operator">=</span> tabView<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mTextView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mTextViewField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">TextView</span> mTextView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> mTextViewField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tabView<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tabView<span class="token punctuation">.</span><span class="token function">setPadding</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> width <span class="token operator">=</span> mTextView<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mTextView<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        width <span class="token operator">=</span> mTextView<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">)</span> tabView<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>                    params<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> margin<span class="token punctuation">;</span>                    params<span class="token punctuation">.</span>rightMargin <span class="token operator">=</span> margin<span class="token punctuation">;</span>                    tabView<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tabView<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做是在 28 以下没问题的，但如果把项目的 SDK 升级到 28 或以上，它就不再有效了，原因是 TabLayout 源码中的变量名修改了，所以代码也要改成这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIndicatorWidth</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">TabLayout</span> tabLayout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> margin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tabLayout<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Field</span> slidingTabIndicatorField <span class="token operator">=</span> tabLayout<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"slidingTabIndicator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                slidingTabIndicatorField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">LinearLayout</span> mTabStrip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinearLayout</span><span class="token punctuation">)</span> slidingTabIndicatorField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tabLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mTabStrip<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">View</span> tabView <span class="token operator">=</span> mTabStrip<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Field</span> textViewField <span class="token operator">=</span> tabView<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"textView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    textViewField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">TextView</span> mTextView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> textViewField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tabView<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tabView<span class="token punctuation">.</span><span class="token function">setPadding</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> width <span class="token operator">=</span> mTextView<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mTextView<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        width <span class="token operator">=</span> mTextView<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinearLayout<span class="token punctuation">.</span>LayoutParams</span><span class="token punctuation">)</span> tabView<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    params<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>                    params<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> margin<span class="token punctuation">;</span>                    params<span class="token punctuation">.</span>rightMargin <span class="token operator">=</span> margin<span class="token punctuation">;</span>                    tabView<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tabView<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过反射虽然可以实现，但是反射不够优雅，并且它有可能因为 SDK 的升级而失效。</p><h3 id="自定义-Tab"><a href="#自定义-Tab" class="headerlink" title="自定义 Tab"></a>自定义 Tab</h3><p>TabLayout 中的 Tab 是允许自定义的，但 Indicator 不属于 Tab。<br>所以有这样一种解决方案，把 Indicator 隐藏掉，然后在自定义 Tab 的布局中加入指示线。<br>我们可以通过把 Indicator 的颜色设为透明来隐藏它：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>tabIndicatorColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/transparent<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在代码中，当 Tab 添加完毕后，替换成自定义的 Tab：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab <span class="token operator">=</span> tabLayout<span class="token punctuation">.</span><span class="token function">getTabAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function">setCustomView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_tab<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TextView</span> tv <span class="token operator">=</span> tab<span class="token punctuation">.</span><span class="token function">getCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text_view<span class="token punctuation">)</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并且还需要监听 Tab 的切换，控制指示线的显示隐藏：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">tabLayout<span class="token punctuation">.</span><span class="token function">addOnTabSelectedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TabLayout<span class="token punctuation">.</span>OnTabSelectedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTabSelected</span><span class="token punctuation">(</span><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO 刷新Tab</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTabUnselected</span><span class="token punctuation">(</span><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO 刷新Tab</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTabReselected</span><span class="token punctuation">(</span><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用这种方法，什么样式都能实现了。但有个缺点是: 在 Tab 切换的时候，没有了指示线的移动动画。</p><h3 id="Support-v28-属性配置"><a href="#Support-v28-属性配置" class="headerlink" title="Support v28+ 属性配置"></a>Support v28+ 属性配置</h3><p>如果你使用的 SDK 版本是 28 或以上，并且需要将 Indicator 的宽度修改成和文字宽度一样，那么太棒了，现在你只需要给 TabLayout 配置一个属性就好了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>tabIndicatorFullWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 tabIndicatorFullWidth 取 false 的时候，Indicator 的宽度会和文字的宽度一样，但这也意味着，当不同 Tab 里的文字宽度不一样时，Indicator 的宽度也会不一样，像下面这样。</p><p>//todo 贴图</p><p>如果设计要求 Indicator 的宽度必须固定，或者宽度要比文字短，那我们还要接着找别的解决方案。</p><h3 id="使用-Drawable-样式"><a href="#使用-Drawable-样式" class="headerlink" title="使用 Drawable 样式"></a>使用 Drawable 样式</h3><p>这种方案可能是最优雅的解决方案，使用也特别简单。<br>Indicator 是允许我们设置 drawable 来自定义样式的，比如添加圆角什么的。但无论什么样式，Indicator 依然是占满 Tab 宽度的。没关系，我们把它的背景设成透明，包含一个固定宽度的 shape 就好了，像这样：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span>                <span class="token attr-name"><span class="token namespace">android:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span> <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4dp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/colorAccent<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer-list</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在布局文件中配置 tabIndicator 属性：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- app:tabIndicator 需要升级Support库到v28 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.design.widget.TabLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>tabIndicatorHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>tabIndicator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/tab_indicator<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在代码中设置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// setSelectedTabIndicator 需要升级Support库到v28</span>tabLayout<span class="token punctuation">.</span><span class="token function">setSelectedTabIndicator</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>tab_indicator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面这个例子还可以发现，使用这个方法，不仅可以在视觉上增加 Indicator 的左右边距，还可以增加它的上下边距。</p><p>好啦，其实就是配置一个 Drawable 文件这么简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Widget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IADB 扩展</title>
      <link href="/20200106/iadb/"/>
      <url>/20200106/iadb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IADB-工具"><a href="#IADB-工具" class="headerlink" title="IADB 工具"></a>IADB 工具</h1><p>ADB 扩展工具</p><p>含义：i adb &amp;&amp; IA Debug Bridge<br>实现步骤：</p><ol><li>Shell 脚本：iadb.sh（调用 adb 命令）</li><li>二进制程序：iadb（使用 shc 封装成可执行程序）<span id="more"></span></li></ol><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/Ns2t4O.png"></p><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数 1"></a>参数 1</h2><table><thead><tr><th>Param</th><th>AppName</th><th>PackageName</th></tr></thead><tbody><tr><td>sp</td><td>SpaceK</td><td>com.oneapp.max.cleaner.booster.cn</td></tr><tr><td>op</td><td>Optimizer-K</td><td>com.oneapp.max.cn</td></tr><tr><td>pp</td><td>PPP-K</td><td>com.oneapp.max.security.pro.cn</td></tr><tr><td>wa</td><td>Walk-K</td><td>Com.walk.sports.cn</td></tr></tbody></table><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数 2"></a>参数 2</h2><table><thead><tr><th>Param</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>rp</td><td>Revoke Permissions</td><td></td></tr><tr><td>rp-r</td><td>Revoke Permissions and Restart</td><td></td></tr><tr><td>uninstall</td><td>Uninstall App</td><td></td></tr><tr><td>kill</td><td>Kill App</td><td></td></tr><tr><td>start</td><td>Start App</td><td></td></tr><tr><td>restart</td><td>Restart App</td><td></td></tr><tr><td>clear</td><td>Clear App Data</td><td></td></tr><tr><td>clear-r</td><td>Clear App Data and&nbsp;Restart</td><td></td></tr></tbody></table><h3 id="Revoke-Permissions"><a href="#Revoke-Permissions" class="headerlink" title="Revoke Permissions"></a>Revoke Permissions</h3><h3 id="Revoke-Permissions-and-Restart"><a href="#Revoke-Permissions-and-Restart" class="headerlink" title="Revoke Permissions and Restart"></a>Revoke Permissions and Restart</h3><h3 id="Uninstall-App"><a href="#Uninstall-App" class="headerlink" title="Uninstall App"></a>Uninstall App</h3><pre class="line-numbers language-none"><code class="language-none">adb uninstall [-k] &lt;packagename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录</packagename></p><h3 id="Kill-App"><a href="#Kill-App" class="headerlink" title="Kill App"></a>Kill App</h3><h3 id="Start-App"><a href="#Start-App" class="headerlink" title="Start App"></a>Start App</h3><h3 id="Restart-App"><a href="#Restart-App" class="headerlink" title="Restart App"></a>Restart App</h3><h3 id="Clear-App-Data"><a href="#Clear-App-Data" class="headerlink" title="Clear App Data"></a>Clear App Data</h3><pre class="line-numbers language-none"><code class="language-none">adb shell pm clear &lt;packagename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;packagename&gt;</code> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」</p><h3 id="Clear-App-Data-and-Restart"><a href="#Clear-App-Data-and-Restart" class="headerlink" title="Clear App Data and&nbsp;Restart"></a>Clear App Data and&nbsp;Restart</h3><p>脚本的好处是便捷、高效，拿起来就可以写，写完就能跑，都不用编译</p><p>但坏处也显而易见，一些敏感的、不想让外人知道的东西都是明文写在里面的，所以，在这推荐一款神奇的脚本封装程序——shc：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> shc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日常用法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shc <span class="token parameter variable">-r</span> <span class="token parameter variable">-f</span> /shellfile.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行成功后会在当前目录下生成两个文件：</p><pre class="line-numbers language-none"><code class="language-none">shellfile.sh.xshellfile.sh.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>shellfile.sh.x</code>是脚本所对应的可执行程序</p><p><code>shellfile.sh.c</code>是<code>shellfile.sh.x</code>对应的 c 语言实现的源码</p><p>shc 根据脚本文件的第一行<code>#!/bin/bash</code>或其他 shell 将脚本翻译成相应的 c 源码并生成可执行程序。</p><p>但 shc 似乎无法识别 expect</p><p>封装后的脚本安全性会有所提高，但这也仅能防个君子，通过 gdb 或其他调试工具仍然能获得最初的源码</p><p>test adb</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Talk-With-Moe</title>
      <link href="/20191222/talk-with-moe/"/>
      <url>/20191222/talk-with-moe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Talk-With-Me"><a href="#Talk-With-Me" class="headerlink" title="Talk With Me"></a>Talk With Me</h1><p>啦啦啦啦啦略略略略略啦啦啦啦啦略略略略略啦啦啦啦啦略略略略略啦啦啦啦啦略略略略略啦啦啦啦啦略略略略略，此处省略一万字……</p><span id="more"></span><h3 id="最高境界是：每一句都有聊下去的欲望"><a href="#最高境界是：每一句都有聊下去的欲望" class="headerlink" title="最高境界是：每一句都有聊下去的欲望"></a>最高境界是：每一句都有聊下去的欲望</h3><p>毕竟，和人尬聊，不是一件光彩的事，聊天过程中，请你们谨记</p><p>“三不”心法：</p><ul><li>不要跪舔</li><li>不要表白</li><li>不要玻璃心</li></ul><h3 id="朋友圈打造"><a href="#朋友圈打造" class="headerlink" title="朋友圈打造"></a>朋友圈打造</h3><p>在讲聊天之前，有一件很重要却又非常容易被忽视的事情——朋友圈打造。WHAT？</p><p>几乎每一个人添加好友之后，第一件事就是去翻看浏览对方的朋友圈。翻看完后，都会在心里给这个人打一个印象分。</p><p>可以说，朋友圈是我们社交的第二身份证。WHAT？？</p><h3 id="一、知己知彼"><a href="#一、知己知彼" class="headerlink" title="一、知己知彼"></a>一、知己知彼</h3><p>即“了解他是什么样的人，了解自己想成为什么样的人”。</p><p>最起码，你需要了解他的基本性格：<br>活泼开朗？<br>内敛羞涩？<br>沉默寡言？<br>风趣幽默？<br>睿智健谈？</p><p>一般情况下，他是什么类型的人，也决定了他<strong>对什么样的女子感兴趣</strong></p><p>了解了对方，你还需要知道自己想成为什么样的人。</p><p>不建议一个女生为了讨好男生，去伪装成他喜欢的样子，而失去自我。</p><p>一来你也装不了多久；<br>二来用你的个性去吸引他，比装出他喜欢的样子更能维持长久的感情。</p><h3 id="二、聊天方法论"><a href="#二、聊天方法论" class="headerlink" title="二、聊天方法论"></a>二、聊天方法论</h3><h4 id="1、节奏：循次渐近"><a href="#1、节奏：循次渐近" class="headerlink" title="1、节奏：循次渐近"></a>1、节奏：循次渐近</h4><p>聊天就是沟通，沟通就是你来我往的事情。</p><p>好多人，一激动起来就自嗨，唧唧哇哇说一大堆，问一大堆问题，这样会让人没有聊下去的欲望。</p><h4 id="2、气氛：语言轻快、舒服、幽默"><a href="#2、气氛：语言轻快、舒服、幽默" class="headerlink" title="2、气氛：语言轻快、舒服、幽默"></a>2、气氛：语言轻快、舒服、幽默</h4><p>一定要有表情包！x 3<br>什么表情包？要可爱、有趣、小暧昧！</p><h4 id="3、话题：要学会“冷读术”。"><a href="#3、话题：要学会“冷读术”。" class="headerlink" title="3、话题：要学会“冷读术”。"></a>3、话题：要学会“冷读术”。</h4><p>冷读他的基本信息：头像、昵称、个性签名，尤其是朋友圈！</p><p>还可以通过其他途径打听，以及他在聊天时透露的信息。</p><p>聊天最重要的还是从“兴趣”切入。</p><p>我总结了男女之间能聊的兴趣点大抵是这 5 个：</p><pre class="line-numbers language-none"><code class="language-none">运动、旅游、健身、美食、学习<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>聊工作行不行？<br>不建议聊太多工作，因为很多时候聊工作都在<code>抱怨</code>，而且很容易把聊天氛围聊成<code>商业会谈</code></p><p>另外，你朋友圈发的内容，他点赞或评论了，说明这个话题引起了他的注意。</p><h3 id="禁忌"><a href="#禁忌" class="headerlink" title="禁忌"></a>禁忌</h3><h4 id="不要聊不擅长的内容"><a href="#不要聊不擅长的内容" class="headerlink" title="不要聊不擅长的内容"></a>不要聊不擅长的内容</h4><p>很容易陷入尬聊</p><h4 id="不要一本正经的说废话"><a href="#不要一本正经的说废话" class="headerlink" title="不要一本正经的说废话"></a>不要一本正经的说废话</h4><p>说回他喜欢篮球，有些女生这样聊：运动挺好的／运动有益健康／多运动不错／你除了爱打篮球还爱做什么运动……</p><p>来来去去都是说这几句客套话</p><h3 id="学会拓展话题。这很重要！"><a href="#学会拓展话题。这很重要！" class="headerlink" title="学会拓展话题。这很重要！"></a>学会拓展话题。这很重要！</h3><p>还是说回他喜欢篮球，你可以这样聊：</p><p>篮球我是真不懂，不过以前读书我们班篮球倒是拿了年级第 2 名，反正我就跟着那些女生们一起傻傻的尖叫、鼓掌，哈哈哈哈哈哈 ／你打篮球时是不是也有一帮女粉丝啊？／你是 mvp 吗？／有机会带我去目睹一下你在球场上的英姿才行呐～<br>篮球我是真不懂，我比较喜欢打羽毛球，你会不会打？／哎呦，看来我遇到大神了！／大神求带！／pk 吗？赢了请你吃饭，敢不敢？<br>篮球我是真不懂，我运动细胞为零～我小时候……／你看起来很爱运动，我想我是因为一直没有一个好的教练带我才那么烂／老师求带！<br>……（记得要配合表情使用，可爱有趣的表情。）</p><p>聊天，不一定要局限于这个“话题的深度”，可以拓展“话题的广度”。<br>比如聊篮球不是一定要去哪场比赛谁输谁赢、哪个球星怎样，而是能从我们生活熟悉的场景切入去拓展。</p><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><p>聊天技巧只不过是辅助工具，前提是要有一个真诚的心。</p><p>聊天的技巧非常非常多：讲故事，冷读，找共性，夸奖与请教，魅力值展示（让他追逐你），调戏，曲解，切断兴趣，借题发挥，寻找漏洞，破框架，推拉，情感过山车，列框架，惩罚，奖励……</p><p>我讲几点非常重要的内容！</p><h4 id="1-引起他的好奇心"><a href="#1-引起他的好奇心" class="headerlink" title="1. 引起他的好奇心"></a>1. 引起他的好奇心</h4><pre class="line-numbers language-none"><code class="language-none">讲故事：你：哈哈哈哈哈 你让我想起了一件事很有意思的事。男：什么事？你：我……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>讲故事是你的加分项</strong>，是很好展示你魅力值的机会，让他对你又一个深入的了解。不一定是你多美多优秀，可以说是你很好玩，你对人对事的心态、观点和想法等等。</p><pre class="line-numbers language-none"><code class="language-none">冷读+切断兴趣+调戏：你：我发现你有三个优点。（冷读）男：说来看看你：我不（切断兴趣），要不你给我发一个红包，我就告诉你一个。（调戏，不是真的要，只是一种思路）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-建立亲和感"><a href="#2-建立亲和感" class="headerlink" title="2. 建立亲和感"></a>2. 建立亲和感</h4><p>找共性：<br>有意无意的透露出你跟他有共同点<br>比如你知道他喜欢健身，你偶尔发你健身的朋友圈；当他问你在干嘛，你说：“刚健身回来，最近有点小偷懒了，跟不上了。”</p><p>认同他<br>夸奖与请教、魅力值展示（让他追逐你）</p><h4 id="3-幽默缓解尴尬"><a href="#3-幽默缓解尴尬" class="headerlink" title="3. 幽默缓解尴尬"></a>3. 幽默缓解尴尬</h4><p>借题发挥：</p><pre class="line-numbers language-none"><code class="language-none">比如你跟他聊星座男：星座都是骗人的，还那么多人信。你：爱情也是骗人的，也那么多人谈呢。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借机调侃：</p><pre class="line-numbers language-none"><code class="language-none">女：天天加班吗？男：没有，天天加班会猝死女：求生欲很强啊！！（如果你回“要注意身体”，那就很无趣了。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>破框架：</p><pre class="line-numbers language-none"><code class="language-none">如果你说的东西，他不感兴趣或者沉默你：没关系，我知道你智商比较低，跟不上我。哈哈哈哈哈哈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>曲解：</p><pre class="line-numbers language-none"><code class="language-none">当有人在大家面前猛夸你漂亮，你可以说：胖子的春天来了吗？）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-建立暧昧"><a href="#4-建立暧昧" class="headerlink" title="4. 建立暧昧"></a>4. 建立暧昧</h4><p>这是非常非常重要的一个内容！！这个内容里最重要的精髓在于：<strong>引导约会见面</strong></p><p>列框架+惩罚他：</p><pre class="line-numbers language-none"><code class="language-none">男：不好意思，昨晚睡着了，没看到信息。你：我还以为你打算失踪了呢+嘟嘴不满的表情男：不会啦你：以后睡前要说晚安，不如有人会瞎等的。（列框架）男：嗯，好的你：罚～得罚你……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>奖励他：</p><pre class="line-numbers language-none"><code class="language-none">你帮我打游戏，赢了10局请你吃饭pk吗？赢了请你吃饭这么厉害？我不信，你要是真赢了，我请你吃饭。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>夸奖与请教：</p><pre class="line-numbers language-none"><code class="language-none">这么厉害！哇！大神求带！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>魅力值展示（让他追逐你）：</p><pre class="line-numbers language-none"><code class="language-none">你展示魅力值时，当你发现他感兴趣或者夸赞你，你可以引导他追逐你。比如你去一个很漂亮的地方旅游，- 他说：不错哦，风景很漂亮，人更漂亮- 你可以说：是不是很漂亮，很值得一去哦～我计划下次去xx，要是有机会一起去玩啊！再比如他觉得你羽毛球打得很好- 你可以说：多打多练你也可以哦～下次约一次打咯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>曲解：</p><pre class="line-numbers language-none"><code class="language-none">男：今天天气很好女：那当然，也不看看是跟谁出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调戏+切断兴趣</p><pre class="line-numbers language-none"><code class="language-none">你：你看我在干嘛+美食图片+想不想吃男：想啊，打包女：想的美，不给，100一块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立暧昧是非常非常重要的一个内容，一个个暧昧的种子种下，是为了接下来的<strong>开花结果</strong></p><h4 id="5-最后，主动结束话题"><a href="#5-最后，主动结束话题" class="headerlink" title="5. 最后，主动结束话题"></a>5. 最后，主动结束话题</h4><p>在聊的很嗨的时候，主动结束话题，让他一个晚上都意犹未尽，你就成功了。</p><p>特别注意 ⚠️ ：千万不要去争论、较真！ 这会显得你不好相处。</p><h3 id="不适用"><a href="#不适用" class="headerlink" title="不适用"></a>不适用</h3><p>厌烦，不搭理</p>]]></content>
      
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Resource 金银区别</title>
      <link href="/20191216/android-resource-refs/"/>
      <url>/20191216/android-resource-refs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="和-？符号的引用区别"><a href="#和-？符号的引用区别" class="headerlink" title="@ 和 ？符号的引用区别"></a>@ 和 ？符号的引用区别</h3><p>在 Android 项目开发中，我们经常会用 <code>@</code> 或 <code>?</code> 符号去引用系统或者我们应用内添加的资源，这两种符号的引用有什么区别呢，<code>?attr/</code> 与 <code>?android:attr/</code> 之间又有怎样的不同呢？本文我们不妨闲聊一下。</p><p> <code>@</code> 与 <code>?</code> 符号的引用在使用时都有一个规范的格式：<code>@[+][package:]type:name</code> , <code>?[package:][type:]name</code> 可以看到，二者均包含引用符号、资源所属的包、资源类型和资源名称。</p><h4 id="资源引用"><a href="#资源引用" class="headerlink" title="@ 资源引用"></a>@ 资源引用</h4><p><code>@</code> 符号用于引用系统和我们在项目中添加的一些固有资源（drawable，string 等），或者定义的 style 样式。比如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:text="@string/app_name"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 app_name 就是我们自己定义在项目文件 <code>values/strings.xml</code> 中的字符串资源。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:text="@android:string/cancel"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而这里的 cancel 属于 Android SDK 中的系统字符串资源，所以需要添加 <code>@android:</code> 来指明引用来源。</p><h4 id="属性引用"><a href="#属性引用" class="headerlink" title="? 属性引用"></a>? 属性引用</h4><p><code>?</code> 符号用于引用当前主题中定义的一些属性值。注意， <code>?</code> 符号通过属性名字间接引用当前主题中的对应属性值，而不是属性本身。举个例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:divider="?android:listDivider"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 “?” 符号通过属性名 android:listDivider 间接获取当前主题赋予该属性的值。如同 <strong>@android:</strong> 一般，**?android:** 表示该值源自 Android SDK 系统属性。由于在当前主题中寻找对应属性名的值，所以没有指定属性类型，其实等同于：**?android:attr/listDivider**。</p><p>那如何引用项目中自定义的属性呢？我们在 <code>attrs.xml</code> 中定义一个属性，如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;declare-styleable name="CustomTextView"&gt;    &lt;attr name="colorTextCustom" format="reference|color"/&gt;&lt;/declare-styleable&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显然，此时我们定义的 colorTextCustom 属性是没有值的，直接引用没有任何作用。需要在主题 style 中赋值：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style name="BaseTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt;    &lt;item name="colorTextCustom"&gt;#FF0000&lt;/item&gt;&lt;/style&gt;&lt;style name="AppTheme" parent="BaseTheme"&gt;    &lt;item name="android:textColor"&gt;?colorTextCustom&lt;/item&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里在 BaseTheme 中对 colorTextCustom 属性赋值，并在 AppTheme 中通过 “?colorTextCustom” 引用该属性值。由于是本地项目中定义的属性，所以没有添加 <strong>android:</strong> 命名空间。其实，这种做法的好处是，AppTheme 所覆盖的 View 均可通过构造函数获取当前主题中的 colorTextCustom 属性值。</p><h4 id="R-attr-amp-R-style"><a href="#R-attr-amp-R-style" class="headerlink" title="R.attr &amp; R.style"></a>R.attr &amp; R.style</h4><p>Android SDK 中定义有很多属性和主题可供使用，详见官方文档：<a href="https://developer.android.com/reference/android/R.attr.html">R.attr</a> &amp; <a href="https://developer.android.com/reference/android/R.style.html">R.style</a>。使用系统资源的好处就是，满足不同系统的适配需求，较为灵活。</p><p>这里举几个常用的：</p><p><strong>style=”?android:attr/borderlessButtonStyle”</strong></p><p>Android 5.0 默认 Button 的样式自带边框阴影，可以使用这个系统样式去除该样式。当然，这是单独设置时的操作，为了方便全局控制，可以在 <code>styles.xml</code> 中自定义一个样式，继承一个无边框样式作为 parent：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style name="CustomBorderlessButtonStyle" parent="@style/Widget.AppCompat.Button.Borderless"&gt;    &lt;item name="android:textColor"&gt;@android:color/white&lt;/item&gt;    ...&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>android:background=”?android:attr/selectableItemBackground”</strong></p><p>可用于设置一些 List Item、Button 之类带点击效果的背景。该样式自带触摸点击效果，在 5.0 和更高版本上，更是附有 Ripple 涟漪效果，省去我们自己实现 selector 选择器的过程。当然我们也可以自己使用 <code>&lt;ripple&gt;</code> 标签定义一个 drawable 文件实现涟漪效果，只是需要注意版本限制。这里举个例子，使用 <code>&lt;ripple&gt;</code> 标签创建一个类似 FloatingActionButton 样式的按钮（minSdkVersion 为 21）：</p><p>新建 res/drawable/shape_ripple.xml 文件，构建类似 FAB 形状：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"&gt;    &lt;corners android:radius="48dp"/&gt;    &lt;solid android:color="@android:color/white" /&gt;&lt;/shape&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 res/drawable/ripple_fab.xml 文件，构建 ripple 触摸效果：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;ripple android:color="@android:color/darker_gray" xmlns:android="http://schemas.android.com/apk/res/android"&gt;    &lt;item android:drawable="@drawable/shape_fab"&gt;&lt;/item&gt;&lt;/ripple&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应用在 layout 文件中的 Button 控件中：</p><pre class="line-numbers language-none"><code class="language-none">&lt;Button    android:layout_width="56dp"    android:layout_height="56dp"    android:minHeight="0dp"    android:minWidth="0dp"    android:text="+"    android:textSize="40sp"    android:gravity="center"    android:background="@drawable/ripple_fab"    app:elevation="1dp"    android:fontFamily="sans-serif-light"    android:layout_alignParentEnd="true"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于这样的处理，最终运行时的效果如图：</p><p><img src="http://blog.ancard.top/1491399243.gif" alt="img"></p><p><strong>android:background=”?android:attr/dividerVertical”</strong></p><p>实现分割线背景。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android TextView</title>
      <link href="/20181210/android-widget-textview/"/>
      <url>/20181210/android-widget-textview/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Autosizing-TextView"><a href="#Autosizing-TextView" class="headerlink" title="Autosizing TextView"></a>Autosizing TextView</h2><p>使用 Android 8.0（API 级别 26）及更高版本，可以让 <code>TextView</code>文本大小自动扩展或收缩，以根据其<code>TextView</code>特征和边界填充其布局 。此设置可以更轻松地使用动态内容优化不同屏幕上的文本大小。</p><p>Support Library 26.0 完全支持 <code>TextView</code>在 Android 8.0（API 级别 26）之前运行 Android 版本的设备上的自动调整功能。该库提供对 Android 4.0（API 级别 14）及更高版本的支持。该<code>android.support.v4.widget</code> 软件包含<code>TextViewCompat</code>以向后兼容方式访问功能的类</p><span id="more"></span><h3 id="设置-TextView-自动调整大小"><a href="#设置-TextView-自动调整大小" class="headerlink" title="设置 TextView 自动调整大小"></a>设置 TextView 自动调整大小</h3><p>可以使用框架或支持库以 <code>TextView</code>编程方式或以 XML 格式设置自动调整大小。要设置 XML 属性，还可以使用 Android Studio 中的“ <strong>属性”</strong>窗口。</p><p>有三种方法可以设置自动调整 <code>TextView</code>：<a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#default">默认</a>, <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#granularity">粒度</a>, <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#preset-sizes">预设尺寸</a></p><p><strong>注</strong>：如果设置在一个 XML 文件自动调整大小，不建议使用值“WRAP_CONTENT”为 <code>layout_width</code>或<code>layout_height</code>的属性<code>TextView</code>。它可能会产生意外的结果。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认设置允许<code>TextView</code>在水平轴和垂直轴上均匀地自动调整刻度。</p><ul><li><p>要以 Code 方式定义默认设置，请调用 <code>setAutoSizeTextTypeWithDefaults(int autoSizeTextType)</code> 方法。提供 <code>AUTO_SIZE_TEXT_TYPE_NONE</code> 关闭自动调整功能或<code>AUTO_SIZE_TEXT_TYPE_UNIFORM</code>均匀缩放水平轴和垂直轴。</p></li><li><p><strong>注</strong>：为统一缩放的默认尺寸<code>minTextSize = 12sp</code>， <code>maxTextSize = 112sp</code>以及 <code>granularity = 1px.</code></p></li><li><p>要在 XML 中定义默认设置，请使用<code>android</code>命名空间并将<code>autoSizeTextType</code>属性设置为 <code>none</code> 或 <code>uniform</code></p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用支持库"><a href="#使用支持库" class="headerlink" title="使用支持库"></a>使用支持库</h4><ul><li><p>要通过支持库以编程方式定义默认设置，请调用该<code>TextViewCompat.setAutoSizeTextTypeWithDefaults(TextView textview, int autoSizeTextType)</code> 方法。提供<code>TextView</code>窗口小部件的实例和其中一种文本类型，例如 <code>TextViewCompat.AUTO_SIZE_TEXT_TYPE_NONE</code>或<code>TextViewCompat.AUTO_SIZE_TEXT_TYPE_UNIFORM</code>。</p></li><li><p>要通过支持库在 XML 中定义默认设置，请使用 <code>app</code>命名空间并将<code>autoSizeTextType</code> 属性设置为 <code>none</code> or <code>uniform</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="粒度"><a href="#粒度" class="headerlink" title="粒度"></a>粒度</h3><p>可以定义最小和最大文本大小的范围以及指定每个步骤大小的维度。的 <code>TextView</code>均匀的最小和最大尺寸的属性之间的范围内的鳞片。每个增量按粒度属性中设置的步长进行。</p><ul><li><p>要以编程方式定义文本大小范围和维度，请调用该 <code>setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit)</code> 方法。提供最大值，最小值，粒度值和任何<code>TypedValue</code>维度单位。</p></li><li><p>要在 XML 中定义一系列文本大小和维度，请使用<code>android</code>命名空间并设置以下属性：</p><ul><li>将 <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeText"><code>autoSizeText</code></a> 属性设置为* none <em>或</em> uniform<em>。</em>none* 是默认值，<em>uniform <em>可以 <code>TextView</code>在水平和垂直轴上</em>均匀</em>缩放。</li><li>设置 <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeMinTextSize"><code>autoSizeMinTextSize</code></a>， <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeMaxTextSize"><code>autoSizeMaxTextSize</code></a> 和 <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeStepGranularity"><code>autoSizeStepGranularity</code></a> 属性以定义自动调整大小的维度 <code>TextView</code>。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeMinTextSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12sp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeMaxTextSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100sp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeStepGranularity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2sp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用支持库-1"><a href="#使用支持库-1" class="headerlink" title="使用支持库"></a>使用支持库</h4><ul><li><p>要通过支持库以编程方式定义文本大小范围和维度，请调用该<code>TextViewCompat.setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit)</code> 方法。提供最大值，最小值，粒度值和任何<code>TypedValue</code>维度单位。</p></li><li><p>要定义范围的文本大小，并通过支持库中的 XML 格式的尺寸，使用的<code>app</code>命名空间和设置 <code>autoSizeText</code>，<code>autoSizeMinTextSize</code>， <code>autoSizeMaxTextSize</code>，和 <code>autoSizeStepGranularity</code>布局 XML 文件中的属性。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeMinTextSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12sp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeMaxTextSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100sp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeStepGranularity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2sp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="预设尺寸"><a href="#预设尺寸" class="headerlink" title="预设尺寸"></a>预设尺寸</h3><p>预设尺寸允许您指定<code>TextView</code>自动调整文本大小时选择的所有值 。</p><ul><li><p>要使用预设大小以<code>TextView</code>编程方式设置自动调整大小 ，请调用该<code>setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit)</code> 方法。为尺寸提供尺寸和任何<code>TypedValue</code> 尺寸单位的数组。</p></li><li><p>要使用预设大小设置 <code>TextView</code> XML 的自动调整大小，请使用<code>android</code>命名空间并设置以下属性：</p><ul><li>将 <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeText"><code>autoSizeText</code></a> 属性设置为* none <em>或</em> uniform<em>。</em>none* 是默认值，<em>uniform <em>可以 <code>TextView</code>在水平和垂直轴上</em>均匀</em>缩放。</li><li>将 <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizePresetSizes"><code>autoSizePresetSizes</code></a> 属性设置 为预设大小的数组。要将数组作为资源访问，请在<code>res/values/arrays.xml</code> 文件中定义数组。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autosize_text_sizes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>10sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>12sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>20sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>40sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>100sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizePresetSizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@array/autosize_text_sizes<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用支持库-2"><a href="#使用支持库-2" class="headerlink" title="使用支持库"></a>使用支持库</h4><ul><li><p>要使用预设大小<code>TextView</code>通过支持库以编程方式设置自动调整大小 ，请调用该<code>TextViewCompat.setAutoSizeTextTypeUniformWithPresetSizes(TextView textView, int[] presetSizes, int unit)</code> 方法。提供<code>TextView</code>类的实例，大小数组以及大小的任何<code>TypedValue</code>维度单位。</p></li><li><p>要使用预设大小<code>TextView</code>通过支持库设置 XML 的自动调整大小 ，请使用布局 XML 文件中的 <code>app</code>命名空间和 set <code>autoSizeText</code>和 <code>autoSizePresetSizes</code>attributes。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autosize_text_sizes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>10sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>12sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>20sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>40sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>100sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizePresetSizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@array/autosize_text_sizes<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="XML-中的字体"><a href="#XML-中的字体" class="headerlink" title="XML 中的字体"></a>XML 中的字体</h2><p>Android 8.0（API 级别 26）引入了一项新功能，即 XML 中的字体，它允许您将字体用作资源。您可以在<code>font</code>文件<code>res/font/</code>夹中添加文件以将字体捆绑为资源。这些字体在您的<code>R</code>文件中编译，并在 Android Studio 中自动提供。您可以借助新资源类型访问字体资源<code>font</code>。例如，要访问字体资源，请使用<code>@font/myfont</code>或<code>R.font.myfont</code>。</p><p>要在运行 Android 4.1（API 级别 16）及更高版本的设备上使用字体 XML 功能，请使用支持库 26. 有关使用支持库的更多信息，请参阅 <a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml#using-support-lib">使用支持库</a> 部分。</p><p>要将字体添加为资源，请在 Android Studio 中执行以下步骤：</p><ol><li>右键单击 res 文件夹，然后转到“ 新建”&gt;“Android 资源目录”。将出现“ <em>新建资源目录”</em>窗口。</li><li>在“资源类型”列表中，选择“ 字体”，然后单击“ 确定”。<strong>注意</strong>：资源目录的名称必须是 <strong>font</strong></li></ol><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-055422.jpg" alt="图 1 添加字体资源目录"> 3. 在字体文件夹中添加字体文件。下面的文件夹结构生成 <code>R.font.dancing_script</code>，<code>R.font.lobster</code>和 <code>R.font.typo_graphica</code>。</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-055530.jpg" alt="在资源目录中添加字体文件"> 4. 双击字体文件以在编辑器中预览文件的字体。</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-055559.jpg" alt="预览字体文件"></p><h3 id="创建-font-family"><a href="#创建-font-family" class="headerlink" title="创建 font family"></a>创建 font family</h3><p>font family 是一组字体文件及其样式和重量详细信息。在 Android 中，您可以创建一个新的字体系列作为 XML 资源，并将其作为单个单元访问，而不是将每个样式和权重作为单独的资源引用。通过这样做，系统可以根据您尝试使用的文本样式选择正确的字体。</p><p>要创建字体系列，请在 Android Studio 中执行以下步骤：</p><ol><li><p>右键单击该<code>font</code>文件夹，然后转到“ <strong>新建”&gt;“字体资源文件”</strong>。将出现“ <em>新建资源文件”</em>窗口。</p></li><li><p>输入文件名，然后单击“ <strong>确定”</strong>。新的字体资源 XML 在编辑器中打开。</p></li><li><p>将每个字体文件，样式和权重属性包含在<code>&lt;font</code> 元素中。以下 XML 说明了在字体资源 XML 中添加与字体相关的属性：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-family</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span>        <span class="token attr-name"><span class="token namespace">android:</span>fontStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@font/lobster_regular<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span>        <span class="token attr-name"><span class="token namespace">android:</span>fontStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>italic<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@font/lobster_italic<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-family</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="在-XML-布局中使用字体"><a href="#在-XML-布局中使用字体" class="headerlink" title="在 XML 布局中使用字体"></a>在 XML 布局中使用字体</h3><p>在<code>TextView</code>对象或样式中使用字体，可以是单个字体文件，也可以是字体系列中的字体。要<code>TextView</code>在样式中添加字体，请使用该 <code>fontFamily</code>属性。 <strong>注意：</strong>当您使用字体系列时， <code>TextView</code>交换机可以根据需要自行使用该系列中的字体文件。</p><h4 id="将字体添加到-TextView"><a href="#将字体添加到-TextView" class="headerlink" title="将字体添加到 TextView"></a>将字体添加到 TextView</h4><p>要为其设置字体<code>TextView</code>，请执行以下操作之一：</p><ul><li><p>在布局 XML 文件中，将<code>fontFamily</code>属性设置为要访问的字体文件。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fontFamily</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@font/lobster<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Android Studio 布局预览（如图 5 最右侧窗格所示）允许您预览中的字体集<code>TextView</code>。</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-060116.jpg" alt="在布局预览中预览字体"></p><h4 id="将字体添加到-Style"><a href="#将字体添加到-Style" class="headerlink" title="将字体添加到 Style"></a>将字体添加到 Style</h4><p>打开<code>styles.xml</code>，并将<code>fontFamily</code> 属性设置为您要访问的字体文件。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customfontstyle<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:style/TextAppearance.Small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    &lt;item name=<span class="token string">"android:fontFamily"</span>&gt;@font/lobster&lt;/item&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在-Java-Kotlin-中使用字体"><a href="#在-Java-Kotlin-中使用字体" class="headerlink" title="在 Java/Kotlin 中使用字体"></a>在 Java/Kotlin 中使用字体</h3><p>要在 Java/Kotlin 中使用字体，请调用<code>getFont(int)</code>方法并提供要使用的字体 的资源标识符。此方法返回一个 <code>Typeface</code>对象。虽然系统从字体信息中为您选择最佳样式，但您可以使用该 <code>setTypeface(android.graphics.Typeface, int)</code> 方法设置具有特定样式的字体。</p><h4 id="Kotin"><a href="#Kotin" class="headerlink" title="Kotin"></a>Kotin</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> typeface <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>font<span class="token punctuation">.</span>myfont<span class="token punctuation">)</span>textView<span class="token punctuation">.</span>typeface <span class="token operator">=</span> typeface<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Typeface</span> typeface <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>font<span class="token punctuation">.</span>myfont<span class="token punctuation">)</span><span class="token punctuation">;</span>textView<span class="token punctuation">.</span><span class="token function">setTypeface</span><span class="token punctuation">(</span>typeface<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用支持库-3"><a href="#使用支持库-3" class="headerlink" title="使用支持库"></a>使用支持库</h3><p>Support Library 26.0 在运行 Android 4.1（API 级别 16）及更高版本的设备上提供对 XML 字体功能的支持。</p><p><strong>注意</strong>：通过支持库在 XML 布局中声明字体系列时，请使用 <strong>app</strong> 命名空间来确保加载字体</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-family</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name"><span class="token namespace">app:</span>fontStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@font/myfont-Regular<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name"><span class="token namespace">app:</span>fontStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>italic<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@font/myfont-Italic<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-family</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Java/Kotlin 中使用字体，请调用 <code>ResourceCompat.getFont(Context, int)</code>方法并提供 Context 和资源标识符的实例。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Widget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较合适的Hexo多设备同步方法</title>
      <link href="/20181111/hexo-sync-onmultidevice/"/>
      <url>/20181111/hexo-sync-onmultidevice/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="比较合适的-Hexo-多设备同步方法"><a href="#比较合适的-Hexo-多设备同步方法" class="headerlink" title="比较合适的 Hexo 多设备同步方法"></a>比较合适的 Hexo 多设备同步方法</h1><p>经常我们有一个场景：需要在公司或者家庭多个电脑完成 Hexo 的博客撰写和发布工作。这就涉及到 Hexo 多电脑的同步问题。</p><p>网上的方案基本上都是多分支方案，也就是在同一个仓库创建两个分支：</p><ol><li>Hexo 分支 – 用来保存所有 Hexo 的源文件</li><li>master 分支 – 用来保存 Hexo 生成的博客文件</li></ol><p>在创建 GitHub Pages 或者 Coding Pages 时，以 master 分支为 pages 分支。<br>Hexo 的 deploy 指向 master 分支部署 pages，git 的管理指向 Hexo 分支。</p><span id="more"></span><p>因为我的 GitHub Pages 对应的仓库是 public 的，所以会导致 Hexo 源文件暴露在公开的仓库了。这样也就会把我的博客的一些密钥、统计管理配置等暴露在公开仓库分支了。如果对这些配置的<code>_config.yml</code>进行单独管理的话，也很麻烦。</p><p>所以<strong>Hexo 最完美的多电脑同步方法</strong>是，创建两个仓库：</p><ol><li>Hexo 私有仓库 – 用来保存所有 Hexo 的源文件</li><li>master 公开仓库 – 用来保存 Hexo 生成的博客文件</li></ol><h2 id="我的-Blog-配置"><a href="#我的-Blog-配置" class="headerlink" title="我的 Blog 配置"></a>我的 Blog 配置</h2><ol><li>利用 hexo d 直接 deploy Hexo 博客到 GitHub pages</li><li>使用 hexo-theme-material 主题，并作了很多配置</li></ol><h2 id="创建远程私有仓库"><a href="#创建远程私有仓库" class="headerlink" title="创建远程私有仓库"></a>创建远程私有仓库</h2><p>我是在 Coding 上创建的（如果在 GitHub 可以创建 Private 仓库也可以在 GitHub 上创建）名字就叫 blog。</p><h2 id="建立本地-git-仓库"><a href="#建立本地-git-仓库" class="headerlink" title="建立本地 git 仓库"></a>建立本地 git 仓库</h2><p>进入你现有的本地 hexo 博客文件夹，先删除第三方主题的 git 配置，如对<code>hexo-theme-material</code>主题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-fr</span> ./themes/hexo-theme-material/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后建立本地的 git 仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个<code>.gitignore</code>文件，并放在 Hexo 的根目录，内容为：</p><pre class="line-numbers language-none"><code class="language-none">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-11-055806.png"></p><h2 id="Push-到私有仓库"><a href="#Push-到私有仓库" class="headerlink" title="Push 到私有仓库"></a>Push 到私有仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://git.coding.net/<span class="token operator">&lt;</span>yourname<span class="token operator">&gt;</span>/blog.git<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"init my private hexo blog"</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此，就完成了本地 Hexo 源码的全备份</p><h2 id="在另一台电脑进行-Hexo-写作"><a href="#在另一台电脑进行-Hexo-写作" class="headerlink" title="在另一台电脑进行 Hexo 写作"></a>在另一台电脑进行 Hexo 写作</h2><p>首先和最开始使用 Hexo 一样，都有完成 git、node、hexo 等环境的搭建和配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span>brew <span class="token function">install</span> <span class="token function">node</span>brew <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拉取-Hexo-blog"><a href="#拉取-Hexo-blog" class="headerlink" title="拉取 Hexo blog"></a>拉取 Hexo blog</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://git.coding.net/<span class="token operator">&lt;</span>yourname<span class="token operator">&gt;</span>/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样你就拥有了你的所有 Hexo 源文件</p><h3 id="Hexo-编写和发布"><a href="#Hexo-编写和发布" class="headerlink" title="Hexo 编写和发布"></a>Hexo 编写和发布</h3><p>尽管拉取下来了，还需要建立一下 Hexo 的环境，这里需要格外注意的一点是：<br>千万不要用<code>hexo init</code>命令。原因是当前目录已经建立了 git 仓库环境, <code>hexo init</code>会覆盖到当前的 git 环境，重建一个新的，这样和我们的私有 Hexo 源码仓库脱离了联系。</p><p>正确的做法是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为<code>package.json</code>里面已经保存了<code>hexo</code>的必备资源包信息，<code>npm install</code>后 Hexo 环境就建立起来了。</p><p>如果需要更新 Hexo 版本或者插件版本，直接使用<code>npm update</code>即可，然后就可以看到 package.json 里面升级了哪些插件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来就进行正常的编写和发布就好。本地预览的命令还是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Hexo 的发布命令是<code>hexo d</code></p><p>最后执行<code>git status</code>把更改的新文件<code>git add</code>和<code>git commit</code>，最后<code>git push</code>到私有仓库，又会完成 Hexo 源码仓库的同步。</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>从此，世界是如此的美好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventBus 源码解析</title>
      <link href="/20180913/codeanalysis-eventbus/"/>
      <url>/20180913/codeanalysis-eventbus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="EventBus-源码解析"><a href="#EventBus-源码解析" class="headerlink" title="EventBus 源码解析"></a>EventBus 源码解析</h1><h2 id="EventBus-简介"><a href="#EventBus-简介" class="headerlink" title="EventBus 简介"></a>EventBus 简介</h2><p><a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90"></a></p><p>EventBus 是 Android 端优化的 publish/subscribe 消息总线，简化了应用程序内各组件间、组件与后台线程的通信，主要由三个部分组成:</p><ul><li><p>事件 Event: 可以是任意对象，通过事件的发布者将事件进行传递</p></li><li><p>事件订阅者 Subscriber: 接收特定事件</p></li><li><p>事件发布者 Publisher: 用于通知 Subscriber 有事件发生，可以在任意线程任意位置发送事件</p><span id="more"></span><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-13-142814.jpg"></p><p>上图解释了整个 EventBus 的大概工作流程：<code>发布者Publisher</code>将事件 Event 通过<code>post()方法</code>发送；EventBus 内部进行处理，找到订阅了该<code>事件Event</code>的<code>订阅者Subscriber</code>；然后该事件 Event 的订阅者 Subscriber 通过<code>onEvent()方法</code>接收事件进行相关处理（关于 onEvent()在 EventBus 3.0 中有改动，下面详细说明）</p></li></ul><h2 id="EventBus-简单使用"><a href="#EventBus-简单使用" class="headerlink" title="EventBus 简单使用"></a>EventBus 简单使用</h2><p>添加 EventBus 依赖到项目 <code>implementation 'org.greenrobot:eventbus:3.1.1'</code><br>构造事件（Event）对象。也就是发送消息类 每一个消息类，对应一种事件。这里我们定义两个消息发送类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewsEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NewsEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToastEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ToastEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册/解除事件订阅（Subscriber）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//一般在onCreate()方法中进行注册订阅。在onDestory()方法中进行解除订阅</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注册事件 其中this代表订阅者</span>    <span class="token comment">//通过register(this)来表示该订阅者进行了订阅</span>    <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解除注册事件</span>    <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体注册了对什么事件的订阅，这个需要 onEvent()方法来说明。在 EventBus 3.0 之前，onEvent()方法是用来接收指定事件（Event）类型对象，然后进行相关处理操作。在 EventBus 3.0 之后，onEvent()方法可以自定义方法名，不过要加入注解@Subscribe。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span><span class="token class-name">ToastEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过onToastEvent(ToastEvent event)表示指定对事件ToastEvent的订阅</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送消息 订阅已经完成，那么便可以发送订阅了<code>EventBus.getDefault().post(new ToastEvent("Toast,发个提示，祝大家新年快乐！"));</code><br>那么 onToastEvent(ToastEvent event)会收到事件，并弹出提示，EventBus 的基础使用流程就是这样的。</p><h2 id="EventBus-进阶使用"><a href="#EventBus-进阶使用" class="headerlink" title="EventBus 进阶使用"></a>EventBus 进阶使用</h2><h3 id="线程模式-ThreadMode"><a href="#线程模式-ThreadMode" class="headerlink" title="线程模式 ThreadMode"></a>线程模式 ThreadMode</h3><p>当你接收的的事件后，如果处于非 UI 线程，你要更新 UI 怎么办？如果处于 UI 线程，你要进行耗时操作，怎么办?等等其他情况，通过 ThreadMode 统统帮你解决</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> <span class="token class-name">ThreadMode<span class="token punctuation">.</span>MainThread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">onNewsEvent</span><span class="token punctuation">(</span><span class="token class-name">NewsEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> message <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mTv_message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用起来很简单，通过@Subscribe(threadMode = ThreadMode.MainThread)即可指定。 下面具体介绍下 ThreadMode：</p><ol><li><strong>PostThread</strong>：事件的处理在和事件的发送在相同的进程，所以事件处理时间不应太长，不然影响事件的发送线程</li><li><strong>MainThread</strong>：事件的处理会在 UI 线程中执行。事件处理时间不能太长，这个不用说的，长了会 ANR 的</li><li><strong>BackgroundThread</strong>：如果事件是在 UI 线程中发布出来的，那么事件处理就会在子线程中运行，如果事件本来就是子线程中发布出来的，那么事件处理直接在该子线程中执行。所有待处理事件会被加到一个队列中，由对应线程依次处理这些事件，如果某个事件处理时间太长，会阻塞后面的事件的派发或处理</li><li><strong>Async</strong>：事件处理会在单独的线程中执行，主要用于在后台线程中执行耗时操作，每个事件会开启一个线程</li></ol><h3 id="priority-事件优先级"><a href="#priority-事件优先级" class="headerlink" title="priority 事件优先级"></a>priority 事件优先级</h3><p>事件的优先级类似广播的优先级，优先级越高优先获得消息，用法展示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span><span class="token class-name">ToastEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当多个订阅者（Subscriber）对同一种事件类型进行订阅时，即对应的事件处理方法中接收的事件类型一致，则优先级高（priority 设置的值越大），则<strong>会先接收事件进行处理；优先级低（priority 设置的值越小），则会后接收事件进行处理</strong></p><p>除此之外，EventBus 也可以终止对事件继续传递的功能，这样其他优先级比 100 低，并且订阅了该事件的订阅者就会接收不到该事件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span><span class="token class-name">ToastEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拦截事件</span>    <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelEventDelivery</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EventBus-黏性事件"><a href="#EventBus-黏性事件" class="headerlink" title="EventBus 黏性事件"></a>EventBus 黏性事件</h3><p>EventBus 除了普通事件也支持粘性事件。可以理解成：订阅在发布事件之后，但同样可以收到事件。订阅/解除订阅和普通事件一样，但是处理订阅的方法有所不同，需要注解中添加<code>sticky = true</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span><span class="token class-name">ToastEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拦截事件</span>    <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelEventDelivery</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样假设一个 ToastEvent 的事件已经发布，此时还没有注册订阅。当设置了 sticky = true，在 ToastEvent 的事件发布后，进行注册，依然能够接收到之前发布的事件。<br>不过这个时候，发布事件的方式就改变了：<code>EventBus.getDefault().postSticky(new ToastEvent("Toast,发个提示，祝大家新年快乐！"));</code><br>我们如果不再需要该粘性事件我们可以移除：<code>EventBus.getDefault().removeStickyEvent(ToastEvent.class);</code><br>或者调用移除所有粘性事件：<code>EventBus.getDefault().removeAllStickyEvents();</code></p><h3 id="EventBus-配置"><a href="#EventBus-配置" class="headerlink" title="EventBus 配置"></a>EventBus 配置</h3><p>EventBus 在 2.3 版本中添加了 EventBuilder 去配置 EventBus 的各方各面。比如：如何去构建一个在发布事件时没有订阅者时保持沉默的 EventBus。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">EventBus</span> eventBus <span class="token operator">=</span> <span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logNoSubscriberMessages</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendNoSubscriberEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述设置，当一个事件没有订阅者时，不会输出 log 信息，也不会发布一条默认信息。</p><p>配置默认的 EventBus 实例，使用 EventBus.getDefault()是一个简单的方法。获取一个单例的 EventBus 实例。EventBusBuilder 也允许使用 installDefaultEventBus 方法去配置默认的 EventBus 实例。</p><p>注意：不同的 EventBus 的对象的数据是不共享的。通过一个 EventBus 对象去发布事件，只有通过同一个 EventBus 对象订阅事件，才能接收该事件。所以以上使用 EventBus.getDefault()获得的都是同一个实例。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol><li><p>注册订阅：<code>EventBus.getDefault().register(this);</code></p></li><li><p>事件处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> <span class="token class-name">ThreadMode<span class="token punctuation">.</span>MainThread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">onNewsEvent</span><span class="token punctuation">(</span><span class="token class-name">NewsEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> message <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mTv_message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发布事件：<code>EventBus.getDefault().post(new NewsEvent("我是来自SecondActivity的消息，你好！"));</code></p></li></ol><p>以上是 EventBus 的基本使用。我们先从 getDefault 说起</p><h3 id="getDefault"><a href="#getDefault" class="headerlink" title="getDefault()"></a>getDefault()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">EventBus</span> defaultInstance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EventBus</span> <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">EventBus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                defaultInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> defaultInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述代码可以得知，getDefault()中通过双检查锁（DCL）机制实现了 EventBus 的单例机制，获得了一个默认配置的 EventBus 对象</p><h3 id="register"><a href="#register" class="headerlink" title="register()"></a>register()</h3><p>在了解 register()之前，我们先要了解一下 EventBus 中的几个关键的成员变量。方便对下面内容的理解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** Map&lt;订阅事件, 订阅该事件的订阅者集合&gt; */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Subscription</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> subscriptionsByEventType<span class="token punctuation">;</span><span class="token comment">/** Map&lt;订阅者, 订阅事件集合&gt; */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typesBySubscriber<span class="token punctuation">;</span><span class="token comment">/** Map&lt;订阅事件类类型,订阅事件实例对象&gt;. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> stickyEvents<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看具体的 register()中执行的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//订阅者类型</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> subscriberClass <span class="token operator">=</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断该类是不是匿名类，如果是匿名累要使用反射</span>    <span class="token keyword">boolean</span> forceReflection <span class="token operator">=</span> subscriberClass<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取订阅者全部的响应函数信息（即上面的onNewsEvent()之类的方法）</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SubscriberMethod</span><span class="token punctuation">&gt;</span></span> subscriberMethods <span class="token operator">=</span> subscriberMethodFinder<span class="token punctuation">.</span><span class="token function">findSubscriberMethods</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">,</span> forceReflection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//循环每一个事件响应函数，执行 subscribe()方法，更新订阅相关信息</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SubscriberMethod</span> subscriberMethod <span class="token operator">:</span> subscriberMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，register()第一步获取订阅者的类类型. 第二步,通过 SubscriberMethodFinder 类来解析订阅者类,获取所有的响应函数集合. 第三步,遍历订阅函数,执行 subscribe()方法，更新订阅相关信息。 关于 subscriberMethodFinder 这里就不介绍了。先跟着线索，继续看 subscribe()方法。</p><p>subscribe 函数分三步：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一步: 通过subscriptionsByEventType得到该事件类型所有订阅者信息队列，根据优先级将当前订阅者信息插入到订阅者队列subscriptionsByEventType中；</span><span class="token comment">//获取订阅的事件类型</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventType <span class="token operator">=</span> subscriberMethod<span class="token punctuation">.</span>eventType<span class="token punctuation">;</span><span class="token comment">//获取订阅该事件的订阅者集合</span><span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscription</span><span class="token punctuation">&gt;</span></span> subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把通过register()订阅的订阅者包装成Subscription 对象</span><span class="token class-name">Subscription</span> newSubscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//订阅者集合为空，创建新的集合，并把newSubscription 加入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscription</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">//集合中已经有该订阅者，抛出异常。不能重复订阅</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span>        <span class="token string">"Subscriber "</span> <span class="token operator">+</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" already registered to event "</span> <span class="token operator">+</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//把新的订阅者按照优先级加入到订阅者集合中。</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>subscriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> size <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">||</span> subscriberMethod<span class="token punctuation">.</span>priority <span class="token operator">&gt;</span> subscriptions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>      subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> newSubscription<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//第二步: 在typesBySubscriber中得到当前订阅者订阅的所有事件队列，将此事件保存到队列typesBySubscriber中，用于后续取消订阅</span><span class="token comment">//根据订阅者，获得该订阅者订阅的事件类型集合</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> subscribedEvents <span class="token operator">=</span> typesBySubscriber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果事件类型集合为空，创建新的集合，并加入新订阅的事件类型。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>subscribedEvents <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  subscribedEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  typesBySubscriber<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscribedEvents<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如果事件类型集合不为空，加入新订阅的事件类型</span>subscribedEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三步: 检查这个事件是否是 Sticky 事件，如果是则从stickyEvents事件保存队列中取出该事件类型最后一个事件发送给当前订阅者</span><span class="token comment">//该事件是stick=true。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberMethod<span class="token punctuation">.</span>sticky<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//响应订阅事件的父类事件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventInheritance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> stickyEvents<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//循环获得每个stickyEvent事件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> candidateEventType <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//是该类的父类</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>candidateEventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//该事件类型最新的事件发送给当前订阅者。</span>        <span class="token class-name">Object</span> stickyEvent <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> stickyEvent <span class="token operator">=</span> stickyEvents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，便完成了订阅功能。下面是订阅的具体流程图：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-13-150526.jpg"></p><h3 id="unregister"><a href="#unregister" class="headerlink" title="unregister()"></a>unregister()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> unregister <span class="token punctuation">(</span><span class="token class-name">Object</span> subscriber<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 获取该订阅者所有的订阅事件类类型集合.</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> subscribedTypes <span class="token operator">=</span> typesBySubscriber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribedTypes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventType <span class="token operator">:</span> subscribedTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">unsubscribeByEventType</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 从typesBySubscriber删除该&lt;订阅者对象,订阅事件类类型集合&gt;</span>    typesBySubscriber<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"EventBus"</span><span class="token punctuation">,</span> <span class="token string">"Subscriber to unregister was not registered before: "</span> <span class="token operator">+</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> unsubscribeByEventType <span class="token punctuation">(</span><span class="token class-name">Object</span> subscriber<span class="token punctuation">,</span> <span class="token class-name">Class</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>eventType<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 获取订阅事件对应的订阅者信息集合.</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscription</span><span class="token punctuation">&gt;</span></span> subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Subscription</span> subscription <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 从订阅者集合中删除特定的订阅者.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>subscriber <span class="token operator">==</span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subscription<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        subscriptions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unregister()方法比较简单，主要完成了 subscriptionsByEventType 以及 typesBySubscriber 两个集合的同步</p><h3 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> post <span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 获取当前线程的Posting状态.</span>  <span class="token class-name">PostingThreadState</span> postingState <span class="token operator">=</span> currentPostingThreadState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取当前线程的事件队列.</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> eventQueue <span class="token operator">=</span> postingState<span class="token punctuation">.</span>eventQueue<span class="token punctuation">;</span>  <span class="token comment">//将当前事件添加到其事件队列</span>  eventQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断新加入的事件是否在分发中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postingState<span class="token punctuation">.</span>isPosting<span class="token punctuation">)</span> <span class="token punctuation">{</span>    postingState<span class="token punctuation">.</span>isMainThread <span class="token operator">=</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    postingState<span class="token punctuation">.</span>isPosting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>postingState<span class="token punctuation">.</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">"Internal error. Abort state was not reset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 循环处理当前线程eventQueue中的每一个event对象.</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">postSingleEvent</span><span class="token punctuation">(</span>eventQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postingState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment">// 处理完知乎重置postingState一些标识信息.</span>      postingState<span class="token punctuation">.</span>isPosting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      postingState<span class="token punctuation">.</span>isMainThread <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post 函数会首先得到当前线程的 post 信息 PostingThreadState，其中包含事件队列，将当前事件添加到其事件队列中，然后循环调用 postSingleEvent 函数发布队列中的每个事件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> postSingleEvent <span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">,</span> <span class="token class-name">PostingThreadState</span> postingState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//分发事件的类型</span>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventClass <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> subscriptionFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//响应订阅事件的父类事件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventInheritance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//找出当前订阅事件类类型eventClass的所有父类的类类型和其实现的接口的类类型</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> eventTypes <span class="token operator">=</span> <span class="token function">lookupAllEventTypes</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> countTypes <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> countTypes<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发布每个事件到每个订阅者</span>      subscriptionFound <span class="token operator">|=</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> postingState<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    subscriptionFound <span class="token operator">=</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> postingState<span class="token punctuation">,</span> eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//....................................</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 postSingleEventForEventType 函数发布每个事件到每个订阅者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> postSingleEventForEventType <span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">,</span> <span class="token class-name">PostingThreadState</span> postingState<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> eventClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Subscription</span><span class="token punctuation">&gt;</span></span> subscriptions<span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取订阅事件类类型对应的订阅者信息集合.(register函数时构造的集合)</span>    subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>subscriptions<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Subscription</span> subscription <span class="token operator">:</span> subscriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>      postingState<span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>      postingState<span class="token punctuation">.</span>subscription <span class="token operator">=</span> subscription<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> aborted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 发布订阅事件给订阅函数</span>        <span class="token function">postToSubscription</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">,</span> postingState<span class="token punctuation">.</span>isMainThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        aborted <span class="token operator">=</span> postingState<span class="token punctuation">.</span>canceled<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        postingState<span class="token punctuation">.</span>event <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        postingState<span class="token punctuation">.</span>subscription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        postingState<span class="token punctuation">.</span>canceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 postToSubscription 函数向每个订阅者发布事件。 postToSubscription 函数中会判断订阅者的 ThreadMode，从而决定在什么 Mode 下执行事件响应函数。这里就不贴源码了。后续还牵着到反射以及线程调度问题，这里就不展开了。 以上就是 post 的流程，下面是具体的 post 的流程图:<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-13-150953.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SourceCode Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegram 代理设置</title>
      <link href="/20180514/telegram-proxy-method/"/>
      <url>/20180514/telegram-proxy-method/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Telegram-代理设置"><a href="#Telegram-代理设置" class="headerlink" title="Telegram 代理设置"></a>Telegram 代理设置</h1><p>本次测试的是 Mac ShadowsocksX-NG + Telegram<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064147.png"></p><h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><ol><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">ShadowsocksX-NG</a></li><li>打开偏好设置，高级选项，查看 SOCKS5 端口<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064557.png"><span id="more"></span></li></ol><h2 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h2><ol><li>打开 Settings–&gt;Privacy and Security–&gt;Use Proxy<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064745.png"></li><li>复制地址和端口号<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064948.png"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用手册</title>
      <link href="/20180112/git-manual/"/>
      <url>/20180112/git-manual/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git-使用手册"><a href="#Git-使用手册" class="headerlink" title="Git 使用手册"></a>Git 使用手册</h1><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="配置-Git-Config"><a href="#配置-Git-Config" class="headerlink" title="配置 Git Config"></a>配置 Git Config</h3><p>可以直接使用 https，方便代理，无需使用 ssh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置UserName 和 Email</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"weimiku"</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"1570682285@qq.com"</span>$ <span class="token function">mkdir</span> .ssh$ <span class="token builtin class-name">cd</span> ~/.ssh<span class="token comment"># 生成 RSA Key</span>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"1570682285@qq.com"</span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/weicools/.ssh/id_rsa<span class="token punctuation">)</span>: WeicoolsGitHubEnter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> WeicoolsGitHub.Your public key has been saved <span class="token keyword">in</span> WeicoolsGitHub.pub.weicools$ <span class="token function">cat</span> ~/.ssh/WeicoolsGitHub.pubxxx<span class="token punctuation">..</span>.xxx <span class="token number">1570682285</span>@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制 WeicoolsGitHub.pub 内容到 Git 上的 SSH key 配置中</p><h3 id="检查-Git-Config"><a href="#检查-Git-Config" class="headerlink" title="检查 Git Config"></a>检查 Git Config</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--list</span>$ <span class="token function">git</span> config user.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Git-项目创建和提交"><a href="#Git-项目创建和提交" class="headerlink" title="Git 项目创建和提交"></a>Git 项目创建和提交</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个项目hello-world</span>$ <span class="token function">mkdir</span> ~/hello-world<span class="token comment"># 进入这个项目</span>$ <span class="token builtin class-name">cd</span> ~/hello-world<span class="token comment"># 初始化Git</span>$ <span class="token function">git</span> init<span class="token comment"># new README文件</span>$ <span class="token function">touch</span> README<span class="token comment"># add README文件</span>$ <span class="token function">git</span> <span class="token function">add</span> README<span class="token comment"># 提交更新，并注释信息“first commit”</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'first commit'</span><span class="token comment"># 连接远程GitHub项目</span>$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:xxx/yyyy.git<span class="token comment"># 将本地项目更新到GitHub</span>$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span class="token comment"># 后续提交 git push 即可</span>$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p><h2 id="Git-配置-Q-amp-A"><a href="#Git-配置-Q-amp-A" class="headerlink" title="Git 配置 Q &amp; A"></a>Git 配置 Q &amp; A</h2><h3 id="为仓库设置-Git-用户名"><a href="#为仓库设置-Git-用户名" class="headerlink" title="为仓库设置 Git 用户名"></a>为仓库设置 Git 用户名</h3><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">$ git config user.name "name"$ git config user.email "email"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="绑定-Remote-Repository"><a href="#绑定-Remote-Repository" class="headerlink" title="绑定 Remote Repository"></a>绑定 Remote Repository</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote set-url origin https://github.com/user/repository.git$ <span class="token function">git</span> branch --set-upstream-to origin/master master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加-Remote-Repository"><a href="#添加-Remote-Repository" class="headerlink" title="添加 Remote Repository"></a>添加 Remote Repository</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/user/repository.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="git-删除本地和远程文件"><a href="#git-删除本地和远程文件" class="headerlink" title="git 删除本地和远程文件"></a>git 删除本地和远程文件</h3><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 删除文件：git rm 文件名# 删除文件夹：git rm -r 文件夹名# 注意# 要删除文件必须先添加到仓库才可以进行上述操作命令，因为git基于仓库进行操作# 删除文件夹时，文件夹不能为空，否则不能找到文件夹从而无法删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工作过程中若误提交了文件到仓库上，比如<code>node_modules</code>,此时想只删除远程仓库文件，不删除本地文件，可使用下面命令</p><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 只删除了仓库中的缓存，实际文件不会删除git rm --cached 文件(夹)git commit -m '备注'git push origin 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Permission-denied-手动-add-RSA-密钥"><a href="#Permission-denied-手动-add-RSA-密钥" class="headerlink" title="Permission denied (手动 add RSA 密钥)"></a>Permission denied (手动 add RSA 密钥)</h3><p>如果输入 <code>$ ssh -T git@github.com</code> 出现错误提示：Permission denied (publickey). 因为新生成的 key 不能加入 ssh 就会导致连接不上 github。<br>解决办法：输入<code>$ ssh-add ~/.ssh/id_rsa</code>，再输入对应 SSH 密码即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-ah</span><span class="token builtin class-name">.</span>      WeicoolsGitHub  config WeicoolsGitHub.pub  known_hosts$ ssh-add ~/.ssh/WeicoolsGitHub$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.comHi weimiku<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="恢复删除分支"><a href="#恢复删除分支" class="headerlink" title="恢复删除分支"></a>恢复删除分支</h3><p>当我们使用 git branch -D 删除一个本地分支后，怎样才能恢复呢？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ 显示历史提交，找到分支对应的最后一笔提交的commit-id<span class="token function">git</span> log <span class="token parameter variable">-g</span><span class="token comment"># 以指定commit为基础创建分支</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">{</span>branch-name<span class="token punctuation">}</span> <span class="token punctuation">{</span>commit-id<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ssh-add-相关问题"><a href="#ssh-add-相关问题" class="headerlink" title="ssh-add 相关问题"></a>ssh-add 相关问题</h3><p><a href="https://help.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">生成新 SSH 密钥并添加到 ssh-agent</a><br><a href="https://help.github.com/cn/github/authenticating-to-github/error-permission-denied-publickey">错误：权限被拒绝（公钥）</a><br><a href="https://segmentfault.com/q/1010000000835302">Git 是否必须每次添加 ssh-add</a><br><a href="https://www.yangyanxing.com/article/config-local-ssh.html">配置多个 ssh 密钥对并且永久多 ssh 管理</a></p><h2 id="Fork-项目"><a href="#Fork-项目" class="headerlink" title="Fork 项目"></a>Fork 项目</h2><h3 id="在-GitHub-上-Fork"><a href="#在-GitHub-上-Fork" class="headerlink" title="在 GitHub 上 Fork"></a>在 GitHub 上 Fork</h3><p>参考 <a href="https://github.com/selfteaching/the-craft-of-selfteaching/issues/67">https://github.com/selfteaching/the-craft-of-selfteaching/issues/67</a></p><h3 id="GitHub-Fork-实践"><a href="#GitHub-Fork-实践" class="headerlink" title="GitHub Fork 实践"></a>GitHub Fork 实践</h3><p>以 <a href="https://github.com/material-components/material-components-android">material-components-android</a> 项目为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone远程仓库</span>$ <span class="token function">git</span> clone git@github.com:weikeet/material-components-android.git<span class="token comment"># 查看远程仓库的路径</span>$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>origingit@github.com:weikeet/material-components-android.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origingit@github.com:weikeet/material-components-android.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span class="token comment"># 设置Repository upstream</span>$ <span class="token function">git</span> remote <span class="token function">add</span> upstream git@github.com:material-components/material-components-android.git<span class="token comment"># 查看远程仓库的路径</span>$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>origingit@github.com:weikeet/material-components-android.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origingit@github.com:weikeet/material-components-android.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>upstreamgit@github.com:material-components/material-components-android.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>upstreamgit@github.com:material-components/material-components-android.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span class="token comment"># 抓取原仓库的更新</span><span class="token function">git</span> fetch upstream<span class="token comment"># 执行命令 git checkout master 切换到 master 分支</span><span class="token function">git</span> checkout master<span class="token comment"># 合并远程的master分支</span><span class="token function">git</span> merge upstream/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-SubModule"><a href="#使用-SubModule" class="headerlink" title="使用 SubModule"></a>使用 SubModule</h2><blockquote><p>参考：<br>imtianx: <a href="https://juejin.im/post/5aa11f486fb9a028e0140e34">Git 子模块</a><br>官方文档：<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">Git 工具 - 子模块</a></p></blockquote><p>工作中，可能会遇到<strong>在一个 Git 仓库 中添加 其他 Git 仓库的场景</strong>。比如，在项目中引用第三方库。或者在模块化开发中，某些公共的模块是需要单独维护的，使用单独的仓库比较方便，但是在项目中需要引用，就会出现这样的场景。这里使用 Git 的 <code>git submodule</code> 命令为一个 <code>git 项目</code> 添加 <code>子git项目</code></p><p>可以使用 <code>git submodule --help</code> 查看所有相关命令。 为了方便说明，这里在主项目 <code>MainProject</code> 中加两个子模块 <code>liba</code> 和 <code>libb</code> .</p><h3 id="1-添加子模块"><a href="#1-添加子模块" class="headerlink" title="1. 添加子模块"></a>1. 添加子模块</h3><p>进入 <code>MainProject</code> 使用 <strong>git submodule add</strong> 进行添加,操作命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/imtianx/MainProject.git<span class="token builtin class-name">cd</span> MainProject/$ <span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/imtianx/liba.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如下图：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2019-03-14-071321.jpg"></p><p>使用 <code>git submodule add https://github.com/imtianx/libb.git</code> 添加 <code>libb</code> 子模块。 对于上图: 文件夹 <code>liba</code> 为新增加的子模块目录, <code>.gitmodules</code> 中存放的为子模块的信息，使用 <code>cat</code> 或 <code>vim</code> 查看内容为：</p><pre class="line-numbers language-none"><code class="language-none">[submodule "liba"]path = libaurl = https://github.com/imtianx/liba.git[submodule "libb"]path = libburl = https://github.com/imtianx/libb.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>.gitmodules 文件</strong>：保存项目 URL 与已经拉取的本地目录之间的映射，有多个子模块则含有多条记录，会随着版本控制一起被拉去和推送的。</p></blockquote><p>此时文件目录树如下：</p><pre class="line-numbers language-none"><code class="language-none">.├── README.md├── liba│   ├── README.md│   ├── a.txt│   └── a2.txt├── libb│   ├── README.md│   ├── b.txt│   └── b2.txt└── test.text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，<strong>提交添加的子模块到主目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add liba and libb submodules"</span><span class="token punctuation">[</span>master 6b15e30<span class="token punctuation">]</span> <span class="token function">add</span> liba and libb submodules <span class="token number">3</span> files changed, <span class="token number">8</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> .gitmodules create mode <span class="token number">160000</span> liba create mode <span class="token number">160000</span> libb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-更新子模块"><a href="#2-更新子模块" class="headerlink" title="2. 更新子模块"></a>2. 更新子模块</h3><p>往往子模块是单独开发的，这里以更新 <code>liba</code> 为例（为了测试，这里先在 liba 仓库添加了一个文件）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> liba$ <span class="token function">git</span> fetch$ <span class="token function">git</span> merge origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>操作结果如下图，<strong>注意需要进入子模块目录</strong>：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2019-03-14-071321.jpg"></p><p>此外，还可以在主目录下 直接用下面的命令更新 <code>libb</code>子模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule update <span class="token parameter variable">--remote</span> liba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用下面的方式，更新 libb 的 dev 分支：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">-f</span> .gitmodules submodule.libb.branch dev$ <span class="token function">git</span> submodule update <span class="token parameter variable">--remote</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如下图：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2019-03-14-071531.jpg"></p><blockquote><p>这里对 <code>.gitmodules</code> 加了 <code>-f</code> 参数，修改提交后对所有用户有效。</p></blockquote><h3 id="3-删除子模块"><a href="#3-删除子模块" class="headerlink" title="3. 删除子模块"></a>3. 删除子模块</h3><p>在日常开发中，有添加，当然也会有删除 子模块的需求。 这里主项目包含两个子模块：<code>liba</code>、<code>libb</code>，以删除 <code>liba</code> 为例说明：</p><ul><li>使用 <code>git rm --cached liba</code> 将 liba 从版本控制中删除（本地仍保留有），若不需要可不带 <code>--cached</code>进行完全删除。</li><li>使用 <code>vim .gitmodules</code> 可打开 vim 编辑,删除对应的内容</li></ul><pre class="line-numbers language-none"><code class="language-none">[submodule "liba"]   path = liba   url = https://github.com/imtianx/liba.git   branch = dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 <code>vim .git/config</code> 可打开 vim 编辑,删除对应的内容</li></ul><pre class="line-numbers language-none"><code class="language-none">[submodule "liba"]    url = https://github.com/imtianx/liba.git    active = true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用 <code>rm -rf .git/modules/liba</code>, 删除.git 下的缓存模块，最后提交项目。</li></ul><p>经过上面的删除后还可以进行添加子模块。</p><h3 id="4-克隆含子模块的仓库"><a href="#4-克隆含子模块的仓库" class="headerlink" title="4. 克隆含子模块的仓库"></a>4. 克隆含子模块的仓库</h3><p>若需要克隆含有子模块的仓库，直接 进行克隆是无法拉取之模块的代码，可加上 <strong>–recursive</strong> 参数，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/imtianx/MainProject.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用下面的三部操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone  https://github.com/imtianx/MainProject.git<span class="token function">git</span> submodule init<span class="token function">git</span> submodule update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Git-分支开发规范"><a href="#Git-分支开发规范" class="headerlink" title="Git 分支开发规范"></a>Git 分支开发规范</h2><blockquote><p>参考内容<br><a href="http://www.ruanyifeng.com/blog/2012/07/git.html">Git 分支管理策略</a> &gt; <a href="https://juejin.im/post/5b4328bbf265da0fa21a6820">您必须知道的 Git 分支开发规范</a> &gt; <a href="https://www.zhihu.com/question/21209619">如何写好 Git commit messages</a> &gt; <a href="https://segmentfault.com/a/1190000009048911">git commit 规范指南</a> &gt; <a href="https://stackoverflow.com/questions/3651860/which-characters-are-illegal-within-a-branch-name">Which characters are illegal within a branch name?</a></p></blockquote><p>Git 是目前最流行的源代码管理工具。 为规范开发，保持代码提交记录以及 git 分支结构清晰，方便后续维护，现规范 git 的相关操作。</p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/PWAUoF.jpg"></p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="分支命名"><a href="#分支命名" class="headerlink" title="分支命名"></a>分支命名</h4><p><strong>master 分支</strong></p><ul><li>master 为主分支，也是用于部署生产环境的分支，确保 master 分支稳定性</li><li>master 分支一般由 develop 以及 hotfix 分支合并，任何时间都不能直接修改代码</li></ul><p><strong>develop 分支</strong></p><ul><li>develop 为开发分支，始终保持最新完成以及 bug 修复后的代码</li><li>一般开发的新功能时，feature 分支都是基于 develop 分支下创建的</li></ul><p><strong>feature 分支</strong></p><ul><li>开发新功能时，以 develop 为基础创建 feature 分支</li><li>分支命名: feature/ 开头的为特性分支， 命名规则: feature/user_module、 feature/cart_module</li></ul><p><strong>release 分支</strong></p><ul><li>release 为预上线分支，发布提测阶段，会 release 分支代码为基准提测</li></ul><pre class="line-numbers language-none"><code class="language-none">当有一组feature开发完成，首先会合并到develop分支，进入提测时，会创建release分支。如果测试过程中若存在bug需要修复，则直接由开发者在release分支修复并提交。当测试完成之后，合并release分支到master和develop分支，此时master为最新代码，用作上线。复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>hotfix 分支</strong></p><ul><li>分支命名: hotfix/ 开头的为修复分支，它的命名规则与 feature 分支类似</li><li>线上出现紧急问题时，需要及时修复，以 master 分支为基线，创建 hotfix 分支，修复完成后，需要合并到 master 分支和 develop 分支</li></ul><h4 id="常见任务"><a href="#常见任务" class="headerlink" title="常见任务"></a>常见任务</h4><p><strong>增加新功能</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>dev<span class="token punctuation">)</span>$: <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/xxx            <span class="token comment"># 从dev建立特性分支</span><span class="token punctuation">(</span>feature/xxx<span class="token punctuation">)</span>$: blabla                         <span class="token comment"># 开发</span><span class="token punctuation">(</span>feature/xxx<span class="token punctuation">)</span>$: <span class="token function">git</span> <span class="token function">add</span> xxx<span class="token punctuation">(</span>feature/xxx<span class="token punctuation">)</span>$: <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'commit comment'</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span>$: <span class="token function">git</span> merge feature/xxx --no-ff          <span class="token comment"># 把特性分支合并到dev</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修复紧急 bug</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$: <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix/xxx         <span class="token comment"># 从master建立hotfix分支</span><span class="token punctuation">(</span>hotfix/xxx<span class="token punctuation">)</span>$: blabla                         <span class="token comment"># 开发</span><span class="token punctuation">(</span>hotfix/xxx<span class="token punctuation">)</span>$: <span class="token function">git</span> <span class="token function">add</span> xxx<span class="token punctuation">(</span>hotfix/xxx<span class="token punctuation">)</span>$: <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'commit comment'</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$: <span class="token function">git</span> merge hotfix/xxx --no-ff       <span class="token comment"># 把hotfix分支合并到master，并上线到生产环境</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span>$: <span class="token function">git</span> merge hotfix/xxx --no-ff          <span class="token comment"># 把hotfix分支合并到dev，同步代码</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试环境代码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>release<span class="token punctuation">)</span>$: <span class="token function">git</span> merge dev --no-ff             <span class="token comment"># 把dev分支合并到release，然后在测试环境拉取并测试</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>生产环境上线</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$: <span class="token function">git</span> merge release --no-ff          <span class="token comment"># 把release测试好的代码合并到master，运维人员操作</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span>$: <span class="token function">git</span> tag <span class="token parameter variable">-a</span> v0.1 <span class="token parameter variable">-m</span> <span class="token string">'部署包版本名'</span>  <span class="token comment">#给版本命名，打Tag</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/9czDAj.jpg"></p><h3 id="日志规范"><a href="#日志规范" class="headerlink" title="日志规范"></a>日志规范</h3><blockquote><p>在一个团队协作的项目中，开发人员需要经常提交一些代码去修复 bug 或者实现新的 feature。而项目中的文件和实现什么功能、解决什么问题都会渐渐淡忘，最后需要浪费时间去阅读代码。但是好的日志规范 commit messages 编写有帮助到我们，它也反映了一个开发人员是否是良好的协作者。</p></blockquote><p><strong>编写良好的 Commit messages 可以达到 3 个重要的目的：</strong></p><ul><li>加快 review 的流程</li><li>帮助我们编写良好的版本发布日志</li><li>让之后的维护者了解代码里出现特定变化和 feature 被添加的原因</li></ul><p><strong>目前，社区有多种 Commit message 的写法规范。来自 Angular 规范是目前使用最广的写法，比较合理和系统化。如下图：</strong></p><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/UlbImQ.jpg"></p><h4 id="Commit-messages-的基本语法"><a href="#Commit-messages-的基本语法" class="headerlink" title="Commit messages 的基本语法"></a>Commit messages 的基本语法</h4><p>当前业界应用的比较广泛的是 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0">Angular Git Commit Guidelines</a></p><p>具体格式为:</p><pre class="line-numbers language-none"><code class="language-none">&lt;type&gt;: &lt;subject&gt;&lt;BLANK LINE&gt;&lt;body&gt;&lt;BLANK LINE&gt;&lt;footer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>type: 本次 commit 的类型，诸如 bugfix docs style 等</li><li>scope: 本次 commit 波及的范围</li><li>subject: 简明扼要的阐述下本次 commit 的主旨，在原文中特意强调了几点 1. 使用祈使句，是不是很熟悉又陌生的一个词，来传送门在此 祈使句 2. 首字母不要大写 3. 结尾无需添加标点</li><li>body: 同样使用祈使句，在主体内容中我们需要把本次 commit 详细的描述一下，比如此次变更的动机，如需换行，则使用 |</li><li>footer: 描述下与之关联的 issue 或 break change，详见案例</li></ul><p><strong>Type 的类别说明：</strong></p><ul><li>feature: 添加新特性/新功能</li><li>upgrade: 功能升级或代码变更</li><li>fix: 修复 bug</li><li>docs: 仅仅修改了文档或 README</li><li>style: 仅仅修改了空格、格式缩进、或者主题 UI 变更 等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复 bug</li><li>perf: 增加代码进行性能测试</li><li>test: 增加测试用例</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li></ul><h4 id="Commit-messages-格式要求"><a href="#Commit-messages-格式要求" class="headerlink" title="Commit messages 格式要求"></a>Commit messages 格式要求</h4><p>对于 Git Commit Message 并明确的标准，但也有一些好的原则：</p><ul><li>使提交信息业务相关</li><li>提交信息中写明类型</li><li>必要时要写描述(Decription)</li><li>提交主题尽量简短</li><li>尽量使用英文</li></ul><pre class="line-numbers language-none"><code class="language-none"># 标题行：50个字符以内，描述主要变更内容## 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:## * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等# * 他如何解决这个问题? 具体描述解决问题的步骤# * 是否存在副作用、风险?## 如果需要的化可以添加一个链接到issue地址或者其它文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://juejin.im/post/6847902225029660680">Git 如何写出优雅的 Commit Message</a><br><a href="https://juejin.im/post/6844903721244033038">利用 emoji 让的 git commit 生动清晰起来</a><br><a href="https://juejin.im/post/6844903606815064077">优雅的提交你的 Git Commit Message</a></p><h3 id="利用-emoji-让的-git-commit-生动清晰起来"><a href="#利用-emoji-让的-git-commit-生动清晰起来" class="headerlink" title="利用 emoji 让的 git commit 生动清晰起来"></a>利用 emoji 让的 git commit 生动清晰起来</h3><p>有一些多人合作的项目同事提了 commit，你还需要花时间去看什么提交了什么，因为什么提交。<br>有了 emoji 之后，例如看到有条虫 🐛 就知道他这次版本就是改了 bug 了。<br>非常方便快捷，话不多说，开始吧。</p><p>如何食用：commit 时填写以下图标对应代码即可，例如： <code>:bug:</code> 解决下单问题。</p><p>🎨 <span class="github-emoji"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">改进代码结构或者格式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⚡ <span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">提高效率。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🔥 <span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">删除代码或文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🐛 <span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">修复bug。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🚑 <span class="github-emoji"><span>🚑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">删除代码或文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🔥 <span class="github-emoji"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">删除代码或文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>✨ <span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">增加新功能。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>📝 <span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">书写文档，例如修改readme.md。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🚀 <span class="github-emoji"><span>🚀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">部署项目。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>💄 <span class="github-emoji"><span>💄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">更新UI和样式文件，例如更新css（前端应该经常都要这个涂唇膏的）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🎉 <span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">首次提交 first commit。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>✅ <span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">添加测试。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🔒 <span class="github-emoji"><span>🔒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">解决安全问题。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>♻ <span class="github-emoji"><span>♻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">重构代码。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>➕ <span class="github-emoji"><span>➕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">添加依赖。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>➖ <span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">删除依赖。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🔧 <span class="github-emoji"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">更改配置文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>💩 <span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">编写需要改进的错误代码（这个emoji也太真实了吧）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>➖ <span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-none"><code class="language-none">删除依赖。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://emojihomepage.com/">http://emojihomepage.com/</a><br><a href="https://gitmoji.carloscuesta.me/">https://gitmoji.carloscuesta.me/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 适配器模式</title>
      <link href="/20171210/designpattern-structure-adapter/"/>
      <url>/20171210/designpattern-structure-adapter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-适配器模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-适配器模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 适配器模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 适配器模式</h1><blockquote><p>适配器模式把一个类的接口变换成客户端所期待的另外一个接口，从而使原本因接口不匹配而无法一起工作的两个类能够在一起工作<br>适配器分为类适配器和对象适配器两张</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>系统需要使用现有的类，而此类的接口不符合系统的需要，即接口不兼容</li><li>想要建立一个可重复利用的类，用于与一些彼此之间没有太大关联的类一起工作</li><li>需要一个统一的输出接口，而输入端的类型不可预知</li></ol><h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-14-Adapter-of-class.uml.png" alt="类适配器"><br>类适配器是通过实现 Target 接口以及继承 Adaptee 类来实现接口转换，如目标接口需要 operator2(), 但是 Adaptee 对象只有 operator3()，因此就出现了不兼容情况。此时可以通过 Adapter 实现一个 operator2()将 Adaptee 的 operator3()转换为 Target 需要的 operator2()</p><p>角色介绍:</p><ul><li>Target: 目标角色，也就是接口所期待得到的接口。（类适配器模式，此目标不可以是类）</li><li>Adaptee: 现在需要适配的接口</li><li>Adapter: 适配器角色，核心类，把不兼容的接口转换成目标所需接口，这一角色必须是具体类</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/12/10. * &lt;p&gt; * desc: 笔记本电脑一都是需要5V电压，而生活电压一般都是220V，这个时候就产生了不兼容情况 * 需要一个适配器来把220V电压转换成5V电压 * 对应就是Target需要得到5V电压，而Adaptee正常输出220V，Adapter类则是继承Adaptee实现Target * 将220V转为5V，解决接口不兼容问题 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">VoltAdapter</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoltAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出电压: "</span> <span class="token operator">+</span> adapter<span class="token punctuation">.</span><span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/12/10. * &lt;p&gt; * desc: Target 角色 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FiveVolt</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/12/10. * &lt;p&gt; * desc: Adaptee 角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Volt220</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVolt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/12/10. * &lt;p&gt; * desc: Adapter 角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Volt220</span> <span class="token keyword">implements</span> <span class="token class-name">FiveVolt</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><h3 id="UML-类图-1"><a href="#UML-类图-1" class="headerlink" title="UML 类图"></a>UML 类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-14-Adapter-of-object.uml.png"><br>与类适配器一样，对象适配器模式把被适配类的 API 转为目标类的 API，与类适配器模式不同的是：对象适配器模式不是使用继承关系连接到 Adaptee，而是使用代理关系，UML 类图如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 基于类适配器的示例修改Adapter</span><span class="token comment">/** * Created by Weicools on 2017/12/10. * &lt;p&gt; * desc: Adapter 角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">FiveVolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Volt220</span> mVolt220<span class="token punctuation">;</span>    <span class="token class-name">VoltAdapter</span><span class="token punctuation">(</span><span class="token class-name">Volt220</span> volt220<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mVolt220 <span class="token operator">=</span> volt220<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVOlt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mVolt220<span class="token punctuation">.</span><span class="token function">getVolt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/12/10. * &lt;p&gt; * desc: 笔记本电脑一都是需要5V电压，而生活电压一般都是220V，这个时候就产生了不兼容情况 * 需要一个适配器来把220V电压转换成5V电压 * 直接将被适配的对象传到Adapter中，使用组合形式实现接口兼容效果 * 比类适配器更加灵活，适配对象的方法也不会暴露出来 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">VoltAdapter</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoltAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Volt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出电压: "</span> <span class="token operator">+</span> adapter<span class="token punctuation">.</span><span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol><li>对象适配器直接将要适配的对象传到 Adapter 中，使用组合的形式实现接口兼容的效果，比类适配器更加灵活</li><li>对象适配器还不会将被适配对象的方法暴露出来，而类适配器是继承被适配的类，不够灵活。</li><li>实际开发中 Adapter 常用预进行不兼容类型的转换场景，还有一种就是输入有多种情况，而输出只有一种的时候，可以通过 Adapter 统一进行输出。</li><li>尽可能使用对象适配器，多使用组合少使用继承。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作多功能启动U盘, 轻松完成系统安装和维护</title>
      <link href="/20171202/make-multiboot-udisk/"/>
      <url>/20171202/make-multiboot-udisk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="制作多功能启动-U-盘-轻松完成系统安装和维护"><a href="#制作多功能启动-U-盘-轻松完成系统安装和维护" class="headerlink" title="制作多功能启动 U 盘, 轻松完成系统安装和维护"></a>制作多功能启动 U 盘, 轻松完成系统安装和维护</h1><blockquote><p>本教程仅适用于 EFI 引导的电脑，安装的系统也需要支持 EFI 引导。</p></blockquote><p>平时给自己或者别人重装系统的频率还算挺高的，因为有时候要装 macOS 有时候要装 Windows，每次都要重新把安装包刷到我的 U 盘里，不但非常折腾，而且对寿命也不好。于是整理了一下把安装盘都塞到一个 U 盘里，这个 U 盘不仅可以选择启动多个系统，而且当某一个系统的安装盘需要更新的时候，并不需要抹掉整个盘，只要单独处理对应的分区就好，非常方便。启动的时候效果是这样的：</p><span id="more"></span><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-MiPro%20Boot.jpg" alt="引导画面"> 启动箱选择界面</p><pre><code>* Linpus lite (sanDisk) -- 引导试用/安装/启动 Ubuntu 16.04.3* EFI USB Device (SanDisk) -- 引导`macOS安装和启动` 以及 `Windows/Linux等支持EFI引导的系统启动`* EFI USB Device 1 (SanDisk) -- 引导Windows系统安装* EFI USB Device 2 (SanDisk) -- 引导进入WeiPE</code></pre><p>这个 U 盘包括了一个 macOS 安装器、一个 Ubuntu 16.04.3 、一个 Windows10 安装器 和一个 WinPE。接下来的教程就是教大家怎样制作一个这样的启动 U 盘并应对一些启动问题。</p><h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><ol><li><p>至少 16GB 的 U 盘, 32GB 最佳</p></li><li><p><a href="https://itunes.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12">macOS 安装程序</a> (7GB++, 根据安装程序大小决定)</p></li><li><p><a href="http://releases.ubuntu.com/16.04/">Linux 安装镜像</a> (2GB++, 根据安装镜像大小决定)</p></li><li><p><a href="https://msdn.itellyou.cn/">Windows 安装镜像</a> (5GB++, 根据安装镜像大小决定)</p></li><li><p><a href="http://www.wepe.com.cn/download.html">WeiPE 生成的镜像</a> (300MB++, 根据安装镜像大小决定)</p></li><li><p>其他软件工具: 磁盘工具, <a href="http://www.zdfans.com/6959.html">DiskGenius</a>, <a href="http://unetbootin.github.io/">Unetbootin</a>, <a href="https://sourceforge.net/projects/cloverefiboot/?source=typ_redirect">CloverBootLoader</a></p><ul><li>U 盘建议使用 USB 3.0 的</li><li>macOS 可以直接从 AppStore 下载原版安装文件</li><li>Linux 可以去 Ubuntu 官网下载, 也可以使用其他发行版 Linux(需要支持 EFI)</li><li>Windows 原版镜像可以从 I tell you 上获取</li><li>PE 可以使用 WeiPE 或者 AOMEI PE, 本教程使用 WeiPE(PE 需要的工具基本自带)</li></ul><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-162348.png"></p></li></ol><h2 id="制作-macOS-安装盘"><a href="#制作-macOS-安装盘" class="headerlink" title="制作 macOS 安装盘"></a>制作 macOS 安装盘</h2><ol><li><p>打开磁盘工具，首先在左边选中你的 U 盘，<strong>注意是选中 U 盘而不是其中的分区</strong>，之后点击抹掉按钮，这会把整个磁盘抹成 GPT。⚠️<strong>该操作会清空 U 盘的全部内容，注意备份。</strong>⚠️（虽然一些软件可以直接转换 MBR 和 GPT，不过我还是觉得直接都抹掉比较干净）</p><p>按照下面的做法，将分区格式选为 Mac OS 扩展（日志式），方案选择 GUID 分区图。点击抹掉。有一定概率出现第一次抹掉不成功的情况，是由于系统没有正确卸载磁盘导致的，这个 Bug 很常见。如果第一次失败了，就再试一次基本上就没问题了。</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-162915.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-162943.png"></p></li><li><p>之后还是选中 U 盘，点击分区。你现在应该看到整个硬盘使用一个分区。点击下面的加号新建一个分区，上面的硬盘会被平均分为两个。选择右边的一个（第一个分区），在右侧的详细信息中将分区的名称改为「macOS」（在之后的写入命令中我们会用到这个名称），将大小改为 7.5GB（其实可以再小一点，但是为了能够兼容之后的 macOS 更新以及能够放一些常用程序，这里 7.5 是一个比较合理的大小）</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163036.png"></p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163210.png"></p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163239.png"></p></li><li><p>用命令制作安装盘<br>命令(具体可参照下图)：<code>sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/macOS --applicationpath /Applications/Install\ macOS\ High\ Sierra.app --nointeraction</code><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-QQ20171203-003628.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163919.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-164734.png"></p></li><li><p>安装 Clover 引导<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-165039.png"></p><p>安装完成后放 Kexts，主题，APFS 驱动，配置 config.plist……</p></li><li><p>拷贝常用软件<br>可以往 Install macOS High Sierra 安装盘放些驱动/常用 App/工具之类的，安装完系统可以从 U 盘里面拷贝使用.</p></li></ol><h2 id="写入-Linux-Windows-PE-镜像"><a href="#写入-Linux-Windows-PE-镜像" class="headerlink" title="写入 Linux/Windows/PE 镜像"></a>写入 Linux/Windows/PE 镜像</h2><ol><li><p>进入 Windows 系统(也可以使用虚拟机，系统可能会提示分区损坏，取消掉不要格式化，这是因为 Windows 读不了 HFS+ 的分区), 准备好工具: <a href="http://www.zdfans.com/6959.html">DiskGenius</a>, <a href="http://unetbootin.github.io/">Unetbootin</a>, 镜像：<a href="http://releases.ubuntu.com/16.04/">Linux 安装镜像</a>, <a href="https://msdn.itellyou.cn/">Windows 安装镜像</a>, <a href="http://www.wepe.com.cn/download.html">WeiPE 生成的镜像</a></p></li><li><p>打开 DiskGenius, 删除在 macOS 上分出来的区<code>Others</code>, 然后未分区的位置新建分区如下图：按照镜像大小 new 出三个 FAT32 分区，分别是 LINUX, WIN10, WEIPE。(卷标自己命名，新建分区时以 GB 为单位只能新建出整数大小，可以在新建完这个分区后对其调整)<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-1-delete.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-2-newLinuxPart.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-3-chang-size.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-4-newWinPart.png"></p></li><li><p>新建完分区后。使用 Unetbootin 把对应的系统镜像写入到对应分区中：⚠️<strong>千万不要选错，把别的分区抹掉就要重来了。</strong>⚠️<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-5-copyUbuntu.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-6-copyWin10.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-Windows10%20make.png"></p><p>对于 WEIPE，官网下载得到的是 WeiPE.exe 文件，打开并选择<code>生成ISO文件</code>，得到 ISO 文件后，直接<code>双击打开</code>，<code>全选里面的文件拷贝到PE分区</code> 或者 用<code>Unetbootin写入</code>也一样。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-WEIPE-1.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-WEIPE-2.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-WEIPE-3.png"></p></li><li><p>最终得到的效果如下(不要在意 U 盘和盘符，我用两个 U 盘分别做了一次，截图乱了点 ╮(￣ ▽ ￣)╭)，重启按 F12(通常是 F12)进入启动项选择界面即可选择对应的启动项。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-newThreePart.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-final.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-MiPro%20Boot.jpg" alt="引导画面"></p></li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><ol><li>安装盘有了新版本怎么办？<ul><li>只要抹掉该分区，重新按照之前的步骤刷入即可。Windows 也是同理，不过要在 Windows 中就格式化对应分区重新写入。</li></ul></li><li>有安装盘的那些分区可以自己存文件么？<ul><li>当然可以，可用空间里面随便存，不会浪费。比如 Install macOS High Sierra 的盘可以放些驱动/常用 App 之类的，安装完系统可以从 U 盘里面拷贝使用，WIN10 分区可以放些 PE 没有的一些工具，也可以存自己日常的一些文件，不过最好新建文件夹来存储。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-032556.png"><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-032634.png"></li></ul></li><li>推出 U 盘的时候总是无法推出怎么办？<ul><li>因为四个区的关系，在较慢的 U 盘上推出的时候会非常的卡，这是正常现象，多等一会就好了。</li></ul></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://sspai.com/post/41960">制作一个四合一维护 U 盘，重装系统还能有多方便？</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/02/booting.html">计算机是如何启动的 - 阮一峰</a></li><li><a href="https://www.zhihu.com/question/21672895">UEFI 和 BIOS 引导有什么不同 - 知乎</a></li><li><a href="https://decio.eu/2014/01/16/correct-name-and-icons-in-startup-manager/">Correct name and icons in Startup Manager </a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗影精灵2Plus GTX1060独显亮度调节实现</title>
      <link href="/20170826/hp2plus-gtx1060-brightness/"/>
      <url>/20170826/hp2plus-gtx1060-brightness/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="暗影精灵-2Plus-GTX1060-独显亮度调节实现"><a href="#暗影精灵-2Plus-GTX1060-独显亮度调节实现" class="headerlink" title="暗影精灵 2Plus GTX1060 独显亮度调节实现"></a>暗影精灵 2Plus GTX1060 独显亮度调节实现</h1><blockquote><p>Foreword：本来打算毕业工作了再换本的，但是实在受不了之前那个低压 U 本 Yoga13 了，开个 IDE 和模拟器就快炸了，玩个 LOL 一打团就变 PPT 玩个蛇皮；然后然后看到**<code>暗影精灵2Plus</code><strong>七代 U 版本比首发价还低 1000 就忍不住剁手了 🤣，总体体验：性能不用说，i7+GTX1060 甜品显卡基本都可以玩，72％色域 IPS 屏幕也是很棒，缺点 17.3 寸比较重、台达电源 230W 好大一块砖、键盘方向键反人类 🙃<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-023638.jpg" alt="Order"><br>回到主题：这本惠普自己把</strong><code>核显HD630屏蔽</code><strong>了，Windows 设备管理器都看不到（Windows 上不插电源没法玩游戏），Hackintosh 岂不是可以直接用 GTX1060 了 😉 美滋滋，虽然是用上了但是</strong><code>亮度调节</code>**一直不行，直到昨天才搞定。</p></blockquote><span id="more"></span><ol><li>本次参考的教程：<ul><li><a href="http://bbs.pcbeta.com/viewthread-1742873-9-1.html">【笔记本 GTX1060】现在弄好了调节亮度啦-远景论坛-微软极客社区</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1714158-1-1.html">蓝天 p6xxrx 准系统 EFI 10.12 （神舟战神 z7s3）-远景论坛-微软极客社区</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1663916-1-1.html">GTX970M-原生亮度调节-远景论坛-微软极客社区</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1473634-1-1.html">轻松注入 EDID 参数-远景论坛-微软极客社区</a></li></ul></li><li>使用到的工具：<ul><li><a href="https://bitbucket.org/blackosx/darwindumper/downloads/">DarwinDumper_v3.0.3</a></li><li><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;tid=1525657">注入 EDID 的利器：FixEDID 2.3.2(12 楼已有热心会员做的汉化版)</a></li><li><a href="https://bitbucket.org/RehabMan/os-x-maciasl-patchmatic/downloads/">MaciASL DSDT 和 SSDT 工具</a></li><li><a href="https://bitbucket.org/RehabMan/acpica/downloads/">Acpica iasl 反编译脚步工具</a></li><li><a href="http://www.insanelymac.com/forum/files/file/397-easykext-pro-a-minimal-and-super-fast-kext-installer/">EasyKext Pro 驱动安装和权限修复</a></li></ul></li></ol><h2 id="一-注入-EDID"><a href="#一-注入-EDID" class="headerlink" title="一.注入 EDID"></a>一.注入 EDID</h2><ol><li><p>打开 DarwinDumper_v3.0.3 直接点击 Run（也可只选 EDID）<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-031521.jpg" alt="DarwinDumper_v3.0.3"><br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-031613.jpg" alt="Report"></p><blockquote><p>之前我用教程带的 DarwinDumper2.8.8 生成的 bin 文件在 FixEDID2.3 导入报错，2.3 版本目测选 hex 文件会有问题，坑啊 🙃，还好去找到了最新的版本 3.0.3 用起来没啥问题</p></blockquote></li><li><p>打开 FixEDID 2.3.2，打开 EDID 文件选择刚才生成的 EDID.bin，其他需要勾选的图上已做标注：选择显示器型号，下面两个都选 AppleBlacklightDisplay，然后点击 make 得到三个东西：DisplayVendorID-xxx 文件夹、DisplayMergeNub.kext、EDID-xxx.bin。然后需要做的是<code>把驱动安装到S/L/E并修复缓存</code> 或者 <code>把DisplayVendorID-xxx文件夹放到/System/Library/Displays/Contents/Resources/Overrides目录下</code> 推荐使用驱动注入，重新启动看看显示器情况。<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-26-155155.jpg" alt="FixEDID"></p><blockquote><p>坑点：把 FixEDID 中显示器型号都试了一遍，生成的驱动安装到 S/L/E 均无效，功能扩展显示<code>签名验证错误</code><br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-26-134239.jpg" alt="Kextsign"><br>无奈只能选择把 <strong>显示器的 Overrides 文件</strong> 扔到 <code>/System/Library/Displays/Contents/Resources/Overrides</code> ，这种方式也存在不少问题，多数型号开机卡住（强制关机然后-V 模式可进入），部分是没有任何效果，只有 MacBook Pro 16:10 可行，当时效果如下：<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-26-154719.jpg" alt="MBP"><br>17.3 寸显示器显示成了 13.3 寸 🙃</p></blockquote></li></ol><h2 id="二-DSDT-部分"><a href="#二-DSDT-部分" class="headerlink" title="二.DSDT 部分"></a>二.DSDT 部分</h2><ol><li><p>打补丁：Brightness fix（加入 PLNF 代码，记得先把已存在的 PLNF 重命名）<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-26-103057.jpg" alt="Brightness"></p></li><li><p>最关键地方：打开 IORegistryExplorer 搜索 display，查看 AppleDisplay 所在位置<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-23-040403.jpg" alt="AppleDisplay"><br>打开 MaciASL，选择相应 DSDT 文件，在 DSDT 下的 PEG0 下 PEGP 总加入_DSM 方法，注入代码如下:</p><pre class="line-numbers language-none"><code class="language-none">Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method{   If (LEqual (Arg2, Zero))   {       Return (Buffer (One)       {            0x03       })   }   Return (Package (0x16)   {       "@1,AAPL,boot-display",       Buffer (One)       {            0x01       },       "@1,backlight-control",       Buffer (0x04)       {            0x01, 0x00, 0x00, 0x00       },       "@1,built-in",       Buffer (One)       {            0x01       },       "@0,connector-type",       Buffer (0x04)       {            0x00, 0x08, 0x00, 0x00       },       "@1,connector-type",       Buffer (0x04)       {            0x00, 0x04, 0x00, 0x00       },       "@2,connector-type",       Buffer (0x04)       {            0x00, 0x04, 0x00, 0x00       },       "@3,connector-type",       Buffer (0x04)       {            0x00, 0x04, 0x00, 0x00       },       "@4,connector-type",       Buffer (0x04)       {            0x00, 0x04, 0x00, 0x00       },       "@5,connector-type",       Buffer (0x04)       {            0x00, 0x04, 0x00, 0x00       },       "@1,pwm-info",       Buffer (0x14)       {           /* 0000 */  0x01, 0x14, 0x00, 0x64, 0xA8, 0x61, 0x00, 0x00,           /* 0008 */  0x1E, 0x02, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,           /* 0010 */  0x00, 0x04, 0x00, 0x00       },       "hda-gfx",       Buffer (0x0A)       {           "onboard-1"       }   })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：”@1,AAPL,boot-display”, “@1,backlight-control”,”@1,built-in”,”@1,pwm-info”这几个地方，@1 是显示器所在位置，根据 IORegistryExplorer 显示：我的是在 NVDA,Display-B@1。<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-DSDT%20AppleDisplay.png" alt="DSDT AppleDisplay"><br>插入完代码保存 DSDT，把它放到<code>/EFI/CLOVER/ACPI/patched</code>，Clover 中勾选注入即可，重启即可看到加载的是 AppleBlacklightDisplay<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-043716.jpg" alt="AppleBlacklightDisplay"></p></blockquote></li></ol><h2 id="三-替换驱动"><a href="#三-替换驱动" class="headerlink" title="三.替换驱动"></a>三.替换驱动</h2><ol><li>10.12.4 下可不用替换 AppleBacklight.kext，但是 10.12.5/10.12.6 需要替换，10.13 未知，驱动分享链接: <a href="https://pan.baidu.com/s/1mhPjxqS">https://pan.baidu.com/s/1mhPjxqS</a> 密码: 6666</li><li>使用 EasyKext 安装修复缓存即可。</li></ol><h2 id="四-效果展示"><a href="#四-效果展示" class="headerlink" title="四.效果展示"></a>四.效果展示</h2><p>完成上面三步，基本上就是 OK 了~重启电脑试试吧 😉😉😉！！！（我的亮度直接是可保存的，若不可以请参考：<a href="http://bbs.pcbeta.com/viewthread-1538926-1-1.html">[分享] 解决开机第二阶段花屏和 Clover 脚本不生成 nvram.plist 导致不能保存亮度的问题</a>）</p><p><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-043359.jpg" alt="概览"><br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-043512.jpg" alt="显示器图形卡"><br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-043606.jpg" alt="亮度调节1"><br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-044609.jpg" alt="亮度调节2"><br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2017-08-27-044641.jpg" alt="亮度调节3"></p><blockquote><p><strong>差不多就结束了吧，踩得坑还是不少，尤其是注入 EDID，之前一直不行所有放弃放弃……，但是看到论坛有不少人都可以实现独显亮度调节，忍不住又回来重试了好几遍，折腾啊……</strong>🙃🙃🙃</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Hackintosh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 责任链模式</title>
      <link href="/20170318/designpattern-behavior-chain-of-responsibility/"/>
      <url>/20170318/designpattern-behavior-chain-of-responsibility/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-责任链模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-责任链模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 责任链模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 责任链模式</h1><blockquote><p>锁链这种链式结构，每个节点都可以被拆开再连接，因此链式结构也具有很好的灵活性，在编程领域，将每一个节点看作一个对象，每个对象有不同的处理逻辑，将一个请求从链式的首端出发，沿着路径依次传递到每个节点对象，直到有对象处理这个请求为止。<br>定义: 责任链模式是行为型设计模式之一，它使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>多个对象可以处理同一请求，但具体由哪个对象处理则在运行时动态决定。</li><li>在请求处理者不明确的情况下向多个对象中的一个提交请求。</li><li>需要动态指定一组对象处理请求。</li></ol><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Chain.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 抽象处理角色，申明一个请求处理方法 * 并在其中保持一个对下一个处理节点Handler的引用 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token comment">//下一个节点处理者</span>    <span class="token keyword">protected</span> <span class="token class-name">Handler</span> successor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 具体处理者角色，对请求进行处理，如果不能处理就转发给下一个处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerA</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerA handled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 具体处理者角色，对请求进行处理，如果不能处理就转发给下一个处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerB</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerB handled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ConcreteHandlerA</span> handlerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteHandlerB</span> handlerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerA<span class="token punctuation">.</span>successor <span class="token operator">=</span> handlerB<span class="token punctuation">;</span>        handlerB<span class="token punctuation">.</span>successor <span class="token operator">=</span> handlerA<span class="token punctuation">;</span>        handlerA<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandleB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>这个例子我觉得很贴切。我们在公司有各种原因需要报销费用，首先我们要找我们的上级领导去审批，报销额度如果在领导的权限范围内，那就审批通过，否则领导在找自己的上级去审批，以此类推。</p></blockquote><h3 id="抽象领导类"><a href="#抽象领导类" class="headerlink" title="抽象领导类"></a>抽象领导类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 上级领导处理者     */</span>    <span class="token keyword">protected</span> <span class="token class-name">Leader</span> nextHandler<span class="token punctuation">;</span>    <span class="token comment">/**     * 处理报账请求     *     * @param money 能批复的报账额度     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>money <span class="token operator">&lt;=</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">handle</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报账额度不足，提交领导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> nextHandler<span class="token punctuation">)</span><span class="token punctuation">{</span>                nextHandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 自身能批复的额度权限     *     * @return 额度     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 处理报账行为     *     * @param money 具体金额     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取处理者     *     * @return 处理者     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组长（额度-1000）："><a href="#组长（额度-1000）：" class="headerlink" title="组长（额度 1000）："></a>组长（额度 1000）：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupLeader</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"组长批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是组长"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主管（额度-5000）："><a href="#主管（额度-5000）：" class="headerlink" title="主管（额度 5000）："></a>主管（额度 5000）：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主管批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是主管"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="经理（额度-10000）："><a href="#经理（额度-10000）：" class="headerlink" title="经理（额度 10000）："></a>经理（额度 10000）：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经理批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是经理"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="老板（额度无上限）"><a href="#老板（额度无上限）" class="headerlink" title="老板（额度无上限）:"></a>老板（额度无上限）:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是老板"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发起申请："><a href="#发起申请：" class="headerlink" title="发起申请："></a>发起申请：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//构造各个领导对象</span>        <span class="token class-name">GroupLeader</span> groupLeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Manager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Boss</span> boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置上级领导处理者对象</span>        groupLeader<span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> director<span class="token punctuation">;</span>        director<span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> manager<span class="token punctuation">;</span>        manager<span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> boss<span class="token punctuation">;</span>        <span class="token comment">//发起报账申请</span>        groupLeader<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-none"><code class="language-none">当前是组长报账额度不足，提交领导当前是主管报账额度不足，提交领导当前是经理经理批复报销8000元123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>责任链模式非常灵活，请求的发起可以从责任链的任何一个节点开始，也可以改变内部的传递规则。比如主管不在，我们完全可以跨过主管直接从组长那里转到经理。</p><blockquote><p>对于责任链中的一个处理者对象，有两个行为。一是处理请求，二是将请求传递到下一节点，不允许某个处理者对象在处理了请求后又将请求传送给上一个节点的情况。<br>对于一条责任链来说，一个请求最终只有两种情况。一是被某个处理对象所处理，另一个是所有对象均未对其处理，对于前一种情况我们称为<strong>纯的责任链模式</strong>，后一种为<strong>不纯的责任链</strong>。实际中大多为不纯的责任链。</p></blockquote><h2 id="Android-源码中的责任链模式"><a href="#Android-源码中的责任链模式" class="headerlink" title="Android 源码中的责任链模式"></a>Android 源码中的责任链模式</h2><ul><li>View 事件的分发处理</li></ul><p>ViewGroup 事件投递的递归调用就类似于一条责任链，一旦其寻找到责任者，那么将由责任者持有并消费掉该次事件，具体体现在 View 的 onTouchEvent 方法中返回值的设置，如果返回 false，那么意味着当前的 View 不会是该次的责任人，将不会对其持有；如果返回 true，此时 View 会持有该事件并不再向外传递。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>优点<ul><li>可以对请求者和处理者的关系解耦，提高代码的灵活性。</li></ul></li><li>缺点<ul><li>每次都需要对链中请求处理者遍历，如果处理者太多那么遍历必定会影响性能，特别是在一些递归调用者中，要慎用。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 命令模式</title>
      <link href="/20170318/designpattern-behavior-command/"/>
      <url>/20170318/designpattern-behavior-command/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-命令模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-命令模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 命令模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 命令模式</h1><blockquote><p>命令模式是行为型模式之一。总体来说并不难理解，只是比较繁琐，他会将简单的调用关系解耦成多个部分，增加类的复杂度，但是即便如此，命令模式的结构依然清晰。<br>定义: 将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>（1）需要抽出待执行的动作，然后以参数的形式提供出来。</li><li>（2）在不同的时刻指定、排列和执行请求。一个命令对象可以有与初始请求无关的生存期。</li><li>（3）需要支持操作取消。</li><li>（4）支持修改日志功能，这样当系统崩溃时，这些修改可以被重做一遍。</li><li>（5）需要支持事务操作。</li></ul><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Command.png"></p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>以推箱子游戏为例，一般游戏中会有五个按钮，分别是左移、右移、下移、上移和撤销。那么玩游戏的人就是客户端，五个按钮就是调用者，执行具体按钮命令的方法是命令角色。</p></blockquote><h3 id="接收者角色：推箱子游戏"><a href="#接收者角色：推箱子游戏" class="headerlink" title="接收者角色：推箱子游戏"></a>接收者角色：推箱子游戏</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushBox</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 执行向左命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向左"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 执行向右命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向右"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 执行向下命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 执行向上命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 执行撤销命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"撤销"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令者抽象"><a href="#命令者抽象" class="headerlink" title="命令者抽象"></a>命令者抽象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 命令执行方法     */</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取命令类型     */</span>    <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体命令者，左移命令类"><a href="#具体命令者，左移命令类" class="headerlink" title="具体命令者，左移命令类"></a>具体命令者，左移命令类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeftCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> <span class="token class-name">PushBox</span> pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LeftCommand</span><span class="token punctuation">(</span><span class="token class-name">PushBox</span> pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向左--&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体命令者，右移命令类"><a href="#具体命令者，右移命令类" class="headerlink" title="具体命令者，右移命令类"></a>具体命令者，右移命令类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RightCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> <span class="token class-name">PushBox</span> pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RightCommand</span><span class="token punctuation">(</span><span class="token class-name">PushBox</span> pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向右--&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体命令者，上移命令类"><a href="#具体命令者，上移命令类" class="headerlink" title="具体命令者，上移命令类"></a>具体命令者，上移命令类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> <span class="token class-name">PushBox</span> pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UpCommand</span><span class="token punctuation">(</span><span class="token class-name">PushBox</span> pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向上--&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体命令者，下移命令类"><a href="#具体命令者，下移命令类" class="headerlink" title="具体命令者，下移命令类"></a>具体命令者，下移命令类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> <span class="token class-name">PushBox</span> pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DownCommand</span><span class="token punctuation">(</span><span class="token class-name">PushBox</span> pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向下--&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体命令者，撤销命令类"><a href="#具体命令者，撤销命令类" class="headerlink" title="具体命令者，撤销命令类"></a>具体命令者，撤销命令类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RevokeCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> <span class="token class-name">PushBox</span> pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RevokeCommand</span><span class="token punctuation">(</span><span class="token class-name">PushBox</span> pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求者类，命令由按钮发起"><a href="#请求者类，命令由按钮发起" class="headerlink" title="请求者类，命令由按钮发起"></a>请求者类，命令由按钮发起</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Buttons</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">LeftCommand</span> leftCommand<span class="token punctuation">;</span> <span class="token comment">//向左移动的命令对象引用</span>    <span class="token keyword">private</span> <span class="token class-name">RightCommand</span> rightCommand<span class="token punctuation">;</span> <span class="token comment">//向右移动的命令对象引用</span>    <span class="token keyword">private</span> <span class="token class-name">UpCommand</span> upCommand<span class="token punctuation">;</span> <span class="token comment">//向上移动的命令对象引用</span>    <span class="token keyword">private</span> <span class="token class-name">DownCommand</span> downCommand<span class="token punctuation">;</span> <span class="token comment">//向下移动的命令对象引用</span>    <span class="token keyword">private</span> <span class="token class-name">RevokeCommand</span> revokeCommand<span class="token punctuation">;</span> <span class="token comment">//撤销命令对象引用</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span> commandList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于记录命令动作</span>    <span class="token comment">/**     * 获取执行命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommandList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Command</span> c <span class="token operator">:</span> commandList<span class="token punctuation">)</span><span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置向左移动的命令对象     *     * @param leftCommand 向左移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftCommand</span><span class="token punctuation">(</span><span class="token class-name">LeftCommand</span> leftCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>leftCommand <span class="token operator">=</span> leftCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置向右移动的命令对象     *     * @param rightCommand 向右移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightCommand</span><span class="token punctuation">(</span><span class="token class-name">RightCommand</span> rightCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rightCommand <span class="token operator">=</span> rightCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置向上移动的命令对象     *     * @param upCommand 向上移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpCommand</span><span class="token punctuation">(</span><span class="token class-name">UpCommand</span> upCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>upCommand <span class="token operator">=</span> upCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置向下移动的命令对象     *     * @param downCommand 向下移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDownCommand</span><span class="token punctuation">(</span><span class="token class-name">DownCommand</span> downCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>downCommand <span class="token operator">=</span> downCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置撤销命令对象     *     * @param revokeCommand 撤销命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRevokeCommand</span><span class="token punctuation">(</span><span class="token class-name">RevokeCommand</span> revokeCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>revokeCommand <span class="token operator">=</span> revokeCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 按下向左按钮     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        leftCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 按下向右按钮     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rightCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 按下向上按钮     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        upCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>upCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 按下向下按钮     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        downCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>downCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 按下撤销按钮     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRevoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        revokeCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>commandList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//首先创建游戏</span>        <span class="token class-name">PushBox</span> pushBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据游戏构造5种命令</span>        <span class="token class-name">LeftCommand</span> leftCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeftCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RightCommand</span> rightCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RightCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UpCommand</span> upCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DownCommand</span> downCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RevokeCommand</span> revokeCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RevokeCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按钮可以执行不同命令</span>        <span class="token class-name">Buttons</span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buttons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setLeftCommand</span><span class="token punctuation">(</span>leftCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setRightCommand</span><span class="token punctuation">(</span>rightCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setUpCommand</span><span class="token punctuation">(</span>upCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setDownCommand</span><span class="token punctuation">(</span>downCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setRevokeCommand</span><span class="token punctuation">(</span>revokeCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行操作</span>        buttons<span class="token punctuation">.</span><span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">getCommandList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toRevoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">getCommandList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><pre class="line-numbers language-none"><code class="language-none">向左向下向下向右向左--&gt;向下--&gt;向下--&gt;向右--&gt;撤销向上向左向下向上向左--&gt;向下--&gt;向下--&gt;向上--&gt;向左--&gt;向下--&gt;向上--&gt;1234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这么长的代码之后是不是觉得很烦琐，明明可以很简单的实现，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//首先创建游戏</span>        <span class="token class-name">PushBox</span> pushBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushBox<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushBox<span class="token punctuation">.</span><span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushBox<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实设计模式有一个重要的原则：对修改关闭对扩展开放。如果使用如上的简单方式，那么以后的修改只能去修改 PushBox 类，然后修改 Client 类，这显然违反了这一原则。如果使用命令模式，那么 Client 类无需修改，只需要修改 PushBox 类的内部操作，Client 类无需知道具体的内部实现。</p><blockquote><p>设计模式的使用之前也有提到，主要是要看当前场景的复杂度和以后的需求进行扩展、维护等方面，完全使用设计模式也是不提倡的，这就需要设计者权衡利弊了。</p></blockquote><h2 id="Android-源码中的命令模式实现"><a href="#Android-源码中的命令模式实现" class="headerlink" title="Android 源码中的命令模式实现"></a>Android 源码中的命令模式实现</h2><ol><li>PackageHandler</li></ol><p>PackageManagerService 中，其对包的相关消息处理右其内部类 PackageHandler 承担，其将需要处理的请求作为对象通过消息传递给相关的方法，而对于包的安装、移动以及包大小的测量则分别封装为<strong>HandlerParams</strong>的具体子类<strong>InstallParams</strong>、<strong>MoveParams</strong>和<strong>MeasureParams</strong>。源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_RETRIES</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment">/**         * Number of times startCopy() has been attempted and had a non-fatal         * error.         */</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_INSTALL</span><span class="token punctuation">)</span> <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"startCopy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">&gt;</span> <span class="token constant">MAX_RETRIES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"Failed to invoke remote methods on default container service. Giving up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token constant">MCS_GIVE_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_INSTALL</span><span class="token punctuation">)</span> <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"Posting install MCS_RECONNECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token constant">MCS_RECONNECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">serviceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_INSTALL</span><span class="token punctuation">)</span> <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"serviceError"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出<strong>HandlerParams</strong>也是一个抽象命令者。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>优点<ul><li>命令模式的封装性很好，更弱的耦合性，更灵活的控制性以及更好的扩展性。</li></ul></li><li>缺点<ul><li>类的膨胀，大量衍生类的创建。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 迭代器模式</title>
      <link href="/20170318/designpattern-behavior-iterator/"/>
      <url>/20170318/designpattern-behavior-iterator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Ï</p><h1 id="《Android-源码设计模式解析与实战》读书笔记-迭代器模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-迭代器模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 迭代器模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 迭代器模式</h1><blockquote><p>迭代器模式，又叫做游标模式，是行为型设计模式之一。我们知道对容器对象的访问必然会涉及遍历算法，我们可以将遍历的方法封装在容器中，或者不提供遍历方法，让使用容器的人自己去实现去吧。这两种情况好像都能够解决问题。<br>然而在前一种情况，容器承受了过多的功能，它不仅要负责自己“容器”内的元素维护（添加、删除等等），而且还要提供遍历自身的接口；而且由于遍历状态保存的问题，不能对同一个容器对象同时进行多个遍历。第二种方式倒是省事，却又将容器的内部细节暴露无遗。<br>正因于此，迭代器模式应运而生，在客户访问类与容器体之间插入一个第三者–迭代器，很好的解决了上述弊端。<br>定义：提供一种方法顺序访问一个容器对象中的各个元素，而又不需要暴露该对象的内部表示。</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>遍历一个容器对象时。</p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Iterator.png"></p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>用书中的例子：小民和小辉分别在公司两个事业部，某天老板安排任务让他们俩统计一下各自部门的员工数据。</p></blockquote><h3 id="员工实体类："><a href="#员工实体类：" class="headerlink" title="员工实体类："></a>员工实体类：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 年龄</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token comment">// 性别</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> position<span class="token punctuation">;</span><span class="token comment">// 职位</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">,</span> <span class="token class-name">String</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 简化代码，省略setter和getter方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Employee{"</span> <span class="token operator">+</span> <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", sex="</span>                <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">", position='"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小辉部门："><a href="#小辉部门：" class="headerlink" title="小辉部门："></a>小辉部门：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyHui</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"辉哥"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小辉"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小民部门："><a href="#小民部门：" class="headerlink" title="小民部门："></a>小民部门：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyMin</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小民"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小芸"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小方"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"可儿"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"朗情"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//吐槽一下，为什么就小民一个男的，小辉部门全男的。</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Boss查看："><a href="#Boss查看：" class="headerlink" title="Boss查看："></a>Boss查看：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompanyHui</span> hui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huiList <span class="token operator">=</span> hui<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> huiList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>huiList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">CompanyMin</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> minList <span class="token operator">=</span> min<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-none"><code class="language-none">Employee{name='辉哥', age=28, sex=男, position='程序猿'}Employee{name='小红', age=23, sex=男, position='程序猿'}Employee{name='小辉', age=25, sex=男, position='程序猿'}Employee{name='小民', age=26, sex=男, position='程序猿'}Employee{name='小芸', age=22, sex=女, position='测试'}Employee{name='小方', age=18, sex=女, position='测试'}Employee{name='可儿', age=21, sex=女, position='设计'}Employee{name='朗情', age=19, sex=女, position='设计'}12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样看似也没有问题，但是如果有多个部门，每个部门有各自的实现，那么我们就要在Boss类中增加一遍遍历逻辑，这样Boss类的功能会越来越多，同时暴露了内部细节。那么我们需要定义一个迭代器接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 是否还有下一个元素      *      * @return true表示有，false表示没有     */</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 返回当前元素，并将位置移至下一位     */</span>    <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小民的迭代器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinIterator</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>position <span class="token operator">&gt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Employee</span> e <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        position<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小辉的迭代器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuiIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HuiIterator</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>position <span class="token operator">&gt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> array<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Employee</span> e <span class="token operator">=</span> array<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>        position<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义容器类的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 返回一个迭代器对象     *      * @return 迭代器对象     */</span>    <span class="token class-name">Iterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改一下之前的两个容器类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyHui</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"辉哥"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小辉"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuiIterator</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyMin</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小民"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小芸"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小方"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"可儿"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"朗情"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MinIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Boss查看：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompanyHui</span> hui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>hui<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompanyMin</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> iterator<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果不变，就不重复写了。</p><h2 id="Android源码中的模式实现"><a href="#Android源码中的模式实现" class="headerlink" title="Android源码中的模式实现"></a>Android源码中的模式实现</h2><h3 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h3><p>当我们使用SQLiteDatabase的query方法查询数据库时，会返回一个Cursor游标对象，该游标的实质就是一个具体的迭代器，我们可以使用它来遍历数据库查询所得的结果集。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>迭代器模式发展至今，几乎所有的高级语言都有相应的内置实现，对于开发者而言，已经极少会自己去实现迭代器了，所以本章内容更多的是了解而非应用。</p></blockquote><ol><li><p>优点</p><ul><li>符合面向对象设计原则中的单一职责原则。</li><li>支持对容器对象的多种遍历。弱化了容器类与遍历算法之间的关系。</li></ul></li><li><p>缺点</p><ul><li>类文件的增加。</li><li>会出现ConcurrentModificationException异常。</li><li>遍历过程是一个单向且不可逆的遍历。</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://dev.yesky.com/474/2168474.shtml">深入浅出Java设计模式之迭代器模式</a></li><li><a href="http://blog.csdn.net/lirunfa/article/details/7353857">ConcurrentModificationException异常</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 状态模式</title>
      <link href="/20170318/designpattern-behavior-state/"/>
      <url>/20170318/designpattern-behavior-state/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-状态模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-状态模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 状态模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 状态模式</h1><blockquote><p>定义：状态模式中的行为是由状态来决定，不同的状态下有不同的行为。当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。</li><li>代码中包含大量与对象状态有关的条件语句，例如，一个操作中含有大量的多分支语句，且这些分支依赖于该对象的状态。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-State.png"></li></ol><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>实现效果：首先将电视的状态分为开机与关机状态，开机时可以通过遥控器实现频道切换和调节音量，但是关机时，这些操作都会失效。</p></blockquote><h3 id="普通的实现方法："><a href="#普通的实现方法：" class="headerlink" title="普通的实现方法："></a>普通的实现方法：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVController</span> <span class="token punctuation">{</span>    <span class="token comment">//开机状态</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">POWER_ON</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//关机状态</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">POWER_OFF</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//默认状态</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mState <span class="token operator">=</span> <span class="token constant">POWER_OFF</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span><span class="token constant">POWER_OFF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视开机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mState <span class="token operator">=</span> <span class="token constant">POWER_ON</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span><span class="token constant">POWER_ON</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视关机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mState <span class="token operator">=</span> <span class="token constant">POWER_OFF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span><span class="token constant">POWER_ON</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span><span class="token constant">POWER_ON</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span><span class="token constant">POWER_ON</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调高音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span><span class="token constant">POWER_ON</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调低音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，每次执行通过判断当前状态来进行操作，部分的代码重复，假设状态和功能增加，就会越来越难以维护。这时可以使用状态模式，如下：</p><h3 id="电视的操作"><a href="#电视的操作" class="headerlink" title="电视的操作"></a>电视的操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 电视状态接口，定义了电视的操作函数 * * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TVState</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">12345678910111213</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关机状态"><a href="#关机状态" class="headerlink" title="关机状态"></a>关机状态</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * * 关机状态，操作无结果 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerOffState</span> <span class="token keyword">implements</span> <span class="token class-name">TVState</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开机状态"><a href="#开机状态" class="headerlink" title="开机状态"></a>开机状态</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * * 开机状态，操作有效 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerOnState</span> <span class="token keyword">implements</span> <span class="token class-name">TVState</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调高音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调低音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="电源操作接口"><a href="#电源操作接口" class="headerlink" title="电源操作接口"></a>电源操作接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 电源操作接口 * * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PowerController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="电视遥控器"><a href="#电视遥控器" class="headerlink" title="电视遥控器"></a>电视遥控器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 电视遥控器 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVController</span> <span class="token keyword">implements</span> <span class="token class-name">PowerController</span><span class="token punctuation">{</span>    <span class="token class-name">TVState</span> mTVState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTVState</span><span class="token punctuation">(</span><span class="token class-name">TVState</span> mTVState<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mTVState <span class="token operator">=</span> mTVState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTVState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PowerOnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTVState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PowerOffState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TVController</span> tvController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置开机状态</span>        tvController<span class="token punctuation">.</span><span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//下一频道</span>        tvController<span class="token punctuation">.</span><span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调高音量</span>        tvController<span class="token punctuation">.</span><span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关机</span>        tvController<span class="token punctuation">.</span><span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调低音量，此时不会生效</span>        tvController<span class="token punctuation">.</span><span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-none"><code class="language-none">开机了下一频道调高音量关机了1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，状态模式将这些行为封装到状态类中，在进行操作时将这些功能转发给状态对象，不同的状态有不同的实现，去除了重复了 if-else 语句，这正是状态模式的精髓所在。</p><h2 id="与策略模式的区别"><a href="#与策略模式的区别" class="headerlink" title="与策略模式的区别"></a>与策略模式的区别</h2><p>状态模式与策略模式的结构几乎是一样的，就像是孪生兄弟。但是他们的目地、本质不一样。状态模式的行为是平行的、不可替换的，策略模式的行为是彼此独立的、可相互替换的。状态模式，通常是自我控制状态的改变。而策略模式，是由外部指定使用什么样的策略。</p><h2 id="Android-实战中的使用"><a href="#Android-实战中的使用" class="headerlink" title="Android 实战中的使用"></a>Android 实战中的使用</h2><ol><li>登录系统，根据用户是否登录，判断事件的处理方式。</li><li>Wi-Fi 管理，在不同的状态下，WiFi 的扫描请求处理不一。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>优点<ul><li>将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转换成结构清晰的状态类族，在避免代码膨胀的同时也保证了可扩展性与可维护性。</li></ul></li><li>缺点<ul><li>状态模式的使用必然会增加系统类和对象的个数。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 策略模式</title>
      <link href="/20170318/designpattern-behavior-stragety/"/>
      <url>/20170318/designpattern-behavior-stragety/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-策略模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-策略模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 策略模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 策略模式</h1><blockquote><p>通常如果一个问题有多个解决方案时，最简单的就是利用 if-else 或者 switch-case 方式根据不同的情景选择不同的解决方案，但是这样耦合性太高 、代码臃肿、难以维护等。这时就可以使用策略模式来解决。<br>定义：策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。</li><li>需要安全地封装多种同一类型的操作时。</li><li>出现同一抽象类有多个子类，而又需要使用 if-else 或者 switch-case 来选择具体子类时。</li></ol><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Stragety-2.png"></p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>需求：计算图书价格，初级会员没有折扣，中级会员打 9 折，高级会员打 8 折。如果一般写法，应该是 if-else 判断他是什么级别的会员，在计算相应的折扣。下面使用策略模式来进行实现。</p></blockquote><h3 id="抽象折扣类"><a href="#抽象折扣类" class="headerlink" title="抽象折扣类"></a>抽象折扣类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MemberStrategy</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 计算图书的价格     * @param booksPrice    图书的原价     * @return    计算出打折后的价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初级会员折扣类"><a href="#初级会员折扣类" class="headerlink" title="初级会员折扣类"></a>初级会员折扣类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 初级会员折扣     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于初级会员的没有折扣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> booksPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中级会员折扣类"><a href="#中级会员折扣类" class="headerlink" title="中级会员折扣类"></a>中级会员折扣类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntermediateMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 中级会员折扣     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于中级会员的折扣为10%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> booksPrice <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">12345678910</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级会员折扣类"><a href="#高级会员折扣类" class="headerlink" title="高级会员折扣类"></a>高级会员折扣类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdvancedMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 高级会员折扣     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于高级会员的折扣为20%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> booksPrice <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="价格类"><a href="#价格类" class="headerlink" title="价格类"></a>价格类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Price</span> <span class="token punctuation">{</span>    <span class="token comment">//持有一个具体的策略对象</span>    <span class="token keyword">private</span> <span class="token class-name">MemberStrategy</span> strategy<span class="token punctuation">;</span>    <span class="token comment">/**     * 构造函数，传入一个具体的策略对象     * @param strategy    具体的策略对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">Price</span><span class="token punctuation">(</span><span class="token class-name">MemberStrategy</span> strategy<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计算图书的价格     * @param booksPrice    图书的原价     * @return    计算出打折后的价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">quote</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">calcPrice</span><span class="token punctuation">(</span>booksPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//选择并创建需要使用的策略对象</span>        <span class="token class-name">MemberStrategy</span> strategy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvancedMemberStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建环境</span>        <span class="token class-name">Price</span> price <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Price</span><span class="token punctuation">(</span>strategy1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算价格</span>        <span class="token keyword">double</span> quote <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">quote</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书的最终价格为："</span> <span class="token operator">+</span> quote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-none"><code class="language-none">对于高级会员的折扣为20%图书的最终价格为：240.012<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="策略模式和工厂模式的区别"><a href="#策略模式和工厂模式的区别" class="headerlink" title="策略模式和工厂模式的区别"></a>策略模式和工厂模式的区别</h2><table><thead><tr><th>工厂模式</th><th>策略模式</th></tr></thead><tbody><tr><td>创建型的设计模式</td><td>行为型的设计模式</td></tr><tr><td>关注对象创建</td><td>关注行为的选择</td></tr><tr><td>黑盒子（无需知道具体的实现过程）</td><td>白盒子（知道具体的实现过程）</td></tr></tbody></table><h2 id="Android-源码中的策略模式实现"><a href="#Android-源码中的策略模式实现" class="headerlink" title="Android 源码中的策略模式实现"></a>Android 源码中的策略模式实现</h2><p>时间插值器（TimeInterpolator）</p><p>LinearInterpolator、AccelerateInterpolator、CycleInterpolator 等实现 Interpolator，通过 getInterpolator（float input）获取当前的时间百分比，以此来计算动画的属性值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式主要用来分离算法，在相同的行为抽象下有不同的具体实现策略。这个模式很好地演示了开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的可扩展性。</p><ol><li>优点：<ul><li>结构清晰明了、使用简单直观。</li><li>耦合度相对而言较低，扩展方便。</li><li>操作封装也更为彻底，数据更为安全。</li></ul></li><li>缺点：<ul><li>随着策略的增加，子类也会变得繁多。</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.cnblogs.com/java-my-life/archive/2012/05/10/2491891.html">《JAVA 与模式》之策略模式</a></li><li><a href="http://www.cnblogs.com/me115/p/3790615.html">策略模式和工厂模式的区别</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 模板方法模式</title>
      <link href="/20170318/designpattern-behavior-template-method/"/>
      <url>/20170318/designpattern-behavior-template-method/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-模板方法模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-模板方法模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 模板方法模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 模板方法模式</h1><blockquote><p>模板方法模式是结构最简单的行为型设计模式，也是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。在其结构中只存在父类与子类之间的继承关系。<br>定义：定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><span id="more"></span><h2 id="模板方法模式中的方法"><a href="#模板方法模式中的方法" class="headerlink" title="模板方法模式中的方法"></a>模板方法模式中的方法</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Template.png"></p><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。这个模板方法定义在抽象类中，并由子类不加以修改地完全继承下来。所以模板方法大多会定义为<strong>final 类型</strong>，指明主要的逻辑功能在子类中不能被重写。模板方法是一个具体方法，它给出了一个顶层逻辑框架，而逻辑的组成步骤在抽象类中可以是具体方法，也可以是抽象方法。由于模板方法是具体方法，因此模板方法模式中的抽象层只能是抽象类，而不是接口。</p><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>（1）抽象方法：一个抽象方法由<strong>抽象类声明，由具体子类实现</strong>。在 Java 语言里抽象方法以 abstract 关键字标示。<br>（2）钩子方法：一个钩子方法由抽象类<strong>声明并实现</strong>，而子类会加以扩展。子类可以通过扩展钩子方法来影响模板方法的逻辑。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>（1）多个子类有公有的方法，并且逻辑基本相同。=<br>（2）重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能由各个子类实现。<br>（3）重构时，模板方法是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子方法约束其行为。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>以电脑开机为例，假设现在有两台电脑，一台 Windows 系统电脑，一台 Mac 系统电脑。但是开机流程基本一致：步骤为开启电源、系统检查、加载系统、检查是否需要登录。</p></blockquote><h3 id="抽象的-Computer"><a href="#抽象的-Computer" class="headerlink" title="抽象的 Computer"></a>抽象的 Computer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象的 Computer */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractComputer</span> <span class="token punctuation">{</span>    <span class="token comment">//下面是抽象方法，子类可以覆盖,不允许外部直接调用这些方法，所以用protected</span>    <span class="token comment">/**     * 开启电源     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 检查硬件     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 载入操作系统     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 登录     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//下面是钩子方法，声明并实现</span>    <span class="token comment">/**     * 是否需要登录     *     * @return true为需要登录     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//下面是模板方法，定义为final，子类不能覆盖此方法</span>    <span class="token comment">/**     * 启动计算机方法，步骤为开启电源、系统检查、加载系统、检查是否登录。     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">startUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------开机 START--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------- 开机 END --------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Windows-系统电脑（不需登录）："><a href="#Windows-系统电脑（不需登录）：" class="headerlink" title="Windows 系统电脑（不需登录）："></a>Windows 系统电脑（不需登录）：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Windows系统电脑 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsComputer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractComputer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows电脑开启电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows电脑检查硬件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows电脑载入操作系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//返回false，不需登录</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mac-系统电脑（需登录）："><a href="#Mac-系统电脑（需登录）：" class="headerlink" title="Mac 系统电脑（需登录）："></a>Mac 系统电脑（需登录）：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Mac系统电脑 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacComputer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractComputer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑开启电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑检查硬件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑载入操作系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AbstractComputer</span> comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comp<span class="token punctuation">.</span><span class="token function">startUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comp<span class="token punctuation">.</span><span class="token function">startUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-none"><code class="language-none">--------开机 START--------Windows电脑开启电源Windows电脑检查硬件Windows电脑载入操作系统-------- 开机 END ----------------开机 START--------Mac电脑开启电源Mac电脑检查硬件Mac电脑载入操作系统Mac电脑登录-------- 开机 END --------1234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Android-源码中的模板方法模式"><a href="#Android-源码中的模板方法模式" class="headerlink" title="Android 源码中的模板方法模式"></a>Android 源码中的模板方法模式</h2><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><p>在使用 AsyncTask 时，我们都知道把耗时操作放到 doInBackground(Params… params)中，在 doInBackground 之前，如果想做一些初始化操作，可以把实现写在 onPreExecute 中，当 doInBackground 执行完后会执行 onPostExecute 方法，而我们只需要构建 AsyncTask 对象，然后执行 execute 方法。</p><h3 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h3><p>ActivityThread 的 main 函数被调用后，依次执行 Activity 的 onCreate、onStart、onResume 函数，用户通常在 Activity 的子类中覆写 onCreate 方法，并且在该方法中调用 setContentView 来设置布局。</p><h2 id="与其他模式区别"><a href="#与其他模式区别" class="headerlink" title="与其他模式区别"></a>与其他模式区别</h2><ul><li>（1）工厂方法是模板方法的一种特殊版本。</li><li>（2）策略模式和模板方法模式都是封装算法，一个用组合，一个用继承。</li><li>（3）策略模式和模板模式通常可以互相替换。它们都像试卷，策略模式是选择题，模板模式是填空题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>模板方法模式用 4 个字概括就是：流程封装。也就是把某个固定的流程封装到一个 final 方法中，并且让子类能够定制这个流程中的某些或者所有步骤，这就要求父类提取公用的代码，提升代码的复用率，同时带来了更好的可扩展性。</p></blockquote><ol><li><p>优点</p><ul><li>（1）封装不变部分，扩展可变部分。</li><li>（2）提取公共部分代码，便于维护。</li></ul></li><li><p>缺点</p><ul><li>需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，可结合桥接模式来进行设计。</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.cnblogs.com/lzhp/p/3404514.html"> 模板方法模式（Head first 设计模式——7）</a></li><li><a href="http://blog.csdn.net/zhengzhb/article/details/7405608"> 模板方法模式</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 组合模式</title>
      <link href="/20170318/designpattern-structure-composite/"/>
      <url>/20170318/designpattern-structure-composite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-组合模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-组合模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 组合模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 组合模式</h1><blockquote><p>组合模式也称为部分-整体模式，结构型设计模式之一。组合模式比较简单，它将一组相似的对象当作一个对象处理，并根据树状结构来组合对象<br>定义：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p></blockquote><span id="more"></span><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>表示对象的部分-整体层次结构时。</li><li>从一个整体中能够独立出部分模块或功能的场景。</li></ol><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><h3 id="安全组合模式"><a href="#安全组合模式" class="headerlink" title="安全组合模式"></a>安全组合模式</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-composite.png" alt="Composite"></p><ul><li>（1）<code>Component</code>：抽象根节点，为组合中的对象声明接口。在适当的情况下，实现所有类共有接口的缺省行为。声明一个接口用于访问和管理 Component 的子节点。可在递归结构中定义一个接口，用于访问一个父节点，并在合适的情况下实现它。</li><li>（2）<code>Composite</code>：定义有子节点的那些枝干节点行为，存储子节点，在 Component 接口中实现与子节点有关的操作。</li><li>（3）<code>Leaf</code>：在组合中表示叶子节点对象，叶子节点没有子节点，在组合中定义节点对象的行为。</li><li>（4）<code>Client</code>：通过 Component 接口操纵组合节点的对象。</li></ul><blockquote><p>如图这种将组合所使用的方法全部定义在抽象类的方式称为<strong>透明的组合模式</strong>，如果将 Component 中的 Add、Remove、GetChild 去除，只在 Composite 中单独添加，这种方式称为<strong>安全的组合模式</strong>。然而后者违背了依赖倒置原则。</p></blockquote><p>通用组合摸底代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 抽象根节点，为组合中的对象声明接口。在适当的情况下，实现所有类共有接口的缺省行为 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 需要子类实现     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 具体分支节点，定义有子节点行为 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 存储节点容器     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> mComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mComponentList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Component</span> component <span class="token operator">:</span> mComponentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加子节点     * @param component 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 移除子节点     * @param component 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取子节点     * @param index 子节点下标     * @return 子节点     */</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mComponentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 具体叶子节点，叶子节点没有子节点，在组合中定义节点对象的行为 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 通过Component接口操纵组合节点的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//构造一个根节点</span>        <span class="token class-name">Composite</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造两个分支子节点</span>        <span class="token class-name">Composite</span> branch1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Composite</span> branch2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造两个叶子节点</span>        <span class="token class-name">Leaf</span> leaf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Leaf</span> leaf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将叶子节点添加到分支子节点</span>        branch1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf1<span class="token punctuation">)</span><span class="token punctuation">;</span>        branch2<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将分支子节点添加到根节点</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="透明组合模式"><a href="#透明组合模式" class="headerlink" title="透明组合模式"></a>透明组合模式</h3><p>上面安全组合模式与依赖倒置原则相违背，所定义的抽象 Component 在这里的作用不大，既然是面向接口编程，那么更多的应该是完善接口设计，对上面的接口做一些修改：<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-composite-transparent.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 抽象根节点，为组合中的对象声明接口。在适当的情况下，实现所有类共有接口的缺省行为 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 具体由子类实现     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 添加子节点     *     * @param child 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 移除子节点     *     * @param child 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取子节点     *     * @param index 子节点下标     * @return 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Component</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 具体分支节点，定义有子节点行为 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 存储节点容器     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> mComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mComponentList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Component</span> component <span class="token operator">:</span> mComponentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mComponentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 具体叶子节点，叶子节点没有子节点，某些操作抛出异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"叶子节点没有子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"叶子节点没有子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"叶子节点没有子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 通过Component接口操纵组合节点的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//构造一个根节点</span>        <span class="token class-name">Composite</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造两个分支子节点</span>        <span class="token class-name">Composite</span> branch1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Composite</span> branch2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造两个叶子节点</span>        <span class="token class-name">Leaf</span> leaf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Leaf</span> leaf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将叶子节点添加到分支子节点</span>        branch1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf1<span class="token punctuation">)</span><span class="token punctuation">;</span>        branch2<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将分支子节点添加到根节点</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>以文件系统为例，文件系统包含文件和文件夹，而文件夹也可以包含文件。</p></blockquote><h3 id="文件和文件夹的抽象类：（Component）"><a href="#文件和文件夹的抽象类：（Component）" class="headerlink" title="文件和文件夹的抽象类：（Component）"></a>文件和文件夹的抽象类：（Component）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 表示文件和文件夹的抽象类(Component角色) */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span>    <span class="token comment">//申明List成员变量存储文件夹下所有元素</span>    <span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dir</span><span class="token punctuation">&gt;</span></span> mDirList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件名或者文件夹名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Dir</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加一个文件或者文件夹     *     * @param dir 文件或者文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addDir</span><span class="token punctuation">(</span><span class="token class-name">Dir</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 删除文件或者文件夹     *     * @param dir 文件或者文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeDir</span><span class="token punctuation">(</span><span class="token class-name">Dir</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 情况文件夹下所有元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 输出文件夹目录结构     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取文件夹下所有的文件和子文件夹     *     * @return 文件和子文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dir</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表示文件夹的类：（Composite）"><a href="#表示文件夹的类：（Composite）" class="headerlink" title="表示文件夹的类：（Composite）"></a>表示文件夹的类：（Composite）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 文件夹类(Composite角色) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Folder</span> <span class="token keyword">extends</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDir</span><span class="token punctuation">(</span><span class="token class-name">Dir</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDirList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeDir</span><span class="token punctuation">(</span><span class="token class-name">Dir</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDirList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDirList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dir</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> mDirList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Dir</span> dir <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dir<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dir</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDirList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表示文件夹的类：（Leaf）"><a href="#表示文件夹的类：（Leaf）" class="headerlink" title="表示文件夹的类：（Leaf）"></a>表示文件夹的类：（Leaf）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 文件类(Leaf角色) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDir</span><span class="token punctuation">(</span><span class="token class-name">Dir</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeDir</span><span class="token punctuation">(</span><span class="token class-name">Dir</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dir</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户测试类："><a href="#客户测试类：" class="headerlink" title="客户测试类："></a>客户测试类：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//构造一个目录表示SD卡根目录</span>        <span class="token class-name">Dir</span> sdCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"Storage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//SD卡下有一个文件"设计模式.pdf"</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"设计模式.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//SD卡下有3个子文件夹"ADM", "Android", "Books"</span>        <span class="token class-name">Dir</span> adm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"ADM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adm<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"google.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span>adm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dir</span> an <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        an<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"cache.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dir</span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"Books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"跳槽指南.md"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-none"><code class="language-none">Storage(设计模式.pdf, ADM(google.html), Android(cache.txt), Books(跳槽指南.md))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Android-源码中的模式实现"><a href="#Android-源码中的模式实现" class="headerlink" title="Android 源码中的模式实现"></a>Android 源码中的模式实现</h2><ul><li>View 和 ViewGroup 的嵌套组合</li></ul><p>View 和 ViewGroup 的结构很像上面的 UML 类图，不过 View 的视图层级使用的是安全的组合模式。ViewGroup 有对 View 的 addView、removeView、getChildAt 等方法，想必大家也很熟悉。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>优点</p><ul><li>（1）组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，他让高层模块忽略了层次的差异，方便对整个层次结构进行控制。</li><li>（2）简化了高层模块的代码。</li><li>（3）在组合模式中增加新的枝干构件和叶子构件都很方便，无须对现有类库进行修改，符合“开闭原则”。</li><li>（4）对树形结构的控制变得简单。</li></ul></li><li><p>缺点</p><ul><li>组合模式不容易限制组合中的构件。因为大多数情况下，它们都来自于相同的抽象层，此时，必须进行类型检查来实现，这个实现过程较为复杂。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 桥接模式</title>
      <link href="/20170318/designpattern-structure-bridge/"/>
      <url>/20170318/designpattern-structure-bridge/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-桥接模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-桥接模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 桥接模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 桥接模式</h1><blockquote><p>桥接模式也称为桥梁模式，是结构型设计模式之一。桥接模式中体现了“单一职责原则”、“开闭原则”、“里氏替换原则”、“依赖倒置原则”等，同时它也是很实用的一种模式。<br><strong>定义</strong>：将抽象部分 与 实现部分 分离，使它们都可以独立地进行变化。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>（1）如果一个系统需要在构建的抽象化角色和具体角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系。</li><li>（2）对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，也可以考虑使用桥接模式。</li><li>（3）一个类存在两个独立变化的维度，且这两个维度都需要扩展。</li></ul><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Bridge.png" alt="Bridge"></p><ul><li>（1）<code>Abstraction</code>：抽象部分，该类保持一个对实现部分对象的引用，抽象部分中的方法需要调用实现部分的对象来实现，该类一般为抽象类。</li><li>（2）<code>RefinedAbstraction</code>：优化抽象部分，抽象部分的具体实现，该类一般是对抽象部分的方法进行完善和扩展。</li><li>（3）<code>Implementor</code>：实现部分。可以为接口或抽象类，其方法不一定要与抽象部分中的一致，一般情况下是由现实部分提供基本操作，而抽象部分定义的则是基于实现部分这些基本操作的业务方法。</li><li>（4）<code>ConcreteImplementorA</code>、<code>ConcreteImplementorB</code>：实现部分的具体实现。完善实现部分中的方法定义的具体逻辑。</li></ul><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 实现部分的抽象接口 */public interface Implementor {    /**     * 实现部分的接口方法     */    void operationImpl();}/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 实现部分的具体实现 */public class ConcreteImplementorA implements Implementor {    @Override    public void operationImpl() {        // 实现部分的具体实现    }}/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 抽象部分的抽象类 */public abstract class Abstraction {    //实现部分的引用    private Implementor mImplementor;    /**     * 通过实现部分的对象引用构造抽象部分的对象     * @param implementor 实现部分对象引用     */    public Abstraction(Implementor implementor) {        mImplementor = implementor;    }    /**     * 调用实现部分的具体方法实现     */    public void operation() {        mImplementor.operationImpl();    }}/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 抽象部分的子类 */public class RefineAbstraction extends Abstraction {    /**     * 通过实现部分的对象引用构造抽象部分的对象     *     * @param implementor 实现部分对象引用     */    public RefineAbstraction(Implementor implementor) {        super(implementor);    }    public void refineOperation() {        //对Abstraction方法进行扩展    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>以去咖啡店喝咖啡为例，我们假定咖啡有大杯加糖、大杯不加糖、小杯加糖和小杯不加糖四种<br>这四种实质上就是两种变化：一是大杯小杯，二是加糖不加糖</p></blockquote><h3 id="给咖啡添加东西的抽象类：（Implementor）"><a href="#给咖啡添加东西的抽象类：（Implementor）" class="headerlink" title="给咖啡添加东西的抽象类：（Implementor）"></a>给咖啡添加东西的抽象类：（Implementor）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeAdditives</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 需要往咖啡中加什么     * @return 具体添加的东西     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加糖类实现：（ConcreteImplementorA）"><a href="#加糖类实现：（ConcreteImplementorA）" class="headerlink" title="加糖类实现：（ConcreteImplementorA）"></a>加糖类实现：（ConcreteImplementorA）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddSugar</span> <span class="token keyword">extends</span> <span class="token class-name">CoffeeAdditives</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"加糖"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原味类实现：（ConcreteImplementorB）"><a href="#原味类实现：（ConcreteImplementorB）" class="headerlink" title="原味类实现：（ConcreteImplementorB）"></a>原味类实现：（ConcreteImplementorB）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ordinary</span> <span class="token keyword">extends</span> <span class="token class-name">CoffeeAdditives</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"原味"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="咖啡类：（Abstraction）"><a href="#咖啡类：（Abstraction）" class="headerlink" title="咖啡类：（Abstraction）"></a>咖啡类：（Abstraction）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">CoffeeAdditives</span> mAdditives<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token class-name">CoffeeAdditives</span> additives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAdditives <span class="token operator">=</span> additives<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 咖啡杯大小由子类决定     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大杯咖啡：（RefinedAbstraction）"><a href="#大杯咖啡：（RefinedAbstraction）" class="headerlink" title="大杯咖啡：（RefinedAbstraction）"></a>大杯咖啡：（RefinedAbstraction）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span><span class="token class-name">CoffeeAdditives</span> additives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>additives<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大杯的"</span> <span class="token operator">+</span> mAdditives<span class="token punctuation">.</span><span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小杯咖啡：（RefinedAbstraction）"><a href="#小杯咖啡：（RefinedAbstraction）" class="headerlink" title="小杯咖啡：（RefinedAbstraction）"></a>小杯咖啡：（RefinedAbstraction）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmallCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">SmallCoffee</span><span class="token punctuation">(</span><span class="token class-name">CoffeeAdditives</span> additives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>additives<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小杯的"</span> <span class="token operator">+</span> mAdditives<span class="token punctuation">.</span><span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AddSugar</span> sugar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ordinary</span> ordinary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ordinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//大杯加糖</span>        <span class="token class-name">LargeCoffee</span> largeSugarCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeSugarCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//大杯原味</span>        <span class="token class-name">LargeCoffee</span> largeOrdinaryCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span>ordinary<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeOrdinaryCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//小杯加糖</span>        <span class="token class-name">SmallCoffee</span> smallSugarCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmallCoffee</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span><span class="token punctuation">;</span>        smallSugarCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//小杯原味</span>        <span class="token class-name">SmallCoffee</span> smallOrdinaryCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmallCoffee</span><span class="token punctuation">(</span>ordinary<span class="token punctuation">)</span><span class="token punctuation">;</span>        smallOrdinaryCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-none"><code class="language-none">大杯的加糖咖啡大杯的原味咖啡小杯的加糖咖啡小杯的原味咖啡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Android-源码中的桥接模式"><a href="#Android-源码中的桥接模式" class="headerlink" title="Android 源码中的桥接模式"></a>Android 源码中的桥接模式</h3><ul><li>桥接模式在 Android 中应用广泛，比如：在 View 的视图顶层中，CheckBox、CompoundButton、Button、TextView 和 View 之间构成一个继承关系的视图层级，每一层级都仅仅是对一种类型控件的实现，它们定义了该类控件所拥有的基本属性和行为，但是真正将他们绘制到屏幕的部分是由与 View 相关的功能实现类 DisplayList、HardwareLayer、Canvas 负责。</li><li>另外还有比较典型的 Window 与 WindowManager<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Window%26WindowManager.png"></li></ul><p>主要代码如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public abstract class Window {   //部分省略   /**     * Set the window manager for use by this Window to, for example,     * display panels.  This is &lt;em&gt;not&lt;/em&gt; used for displaying the     * Window itself -- that must be done by the client.     *     * @param wm The window manager for adding new windows.     */    public void setWindowManager(WindowManager wm, IBinder appToken, String appName) {        setWindowManager(wm, appToken, appName, false);    }    /**     * Set the window manager for use by this Window to, for example,     * display panels.  This is &lt;em&gt;not&lt;/em&gt; used for displaying the     * Window itself -- that must be done by the client.     *     * @param wm The window manager for adding new windows.     */    public void setWindowManager(WindowManager wm, IBinder appToken, String appName,            boolean hardwareAccelerated) {        mAppToken = appToken;        mAppName = appName;        mHardwareAccelerated = hardwareAccelerated                || SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);        if (wm == null) {            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);        }        //*将Window与WindowManager绑定        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);    }    //部分省略 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Window：<a href="https://developer.android.com/reference/android/view/Window.html">https://developer.android.com/reference/android/view/Window.html</a><br>WindowManager：<a href="https://developer.android.com/reference/android/view/WindowManager.html">https://developer.android.com/reference/android/view/WindowManager.html</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>优点<ul><li>（1）分离抽象与现实、灵活的扩展以及对客户来说透明的实现。</li><li>（2）桥接模式可以取代多层继承，大大减少了子类的个数。</li></ul></li><li>缺点<ul><li>不容易设计，对开发者来说要有一定的经验要求。理解很容易，设计却不容易。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 外观模式</title>
      <link href="/20170318/designpattern-structure-facade/"/>
      <url>/20170318/designpattern-structure-facade/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-外观模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-外观模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 外观模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 外观模式</h1><blockquote><p>外观模式(Facade)是结构型设计模式之一，它在开发中的运用频率非常高，尤其是在 SDK 模块上，是我们封装 API 的常用手段。我们经常使用的三方 SDK 基本都使用的外观模式，这样可以对用户屏蔽很多实现细节，降低用户使用成本。</p></blockquote><span id="more"></span><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式提供一个高层次的接口，使得子系统更易于使用。</p><h2 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h2><ul><li>为复杂子系统提供一个简单接口，对外隐藏子系统的具体实现、隔离变化。</li><li>当你需要构建一个层次结构的子系统时，使用外观模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过外观接口进行通信，从而简化了它们之间的依赖关系。</li></ul><h2 id="3-UML-类图"><a href="#3-UML-类图" class="headerlink" title="3.UML 类图"></a>3.UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Facade-Pattern-1.png"></p><ul><li><code>Facade</code>：系统对外的统一接口，系统内部系统地工作。</li><li><code>其他分支</code>：子系统接口。</li></ul><p>可以看出外观模式结构很简单，但是如果没有封装，那么用户就要操作几个子系统的交互逻辑，容易出现错误。</p><h2 id="4-简单实例"><a href="#4-简单实例" class="headerlink" title="4.简单实例"></a>4.简单实例</h2><blockquote><p>手机集合了电话功能、短信功能、拍照和 GPS 等功能。那么以手机为例，简单的用外观模式实现一下。</p></blockquote><h3 id="Phone-接口与-PhoneImpl："><a href="#Phone-接口与-PhoneImpl：" class="headerlink" title="Phone 接口与 PhoneImpl："></a>Phone 接口与 PhoneImpl：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 打电话     */</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 挂断     */</span>    <span class="token keyword">void</span> <span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 电话模块实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挂断电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Camera-接口与-Camera-的实现类："><a href="#Camera-接口与-Camera-的实现类：" class="headerlink" title="Camera 接口与 Camera 的实现类："></a>Camera 接口与 Camera 的实现类：</h3><pre class="line-numbers language-none"><code class="language-none">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: */public interface Camera {    /**     * 打开相机     */    void open();    /**     * 拍照     */    void takePicture();    /**     * 关闭相机     */    void close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 相机模块实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonyCamera</span> <span class="token keyword">implements</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开相机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拍个照片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭相机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外观类-MobileFacade："><a href="#外观类-MobileFacade：" class="headerlink" title="外观类 MobileFacade："></a>外观类 MobileFacade：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 外观类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobileFacade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Phone</span> mPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Camera</span> mCamera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SonyCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">videoChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"视频正在连接……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCamera<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPhone<span class="token punctuation">.</span><span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mCamera<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCamera<span class="token punctuation">.</span><span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mCamera<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2018/3/17. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MobileFacade</span> mobileFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MobileFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobileFacade<span class="token punctuation">.</span><span class="token function">videoChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobileFacade<span class="token punctuation">.</span><span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobileFacade<span class="token punctuation">.</span><span class="token function">closeCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">打开相机拍照--&gt; 视频聊天接通中打开相机打电话12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Android-源码中的外观模式"><a href="#5-Android-源码中的外观模式" class="headerlink" title="5.Android 源码中的外观模式"></a>5.Android 源码中的外观模式</h2><p><code>Context</code> 是 Android 开发中的最重要一个，是程序的运行环境，它封装了很多重要操作，例如: startActivity(), startService(), sendBroadcast(), bindService().</p><p><code>Context</code> 是一个抽象类，它的真正实现是<code>ContextImpl</code> 类，通过查看<code>ContextImpl</code> 源码我们可以看到<code>ContextImpl</code>内部封装了很多不同子系统的操作。例如：Activity 的跳转、发送广播、启动服务和设置壁纸等，这些工作不是在<code>ContextImpl</code> 中实现，而是交给了具体的子系统进行处理。通过<code>Context</code> 这个抽象类定义了一组接口，<code>ContextImpl</code>实现。这样用户通常情况下就不需要对每个子系统进行了解。这样对用户屏蔽了具体的实现细节，降低了使用成本。</p><h2 id="6-Summary"><a href="#6-Summary" class="headerlink" title="6.Summary"></a>6.Summary</h2><ol><li><p>优点</p><ul><li>对客户程序隐藏子系统的细节，因而减少了客户对于子系统的耦合，能够拥抱变化。</li><li>外观类对子系统的接口封装，使得系统更易于使用。</li></ul></li><li><p>缺点</p><ul><li>外观类接口膨胀。由于子系统的接口都有外观类统一对外暴露，使得外观类的 API 接口较多，在一定程度上增加了用户使用成本。</li><li>外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 装饰着模式</title>
      <link href="/20170318/designpattern-structure-decorator/"/>
      <url>/20170318/designpattern-structure-decorator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-装饰着模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-装饰着模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 装饰着模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 装饰着模式</h1><blockquote><p>装饰模式也称为包装模式，是结构型设计模式之一。它使用一种对客户端透明的方式来动态扩展对象的功能，是一种用于替代继承技术的一种方案。<br>定义：动态的给对象添加一些额外的职责，就增加功能来说，它比生成子类更加灵活。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>需要透明且动态地扩展类的功能时。且在不影响其他对象的情况下。</li><li>当不能采用继承对系统进行扩展时可以使用装饰模式。比如 final 类。</li></ul><h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-decorator.png" alt="decorator"></p><ul><li><code>Component</code>：抽象组件。可以是一个接口或抽象类，其充当的就是被装饰的原始对象。</li><li><code>ConcreteComponent</code>：组件具体实现类，该类是 Component 类的基本实现，也是我们装饰的具体对象。</li><li><code>Decorator</code>：抽象装饰者，其职责就是装饰我们的组件对象，通过其子类扩展该方法以达到装饰的目的。其内部一定要有一个指向组件对象的引用。在大多数情况下，该类为抽象类，需要根据不同的装饰逻辑实现不同的具体子类。</li><li><code>ConcreteDecoratorA</code>、<code>ConcreteDecoratorB</code>：装饰着具体实现类。负责向构件添加新的职责。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 抽象组件类，可以是抽象类也可以是接口 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 抽象组件的抽象方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 具体组件实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 具体逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 抽象装饰者 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Component</span> mComponent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponent <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponent<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 装饰者具体实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 装饰者具体实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: 客户调用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//被装饰的组件对象</span>        <span class="token class-name">Component</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据组件对象构造装饰者A并调用，相当于给组件对象增加装饰着A的功能</span>        <span class="token class-name">Decorator</span> decoratorA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorA<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据组件对象构造装饰者B并调用，相当于给组件对象增加装饰着B的功能</span>        <span class="token class-name">Decorator</span> decoratorB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorB<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>以一个男孩穿衣装扮为例。实现给男孩在家与出门的穿衣装扮。</p></blockquote><h3 id="抽象组件类（Component）："><a href="#抽象组件类（Component）：" class="headerlink" title="抽象组件类（Component）："></a>抽象组件类（Component）：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 穿着     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体实现类（ConcreteComponent）：表示要装扮的-Boy"><a href="#具体实现类（ConcreteComponent）：表示要装扮的-Boy" class="headerlink" title="具体实现类（ConcreteComponent）：表示要装扮的 Boy"></a>具体实现类（ConcreteComponent）：表示要装扮的 Boy</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boy穿了内衣内裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象装饰类（Decorator）：PersonCloth-表示人所穿着的衣服"><a href="#抽象装饰类（Decorator）：PersonCloth-表示人所穿着的衣服" class="headerlink" title="抽象装饰类（Decorator）：PersonCloth 表示人所穿着的衣服"></a>抽象装饰类（Decorator）：PersonCloth 表示人所穿着的衣服</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PersonCloth</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Person</span> mPerson<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PersonCloth</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson <span class="token operator">=</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用Person的dressed()方法</span>        mPerson<span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="穿贵的衣服："><a href="#穿贵的衣服：" class="headerlink" title="穿贵的衣服："></a>穿贵的衣服：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpensiveCloth</span> <span class="token keyword">extends</span> <span class="token class-name">PersonCloth</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ExpensiveCloth</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressJean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿条牛仔裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressLeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿件皮衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressJean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressLeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="穿便宜的衣服："><a href="#穿便宜的衣服：" class="headerlink" title="穿便宜的衣服："></a>穿便宜的衣服：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheapCloth</span> <span class="token keyword">extends</span> <span class="token class-name">PersonCloth</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CheapCloth</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressShirt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿件短袖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿条短裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressShirt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装扮："><a href="#装扮：" class="headerlink" title="装扮："></a>装扮：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/18. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PersonCloth</span> cheapCloth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheapCloth</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        cheapCloth<span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PersonCloth</span> expensiveCloth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpensiveCloth</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        expensiveCloth<span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-none"><code class="language-none">Boy穿了内衣内裤穿件短袖穿条短裤*************Boy穿了内衣内裤穿条牛仔裤穿件皮衣<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Android-源码中的实现"><a href="#Android-源码中的实现" class="headerlink" title="Android 源码中的实现"></a>Android 源码中的实现</h2><ul><li><p>Context</p></li><li><p><code>Context</code>类在 Android 中被称为“上帝对象”，它的本质就是一个抽象类，在装饰模式中相当于抽象组件，而在内部定义了大量的抽象方法，比如我们经常用到的<code>startActivity</code>方法。</p></li><li><p>而真正实现是在<code>ContextImpl</code>中完成，那么<code>ContextImpl</code> 就是抽象组件的具体实现类。</p></li><li><p><code>Activity</code>从类的层次来看本质是图个 Context，但是<code>Activity</code>并非直接继承<code>Context</code>，而是继承<code>ContextThemeWrapper</code>, <code>ContextThemeWrapper</code>有是继承<code>ContextWrapper</code>，因为<code>ContextWrapper</code> 继承于<code>Context</code>，所以<code>ContextWrapper</code> 就是装饰者，<code>ContextWrapper</code>中持有<code>Context</code>的引用。</p></li></ul><blockquote><p>Context：<a href="https://developer.android.com/reference/android/content/Context.html">https://developer.android.com/reference/android/content/Context.html</a><br>ContextWrapper：<a href="https://developer.android.com/reference/android/content/ContextWrapper.html">https://developer.android.com/reference/android/content/ContextWrapper.html</a><br>ContextThemeWrapper：<a href="https://developer.android.com/reference/android/view/ContextThemeWrapper.html">https://developer.android.com/reference/android/view/ContextThemeWrapper.html</a><br>Activity：<a href="https://developer.android.com/reference/android/app/Activity.html">https://developer.android.com/reference/android/app/Activity.html</a></p></blockquote><h2 id="与其他模式区别"><a href="#与其他模式区别" class="headerlink" title="与其他模式区别"></a>与其他模式区别</h2><ol><li>与<a href="http://blog.csdn.net/qq_17766199/article/details/50492805">代理模式</a>的区别<ul><li>（1）装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代；而代理模式则是给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用。</li><li>（2）装饰模式应该为所装饰的对象增强功能；代理模式是对代理对象施加控制，不对对象本身功能进行增强。</li></ul></li><li>与<a href="http://blog.csdn.net/qq_17766199/article/details/50514877">适配器模式</a>的区别<ul><li>适配器模式是用新接口来调用原接口，原接口对新系统是不可见的；装饰模式增强了其他对象的功能而同时又不改变它的接口。</li></ul></li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><blockquote><p>在实际开发中我们应该写过如下代码：其实这些新增方法的调用就类似装饰模式中的装饰者的职责，只不过这里我们没有保持对组件类的引用。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化数据</span>    <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化控件</span>    <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化事件</span>    <span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>优点<ul><li>（1）对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。</li><li>（2）可以通过一种动态的方式在运行时选择不同的具体装饰类，从而实现不同的行为。</li><li>（3）可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。</li><li>（4）具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合“开闭原则”。</li></ul></li><li>缺点<ul><li>（1）使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多的系统资源，在一定程序上影响程序的性能。</li><li>（2）对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 代理模式</title>
      <link href="/20170317/designpattern-structure-proxy/"/>
      <url>/20170317/designpattern-structure-proxy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-代理模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-代理模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 代理模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 代理模式</h1><blockquote><p>代理模式也称委托模式，是结构型设计模式之一。是应用广泛的模式之一。<br>定义：为其他对象提供一种代理以控制对这个对象的访问。</p></blockquote><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h2><p>当无法或不想直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。</p><h2 id="2-UML-类图"><a href="#2-UML-类图" class="headerlink" title="2.UML 类图"></a>2.UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Proxy-Pattern-1.png" alt="Proxy"><br>各个角色介绍：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 抽象主题类，主要职责是申明真实与代理主题的共同接口方法 * 可以是抽象类也可以是接口 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 真实主题类，也称被代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Real subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 代理类，持有真实主题的引用，它实现的接口方法中调用真实主题的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxySubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Subject</span> mRealSubject<span class="token punctuation">;</span>    <span class="token class-name">ProxySubject</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRealSubject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用真实主题方法</span>        mRealSubject<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySubject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-简单示例"><a href="#3-简单示例" class="headerlink" title="3.简单示例"></a>3.简单示例</h2><blockquote><p>书中例子：以小民诉讼的流程举例。那么需要代理律师代理，诉讼简单流程：提交申请–&gt;进行举证–&gt;开始辩护–&gt;诉讼完成。</p></blockquote><h3 id="诉讼接口类："><a href="#诉讼接口类：" class="headerlink" title="诉讼接口类："></a>诉讼接口类：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2018/3/17. * &lt;p&gt; * desc: 诉讼接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILawsuit</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 提交申请     */</span>    <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 禁行举证     */</span>    <span class="token keyword">void</span> <span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 开始辩护     */</span>    <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 诉讼完成     */</span>    <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体诉讼人-Weicools："><a href="#具体诉讼人-Weicools：" class="headerlink" title="具体诉讼人 Weicools："></a>具体诉讼人 Weicools：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 具体诉讼人 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weicools</span> <span class="token keyword">implements</span> <span class="token class-name">ILawsuit</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板拖欠工资，特此申请仲裁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是合同书和过去一年的银行工资流水。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"证据确凿，不需要做任何辩护！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"诉讼成功，判决老板七天内结算工资！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理律师："><a href="#代理律师：" class="headerlink" title="代理律师："></a>代理律师：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 代理律师 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyLayer</span> <span class="token keyword">implements</span> <span class="token class-name">ILawsuit</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ILawsuit</span> mLawsuit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyLayer</span><span class="token punctuation">(</span><span class="token class-name">ILawsuit</span> lawsuit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit <span class="token operator">=</span> lawsuit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始仲裁："><a href="#开始仲裁：" class="headerlink" title="开始仲裁："></a>开始仲裁：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ILawsuit</span> weico <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weicools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ILawsuit</span> layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyLayer</span><span class="token punctuation">(</span>weico<span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-none"><code class="language-none">老板拖欠工资，特此申请仲裁！这是合同书和过去一年的银行工资流水。证据确凿，不需要做任何辩护！诉讼成功，判决老板七天内结算工资！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样我们也可以代理其他人，只需要实现 ILawsuit 即可。上面的代理模式也叫静态代理，也就是在代码运行前代理类的 class 文件就已经存在。那么相反，当然也会有动态代理，通过反射机制动态生成代理类，也就是在编码阶段不需要知道代理谁。</p><h2 id="4-动态代理实现"><a href="#4-动态代理实现" class="headerlink" title="4.动态代理实现"></a>4.动态代理实现</h2><p>Java 提供了一个便捷的动态代理接口 InvocationHandler，我们来实现它：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 动态代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicPorxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">// 被代理类的引用</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> mObject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DynamicPorxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObject <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mObject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们通过 invoke 方法来调用具体的被代理方法，增加 DynamicTest 类测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: 动态代理测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//构造出诉讼人小民</span>        <span class="token class-name">ILawsuit</span> weicools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weicools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.静态代理</span>        <span class="token comment">//构造一个代理律师，并将小民传递进去</span>        <span class="token comment">//ILawsuit lawyer = new Lawyer(xiaomin);</span>        <span class="token comment">//2.动态代理</span>        <span class="token comment">//构造一个动态代理</span>        <span class="token class-name">DynamicProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span>weicools<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取被代理类小民的ClassLoader</span>        <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> weicools<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//动态构造一个代理者律师</span>        <span class="token class-name">ILawsuit</span> lawyer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ILawsuit</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token class-name">ILawsuit</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//律师提交申请</span>        lawyer<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//律师进行举证</span>        lawyer<span class="token punctuation">.</span><span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//律师代替weicools辩护</span>        lawyer<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//完成诉讼</span>        lawyer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果不变，由此可以看出动态代理通过一个代理类来处理 N 多个被代理类，其实质是对代理者与被代理者解耦。相对而言静态代理则只能为给定接口下的实现类做代理，如果接口不同那么就需要重新定义不同的代理类，较为复杂，但是静态代理更符合面向对象原则。具体使用哪种方式，根据个人喜好。</p><h2 id="5-Android-源码中的代理模式实现"><a href="#5-Android-源码中的代理模式实现" class="headerlink" title="5.Android 源码中的代理模式实现"></a>5.Android 源码中的代理模式实现</h2><h3 id="ActivityManagerProxy-代理类"><a href="#ActivityManagerProxy-代理类" class="headerlink" title="ActivityManagerProxy 代理类"></a>ActivityManagerProxy 代理类</h3><p>ActivityManager 是 Android 中管理和维护 Activity 的相关信息的类，为了隔离它与 ActivityManagerService，有效降低二者的耦合，在这中间使用了 ActivityManagerProxy 代理类，其抽象主题类是 IActivityManager 接口，所有对 ActivityManagerService 的访问都转换成对代理类的访问，这样 ActivityManager 就与 ActivityManagerService 解耦了。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Activity-Manaher.png"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><ol><li><p>优点</p><ul><li>（1）对代理者与被代理者进行解耦。</li><li>（2）代理对象在客户端和目标对象之间起到一个中介的作用，这样可以起到对目标对象的保护。</li></ul></li><li><p>缺点</p><ul><li>基本没有缺点，真要说缺点就是设计模式的通病：对类的增加。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 观察者模式</title>
      <link href="/20170312/designpattern-behavior-observer/"/>
      <url>/20170312/designpattern-behavior-observer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《Android-源码设计模式解析与实战》读书笔记-观察者模式"><a href="#《Android-源码设计模式解析与实战》读书笔记-观察者模式" class="headerlink" title="《Android 源码设计模式解析与实战》读书笔记 - 观察者模式"></a>《Android 源码设计模式解析与实战》读书笔记 - 观察者模式</h1><blockquote><p>观察者模式是一个使用率非常高的模式，它最常用在 GUI 系统、订阅–发布系统。因为这个模式的一个重要作用就是解耦，将被观察者和观察者解耦，使得它们之间的依赖性更小，甚至做到毫无依赖。比如安卓的开源项目 EventBus、Otto、AndroidEventBus 等事件总线类的和 RxJava 响应式编程其核心都是使用观察者模式。<br>观察者模式是定义对象间一对多的依赖关系，使得每当一个对象状态改变时可以通知 依赖于它的所有对象进行更新。</p></blockquote><span id="more"></span><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h2><ol><li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合”关系。</li><li>事件多级触发场景。</li><li>跨系统的消息交换场景，如消息队列、事件总线的处理机制。</li></ol><h2 id="2-UML-类图"><a href="#2-UML-类图" class="headerlink" title="2.UML 类图"></a>2.UML 类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-16-Observer.jpg"><br>UML 类图介绍：</p><ol><li>Subject：抽象主题，也就是被观察者角色(Observable)，抽象主题把所有观察者对象的引用保存到一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供接口可以删除和增加观察者对象</li><li>ConcreteSubject：具体主题，将有关状态存入具体的观察者对象，在具体主题的内部发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，它定义了一个更新接口，使得在得到被观察者的更改通知时更新自身状态。</li><li>ConcreteObserver：具体观察者，实现抽象观察者角色所定义的更新接口，在被观察者的状态发生变化时更新自身状态。</li></ol><h2 id="3-实现示例"><a href="#3-实现示例" class="headerlink" title="3.实现示例"></a>3.实现示例</h2><ul><li><strong>实现用户追番</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by Weicools on 2017/3/16. * &lt;p&gt; * desc: 抽象观察者类，为所有具体观察者定义一个接口，在得到通知时更新自己 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 更新消息     * @param message 消息     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/16. * &lt;p&gt; * desc: 具体的观察者类，也就是订阅者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mName <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mName <span class="token operator">+</span> <span class="token string">": 订阅的"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/16. * &lt;p&gt; * desc: 抽象被观察者类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 推送消息     * @param message 内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pushMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 订阅     * @param observer 订阅者     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/16. * &lt;p&gt; * desc: 具体的被观察者类，也就是订阅的节目 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animation</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> mObserverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//储存订阅者</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> mObserverList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObserverList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Created by Weicools on 2017/3/16. * &lt;p&gt; * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 观察者, 即订阅用户</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"XXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"YYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"ZZZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 被观察者, 用户订阅的……</span>        <span class="token class-name">Animation</span> animation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">pushMsg</span><span class="token punctuation">(</span><span class="token string">"境界的彼方"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">// 输出XXX: 订阅的境界的彼方更新了YYY: 订阅的境界的彼方更新了ZZZ: 订阅的境界的彼方更新了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由上面的代码可以看出实现了一对多的消息推送，推送消息都是依赖 Observer 和 Observable 这些抽象类，而 User 和 Teleplay 完全没有耦合，保证了订阅系统的灵活性和可扩展性。</p><h2 id="4-Android-源码中的观察者模式"><a href="#4-Android-源码中的观察者模式" class="headerlink" title="4.Android 源码中的观察者模式"></a>4.Android 源码中的观察者模式</h2><h3 id="BaseAdapter"><a href="#BaseAdapter" class="headerlink" title="BaseAdapter"></a>BaseAdapter</h3><p>在 ListView 的适配器中我们都是继承 BaseAdapter。下面来简单分析分析。BaseAdapter 部分代码：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public abstract class BaseAdapter implements ListAdapter, SpinnerAdapter {    //数据集观察者    private final DataSetObservable mDataSetObservable = new DataSetObservable();    public boolean hasStableIds() {        return false;    }    public void registerDataSetObserver(DataSetObserver observer) {        mDataSetObservable.registerObserver(observer);    }    public void unregisterDataSetObserver(DataSetObserver observer) {        mDataSetObservable.unregisterObserver(observer);    }    /**     * 当数据集变化时，通知所有观察者     */    public void notifyDataSetChanged() {        mDataSetObservable.notifyChanged();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看 mDataSetObservable.notifyChanged()方法：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class DataSetObservable extends Observable&lt;DataSetObserver&gt; {    /**     * Invokes {@link DataSetObserver#onChanged} on each observer.     * Called when the contents of the data set have changed.  The recipient     * will obtain the new contents the next time it queries the data set.     */    public void notifyChanged() {        synchronized(mObservers) {            // since onChanged() is implemented by the app, it could do anything, including            // removing itself from {@link mObservers} - and that could cause problems if            // an iterator is used on the ArrayList {@link mObservers}.            // to avoid such problems, just march thru the list in the reverse order.            for (int i = mObservers.size() - 1; i &gt;= 0; i--) {                mObservers.get(i).onChanged();            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出在 mDataSetObservable.notifyChanged()中遍历所有观察者，并调用他们的 onChanged()，从而告知观察者需要做什么。</p><p>那么观察者怎么来的，那就是 setAdapter 方法，代码如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Overridepublic void setAdapter(ListAdapter adapter) {    if (mAdapter != null &amp;&amp; mDataSetObserver != null) {        mAdapter.unregisterDataSetObserver(mDataSetObserver);    }    resetList();    mRecycler.clear();    if (mHeaderViewInfos.size() &gt; 0|| mFooterViewInfos.size() &gt; 0) {        mAdapter = new HeaderViewListAdapter(mHeaderViewInfos, mFooterViewInfos, adapter);    } else {        mAdapter = adapter;    }    mOldSelectedPosition = INVALID_POSITION;    mOldSelectedRowId = INVALID_ROW_ID;    // AbsListView#setAdapter will update choice mode states.    super.setAdapter(adapter);    if (mAdapter != null) {        mAreAllItemsSelectable = mAdapter.areAllItemsEnabled();        mOldItemCount = mItemCount;        mItemCount = mAdapter.getCount();        checkFocus();        mDataSetObserver = new AdapterDataSetObserver();        mAdapter.registerDataSetObserver(mDataSetObserver);//注册观察者        ......省略    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AdapterDataSetObserver 定义在 ListView 的父类 AbsListView 中，是一个数据集观察者，代码：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class AdapterDataSetObserver extends AdapterView&lt;ListAdapter&gt;.AdapterDataSetObserver {    @Override    public void onChanged() {        super.onChanged();        if (mFastScroller != null) {            mFastScroller.onSectionsChanged();        }    }    @Override    public void onInvalidated() {        super.onInvalidated();        if (mFastScroller != null) {            mFastScroller.onSectionsChanged();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它由继承自 AbsListView 的父类 AdapterView 的 AdapterDataSetObserver, 代码如下 :</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class AdapterDataSetObserver extends DataSetObserver {    private Parcelable mInstanceState = null;    // 上文有说道，调用Adapter的notifyDataSetChanged的时候会调用所有观察者的onChanged方法,核心实现就在这里    @Override    public void onChanged() {        mDataChanged = true;        mOldItemCount = mItemCount;        // 获取Adapter中数据的数量        mItemCount = getAdapter().getCount();        // Detect the case where a cursor that was previously invalidated has        // been repopulated with new data.        if (AdapterView.this.getAdapter().hasStableIds() &amp;&amp; mInstanceState != null                &amp;&amp; mOldItemCount == 0 &amp;&amp; mItemCount &gt; 0) {            AdapterView.this.onRestoreInstanceState(mInstanceState);            mInstanceState = null;        } else {            rememberSyncState();        }        checkFocus();        // 重新布局ListView、GridView等AdapterView组件        requestLayout();    }    // 代码省略    public void clearSavedState() {        mInstanceState = null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 ListView 的数据发生变化时，调用 Adapter 的 notifyDataSetChanged 函数，这个函数又会调用 DataSetObservable 的 notifyChanged 函数，这个函数会调用所有观察者 (AdapterDataSetObserver) 的 onChanged 方法，这就是一个观察者模式！</p><h2 id="5-Summary"><a href="#5-Summary" class="headerlink" title="5.Summary"></a>5.Summary</h2><ol><li>优点<ul><li>观察者和被观察者之间是抽象耦合，将观察者与被观察者完全隔离，只依赖于 Observer 和 Observable 抽象，应对业务变化。</li><li>增强系统的灵活性和可扩展性。</li></ul></li><li>缺点<ul><li>在应用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在 Java 中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/20170218/designpattern/"/>
      <url>/20170218/designpattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Design-Pattern.png"></p><blockquote><p>😎😂 表示重要程度</p></blockquote><h2 id="创建型模式-Creational-Pattern"><a href="#创建型模式-Creational-Pattern" class="headerlink" title="创建型模式(Creational Pattern)"></a>创建型模式(Creational Pattern)</h2><p>创建型模式对类的实例化过程进行抽象，能够将软件模块中的对象创建和对象使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p><p>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p><h3 id="1-单例模式-Singleton-Pattern"><a href="#1-单例模式-Singleton-Pattern" class="headerlink" title="1.单例模式(Singleton Pattern)"></a>1.单例模式(Singleton Pattern)</h3><h3 id="2-简单工程模式-Simple-Factory-Pattern"><a href="#2-简单工程模式-Simple-Factory-Pattern" class="headerlink" title="2.简单工程模式(Simple Factory Pattern)"></a>2.简单工程模式(Simple Factory Pattern)</h3><h3 id="3-工厂方法模式-Factory-Method-Pattern"><a href="#3-工厂方法模式-Factory-Method-Pattern" class="headerlink" title="3.工厂方法模式(Factory Method Pattern)"></a>3.工厂方法模式(Factory Method Pattern)</h3><h3 id="4-抽象工厂模式-Abstract-Factory-Pattern"><a href="#4-抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="4.抽象工厂模式(Abstract Factory Pattern)"></a>4.抽象工厂模式(Abstract Factory Pattern)</h3><h3 id="5-建造者模式-Builder-Pattern"><a href="#5-建造者模式-Builder-Pattern" class="headerlink" title="5.建造者模式(Builder Pattern)"></a>5.建造者模式(Builder Pattern)</h3><h3 id="6-原型模式-Prototype-Pattern"><a href="#6-原型模式-Prototype-Pattern" class="headerlink" title="6.原型模式(Prototype Pattern)"></a>6.原型模式(Prototype Pattern)</h3><h2 id="结构型模式-Structural-Pattern"><a href="#结构型模式-Structural-Pattern" class="headerlink" title="结构型模式(Structural Pattern)"></a>结构型模式(Structural Pattern)</h2><ol><li>结构型模式描述如何将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。</li><li>结构型模式可以分为类结构型模式和对象结构型模式：<ul><li>类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系。</li><li>对象结构型模式关心类与对象的组合，通过关联关系使得在一 个类中定义另一个类的实例对象，然后通过该对象调用其方法。 根据“合成复用原则”，在系统中尽量使用关联关系来替代继 承关系，因此大部分结构型模式都是对象结构型模式。</li></ul></li></ol><h3 id="1-适配器模式-Adapter-Pattern"><a href="#1-适配器模式-Adapter-Pattern" class="headerlink" title="1.适配器模式(Adapter Pattern)"></a>1.适配器模式(Adapter Pattern)</h3><h3 id="2-桥接模式-Bridge-Pattern"><a href="#2-桥接模式-Bridge-Pattern" class="headerlink" title="2.桥接模式(Bridge Pattern)"></a>2.桥接模式(Bridge Pattern)</h3><h3 id="3-装饰模式-Decorator-Pattern"><a href="#3-装饰模式-Decorator-Pattern" class="headerlink" title="3.装饰模式(Decorator Pattern)"></a>3.装饰模式(Decorator Pattern)</h3><h3 id="4-外观模式-Facade-Pattern"><a href="#4-外观模式-Facade-Pattern" class="headerlink" title="4.外观模式(Facade Pattern)"></a>4.外观模式(Facade Pattern)</h3><h3 id="5-享元模式-Flyweight-Pattern"><a href="#5-享元模式-Flyweight-Pattern" class="headerlink" title="5.享元模式(Flyweight Pattern)"></a>5.享元模式(Flyweight Pattern)</h3><h3 id="6-代理模式-Proxy-Pattern"><a href="#6-代理模式-Proxy-Pattern" class="headerlink" title="6.代理模式(Proxy Pattern)"></a>6.代理模式(Proxy Pattern)</h3><h3 id="7-组合模式-Composite-Pattern"><a href="#7-组合模式-Composite-Pattern" class="headerlink" title="7.组合模式(Composite Pattern)"></a>7.组合模式(Composite Pattern)</h3><h2 id="行为型模式-Behavioral-Pattern"><a href="#行为型模式-Behavioral-Pattern" class="headerlink" title="行为型模式(Behavioral Pattern)"></a>行为型模式(Behavioral Pattern)</h2><ol><li>行为型模式是对在不同的对象之间划分责任和算法的抽象化。</li><li>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</li><li>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</li><li>行为型模式分为类行为型模式和对象行为型模式两种：<ul><li>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li><li>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式</li></ul></li></ol><h3 id="1-观察者模式-Observer-Pattern"><a href="#1-观察者模式-Observer-Pattern" class="headerlink" title="1.观察者模式(Observer Pattern)"></a>1.观察者模式(Observer Pattern)</h3><h3 id="2-策略模式-Strategy-Pattern"><a href="#2-策略模式-Strategy-Pattern" class="headerlink" title="2.策略模式(Strategy Pattern)"></a>2.策略模式(Strategy Pattern)</h3><h3 id="3-状态模式-State-Pattern"><a href="#3-状态模式-State-Pattern" class="headerlink" title="3.状态模式(State Pattern)"></a>3.状态模式(State Pattern)</h3><h3 id="4-命令模式-Command-Pattern"><a href="#4-命令模式-Command-Pattern" class="headerlink" title="4.命令模式(Command Pattern)"></a>4.命令模式(Command Pattern)</h3><h3 id="5-中介者模式-Mediator-Pattern"><a href="#5-中介者模式-Mediator-Pattern" class="headerlink" title="5.中介者模式(Mediator Pattern)"></a>5.中介者模式(Mediator Pattern)</h3><h3 id="6-迭代器模式-Iterator-Pattern"><a href="#6-迭代器模式-Iterator-Pattern" class="headerlink" title="6.迭代器模式(Iterator Pattern)"></a>6.迭代器模式(Iterator Pattern)</h3><h3 id="7-备忘录模式-Memento-Pattern"><a href="#7-备忘录模式-Memento-Pattern" class="headerlink" title="7.备忘录模式(Memento Pattern)"></a>7.备忘录模式(Memento Pattern)</h3><h3 id="8-模板方法模式-Template-Method-Pattern"><a href="#8-模板方法模式-Template-Method-Pattern" class="headerlink" title="8.模板方法模式(Template Method Pattern)"></a>8.模板方法模式(Template Method Pattern)</h3><h3 id="9-访问者模式-Visitor-Pattern"><a href="#9-访问者模式-Visitor-Pattern" class="headerlink" title="9.访问者模式(Visitor Pattern)"></a>9.访问者模式(Visitor Pattern)</h3><h3 id="10-解释器模式-Interpreter-Pattern"><a href="#10-解释器模式-Interpreter-Pattern" class="headerlink" title="10.解释器模式(Interpreter Pattern)"></a>10.解释器模式(Interpreter Pattern)</h3><h3 id="11-责任链模式-Chain-of-Responsibility"><a href="#11-责任链模式-Chain-of-Responsibility" class="headerlink" title="11.责任链模式(Chain of Responsibility)"></a>11.责任链模式(Chain of Responsibility)</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之简单工厂模式</title>
      <link href="/20161018/designpattern-creator-simple-factory-pattern/"/>
      <url>/20161018/designpattern-creator-simple-factory-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式之简单工厂模式"><a href="#设计模式之简单工厂模式" class="headerlink" title="设计模式之简单工厂模式"></a>设计模式之简单工厂模式</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><p>考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的按钮（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一个基类，不过在继承基类后不同的子类修改了部分属性从而使得它们可以呈现不同的外观，如果我们希望在使用这些按钮时，不需要知道这些具体按钮类的名字，只需要知道表示该按钮类的一个参数，并提供一个调用方便的方法，把该参数传入方法即可返回一个相应的按钮对象，此时，就可以使用简单工厂模式</p><h2 id="2-模式定义"><a href="#2-模式定义" class="headerlink" title="2.模式定义"></a>2.模式定义</h2><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类</p><h2 id="3-模式结构-amp-UML类图"><a href="#3-模式结构-amp-UML类图" class="headerlink" title="3.模式结构&amp;UML类图"></a>3.模式结构&amp;UML类图</h2><ol><li><p>简单工厂模式包含如下角色：</p><ul><li>Factory：工厂角色 - 工厂角色负责实现创建所有实例的内部逻辑</li><li>Product：抽象产品角色 - 抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</li><li>ConcreteProduct：具体产品角色 - 具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例</li></ul></li><li><p>UML类图<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2016-10-18-SimpleFactory.jpg" alt="SimpleFactory"></p></li></ol><h2 id="4-时序图"><a href="#4-时序图" class="headerlink" title="4.时序图"></a>4.时序图</h2><p><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2016-10-18-seq_SimpleFactory.jpg" alt="seq_SimpleFactory"></p><h2 id="5-实现方式"><a href="#5-实现方式" class="headerlink" title="5.实现方式"></a>5.实现方式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SimpleFactoryPattern</span><span class="token punctuation">;</span><span class="token comment">/** * Created by weicools on 2016/10/18. */</span><span class="token comment">// Animal.java  抽象产品角色</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SimpleFactoryPattern</span><span class="token punctuation">;</span><span class="token comment">/** * Created by weicools on 2016/10/18. */</span><span class="token comment">// Dog.java 具体产品角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SimpleFactoryPattern</span><span class="token punctuation">;</span><span class="token comment">/** * Created by weicools on 2016/10/18. */</span><span class="token comment">// Pig.java 具体产品角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pig eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SimpleFactoryPattern</span><span class="token punctuation">;</span><span class="token comment">/** * Created by weicools on 2016/10/18. */</span><span class="token comment">// AnimalFactory.java  工厂角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AnimalFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Animal</span> <span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SimpleFactoryPattern</span><span class="token punctuation">;</span><span class="token comment">/** * Created by weicools on 2016/10/18. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Animal</span> dog <span class="token operator">=</span> <span class="token class-name">AnimalFactory</span><span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span> pig <span class="token operator">=</span> <span class="token class-name">AnimalFactory</span><span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pig<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token class-name">AnimalFactory</span><span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal <span class="token operator">=</span> <span class="token class-name">AnimalFactory</span><span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-模式分析"><a href="#6-模式分析" class="headerlink" title="6.模式分析"></a>6.模式分析</h2><ol><li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li><li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。</li><li>简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节</li></ol><h2 id="7-优点-amp-缺点"><a href="#7-优点-amp-缺点" class="headerlink" title="7.优点&amp;缺点"></a>7.优点&amp;缺点</h2><ol><li>优点(帮助封装/解耦)<ul><li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性</li></ul></li><li>缺点(可能增加客户端的复杂度/不方便扩展子工厂)<ul><li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响</li><li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度</li><li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li></ul></li></ol><h2 id="8-使用环境"><a href="#8-使用环境" class="headerlink" title="8.使用环境"></a>8.使用环境</h2><ol><li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂</li><li>客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数</li></ol><h2 id="9-模式应用"><a href="#9-模式应用" class="headerlink" title="9.模式应用"></a>9.模式应用</h2><ol><li><p>JDK类库中广泛使用了简单工厂模式，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">DateFormat</span> <span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">DateFormat</span> <span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">DateFormat</span> <span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> style<span class="token punctuation">,</span><span class="token class-name">Locale</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Java加密技术</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取不同加密算法的密钥生成器:</span><span class="token class-name">KeyGenerator</span> keyGen<span class="token operator">=</span><span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建密码器:</span><span class="token class-name">Cipher</span> cp<span class="token operator">=</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/20161018/designpattern-creator-singleton-pattern/"/>
      <url>/20161018/designpattern-creator-singleton-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h1><h2 id="1-问题："><a href="#1-问题：" class="headerlink" title="1.问题："></a>1.问题：</h2><p>对于系统中的某些类来说，只有一个实例很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或 ID（序号）生成器。如何保证一个类只有一个实例并且这个实例易于被访问呢？</p><h2 id="2-模式定义"><a href="#2-模式定义" class="headerlink" title="2.模式定义"></a>2.模式定义</h2><p>单例模式（Singleton Pattern）：确保一个类只有一个实例，而且自行实例化并向系统提供这个实例，提供全局访问方法。</p><p>实现思路：</p><ul><li>在单例的类中设置一个 private 静态变量 sInstance，sInstance 类型为当前类，用来持有单例唯一的实例。</li><li>将（无参数）构造器设置为 private，避免外部使用 new 构造多个实例。</li><li>提供一个 public 的静态方法，如 getInstance，用来返回该类的唯一实例 sInstance。</li></ul><h2 id="3-模式结构"><a href="#3-模式结构" class="headerlink" title="3.模式结构"></a>3.模式结构</h2><p>UML 类图：<br><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2016-10-18-Singleton.jpg" alt="Singleton"></p><h2 id="4-时序图"><a href="#4-时序图" class="headerlink" title="4.时序图"></a>4.时序图</h2><p><img src="https://blog-bak-1251678165.cos.ap-beijing.myqcloud.com/2016-10-18-seq_Singleton.jpg" alt="seq_Singleton"></p><h2 id="5-七种实现方式"><a href="#5-七种实现方式" class="headerlink" title="5.七种实现方式"></a>5.七种实现方式</h2><h3 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式,线程不安全"></a>懒汉式,线程不安全</h3><ul><li>在多个线程密集调用 getInstance 时，存在创建多个实例的可能。</li><li>比如线程 A 进入 null == sInstance 这段代码块，而在 A 线程未创建完成实例时，</li><li>如果线程 B 也进入了该代码块，必然会造成两个实例的产生。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 1.0 懒汉式,线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.一个私有的指向自己的静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazy</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 2.私有的构造方法,保证不能从外部创建对象</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 3.公开的静态工厂方法,返回该类的唯一实例(当发现没有实例没有初始化的时候才初始化)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazy</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建SingletonLazy类的实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例已经创建,不能再创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SingletonLazy</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingletonLazy</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingletonLazy</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingletonLazy</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式,线程安全"></a>饿汉式,线程安全</h3><ul><li>不能完成懒加载</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 2.0 饿汉式,线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHungry</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.私有的唯一的静态实例变量,在类加载的时候就创建好单例对象</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">SingletonHungry</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.私有的构造函数,确保不能在类的外部访问该类的构造函数</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 3.公开的静态工厂返回此类的唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonHungry</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉式，线程安全，多线程环境下效率不高"><a href="#懒汉式，线程安全，多线程环境下效率不高" class="headerlink" title="懒汉式，线程安全，多线程环境下效率不高"></a>懒汉式，线程安全，多线程环境下效率不高</h3><ul><li>使用 synchrnozed 修饰 getInstance 方法可能是最简单的一个保证多线程保证单例唯一性的方法。synchronized 修饰的方法后，当某个线程进入调用这个方法，该线程只有当其他线程离开当前方法后才会进入该方法。</li><li>所以可以保证 getInstance 在任何时候只有一个线程进入，但是会导致性能下降，而且 getInstance 是一个被频繁调用的方法。虽然这种方法能解决问题，但是不推荐。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 3.0 单例模式，懒汉式，线程安全，多线程环境下效率不高 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazySynchronized</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazySynchronized</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonLazySynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingletonLazySynchronized</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazySynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例已经创建,不能再创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉式，变种，线程安全"><a href="#懒汉式，变种，线程安全" class="headerlink" title="懒汉式，变种，线程安全"></a>懒汉式，变种，线程安全</h3><ul><li>添加静态代码块,初始化实例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 4.0 单例模式，懒汉式，变种，线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazyStatic</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazyStatic</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazyStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonLazyStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonLazyStatic</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用静态内部类，线程安全【推荐】"><a href="#使用静态内部类，线程安全【推荐】" class="headerlink" title="使用静态内部类，线程安全【推荐】"></a>使用静态内部类，线程安全【推荐】</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 5.0 单例模式，使用静态内部类，线程安全【推荐】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonStaticInner</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">SingletonStaticInner</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonStaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonStaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonStaticInner</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用枚举方式，线程安全"><a href="#使用枚举方式，线程安全" class="headerlink" title="使用枚举方式，线程安全"></a>使用枚举方式，线程安全</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 6.0 单例模式，使用枚举方式，线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span>  <span class="token class-name">SingletonEnum</span> <span class="token punctuation">{</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whateverMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用双重校验锁，线程安全【推荐】"><a href="#使用双重校验锁，线程安全【推荐】" class="headerlink" title="使用双重校验锁，线程安全【推荐】"></a>使用双重校验锁，线程安全【推荐】</h3><ul><li><p>使用双重检查加锁，首先进入该方法时进行 null == sInstance 检查，如果第一次检查通过，即没有实例创建，则进入 synchronized 控制的同步块,并再次检查实例是否创建，如果仍未创建，则创建该实例。</p></li><li><p>双重检查加锁保证了多线程下只创建一个实例，并且加锁代码块只在实例创建的之前进行同步。如果实例已经创建后，进入该方法，则不会执行到同步块的代码。</p></li><li><p>Volatile 是轻量级的 synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。使用 volatile 修饰 sInstance 变量之后，可以确保多个线程之间正确处理 sInstance 变量。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Created by weicools on 2016/10/18. * * 7.0 单例模式，使用双重校验锁，线程安全【推荐】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonVerifyLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">SingletonVerifyLock</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonVerifyLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonVerifyLock</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingletonVerifyLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonVerifyLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-模式分析"><a href="#6-模式分析" class="headerlink" title="6.模式分析"></a>6.模式分析</h2><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——Singleton。单例类拥有一个私有构造函数，确保用户无法通过 new 关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建</p><p>在单例模式的实现过程中，需要注意如下三点： - 单例类的构造函数为私有； - 提供一个自身的静态私有成员变量； - 提供一个公有的静态工厂方法</p><h2 id="7-实例"><a href="#7-实例" class="headerlink" title="7.实例"></a>7.实例</h2><p>在操作系统中，打印池(Print Spooler)是一个用于管理打印任务的应用程序，通过打印池用户可以删除、中止或者改变打印任务的优先级，在一个系统中只允许运行一个打印池对象，如果重复创建打印池则抛出异常。现使用单例模式来模拟实现打印池的设计</p><h2 id="8-优点-amp-缺点"><a href="#8-优点-amp-缺点" class="headerlink" title="8.优点&amp;缺点"></a>8.优点&amp;缺点</h2><ol><li>优点：<ul><li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能</li><li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例</li></ul></li><li>缺点：<ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出</li></ul></li></ol><h2 id="9-使用环境"><a href="#9-使用环境" class="headerlink" title="9.使用环境"></a>9.使用环境</h2><ol><li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li><li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://droidyue.com/blog/2015/01/11/looking-into-singleton/">单例这种设计模式</a></li><li>SwordOffer</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常考面试题</title>
      <link href="/20160828/interview-java-summary/"/>
      <url>/20160828/interview-java-summary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-常考面试题"><a href="#Java-常考面试题" class="headerlink" title="Java 常考面试题"></a>Java 常考面试题</h1><ol><li>什么是 Java 虚拟机，为什么 Java 是平台无关性的语言？</li></ol><ul><li>Java 虚拟机是一个可以执行 Java 字节码的虚拟机进程。Java 源文件被编译成能被 Java 虚拟机执行的字节码文件</li><li>Java 被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java 虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性； JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（ 字节码 ），就可以在多种平台上不加修改地运行<span id="more"></span></li></ul><ol start="2"><li>JDK 和 JRE 的区别</li></ol><ul><li>Java 运行时环境(JRE)是将要执行 Java 程序的 Java 虚拟机。它同时也包含了执行 applet 需要的浏览器插件</li><li>Java 开发工具包(JDK)是完整的 Java 软件开发包，包含了**JRE，编译器和其他的工具(比如：JavaDoc，Java 调试器)**，可以让开发者开发、编译、执行 Java 应用程序</li></ul><ol start="3"><li>”static”关键字？Java 中是否可以覆盖(override)一个 private 或者是 static 的方法？</li></ol><ul><li>“static”关键字表示静态的意思，可用于修饰变量和成员函数，被 static 修饰的成员函数只能访问静态成员，静态是随着类加载而加载的，因此可以直接用类进行访问</li><li>Java 中 static 方法不能被覆盖，因为覆盖是基于运行时动态绑定的，而 static 方法是编译时静态绑定的</li><li><strong>重写是子类中的方法和子类继承的父类中的方法一样（函数名，参数，参数类型，反回值类型）</strong>，但是子类中的访问权限要不低于父类中的访问权限。重写的前提是必须要继承，private 修饰不支持继承，因此被私有的方法不可以被重写。静态方法形式上可以被重写，即子类中可以重写父类中静态的方法。但是实际上<strong>从内存的角度上静态方法不可以被重写</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Super</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Good night"</span>  <span class="token punctuation">}</span>  <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Weico"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello"</span>  <span class="token punctuation">}</span>  <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"weimiku"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Super</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出结果：Good night,weimiku</span>    <span class="token comment">// 实例方法被覆盖，静态方法被隐藏</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>是否可以在 static 环境中访问非 static 变量？</li></ol><ul><li>静态的成员属于类，随着类的加载而加载到静态方法区内存，当类加载时，此时不一定有实例创建，没有实例，就不可以访问非静态的成员</li><li>当类被 Java 虚拟机载入的时候，会对 static 变量进行初始化。如果你的代码尝试不用实例来访问非 static 的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上</li></ul><ol start="5"><li>Java 支持的数据类型有哪些？什么是自动拆装箱？</li></ol><ul><li>Java 支持 8 中基本数据类型：byte/short/int/long/float/double/boolean/char</li><li>自动装箱是 Java 编译器在基本数据类型和对应的对象包装类型之间的转化。byte-&gt;Byte;short-&gt;Short;int-&gt;Integer;long-&gt;Long;float-&gt;Float;double-&gt;Double;boolean-&gt;Boolean;char-&gt;Character.反之就是自动拆箱</li></ul><ol start="6"><li>Java 中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？</li></ol><ul><li>Java 中的方法重载 Overloading 发生在<strong>同一个类</strong>里面两个或者是多个方法的<strong>方法名相同但是参数不同</strong>的情况</li><li>方法覆盖 Overriding 是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问</li><li>访问权限&gt;=父类，抛出异常必须&lt;=父类（或者不抛异常）。（特殊点，如果子类重写的方法所抛异常小于父类，那么就不能调用父类的方法，因为子类的异常小，捕获不了 ）， private 修饰的父类方法不能被重写</li></ul><ol start="7"><li>Java 中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？</li></ol><ul><li>当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java 编译器会为这个类创建一个默认的构造函数</li><li>Java 中构造函数重载和方法重载很相似；可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表</li><li>Java 不支持像 C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java 不会创建默认的复制构造函数</li></ul><ol start="8"><li>Java 支持多继承么？</li></ol><ul><li>Java 中<strong>类不支持多继承</strong>，只支持单继承（即一个类只有一个父类）</li><li>但是 java 中的<strong>接口支持多继承</strong>，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）</li></ul><ol start="9"><li>接口和抽象类的区别是什么？</li></ol><ul><li>Java 提供和支持创建抽象类和接口，它们的实现有共同点，也有不同之处：</li><li>接口中所有的方法隐含的都是抽象方法 / 而抽象类则可以同时包含抽象和非抽象方法</li><li>类可以实现多个接口 / 但是只能继承一个抽象类</li><li>Java 接口中申明的变量默认都是 public static final / 抽象类可以包含非 final 的变量</li><li>Java 接口中的成员函数默认是 public 的 / 抽象类的成员函数可以是 private，protected 或者是 public</li><li>接口是绝对抽象的，不可以被实例化 / 抽象类也不可以被实例化，但是，如果它包含 main 方法的话是可以被调用的</li><li>类可以不实现抽象类和接口声明的所有方法(在这种情况下，类也必须得声明成是抽象的)</li><li>抽象类可以在不提供接口方法实现的情况下实现接口–？</li></ul><ol start="10"><li>什么是值传递和引用传递？</li></ol><ul><li>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量</li><li>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。 所以对引用对象进行操作会同时改变原对象.</li><li>一般认为,java 内的传递都是值传递</li><li>问题来了：java 中对象作为参数传递给一个方法，到底是值传递，还是引用传递？<ul><li>值传递！Java 中只有按值传递，没有按引用传递！</li></ul></li></ul><ol start="11"><li>进程和线程的区别是什么？</li></ol><ul><li>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程</li></ul><ol start="12"><li>创建线程有几种不同的方式？你喜欢哪一种？为什么？</li></ol><ul><li>继承 Thread 类</li><li>实现 Runnable 接口</li><li>应用程序可以使用 Executor 框架来创建线程池</li><li>实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用</li></ul><ol start="13"><li>概括的解释下线程的几种可用状态</li></ol><ul><li>1.新建（new）：新创建了一个线程对象</li><li>2.可运行（runnable）：线程对象创建后，其他线程（例如 main 线程）调用了该线程的 start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取 cpu 的使用权</li><li>3.运行（running）：可运行状态的线程获得了 CPU 时间片（timeslice），执行程序代码</li><li>4.阻塞（block）：阻塞状态是指线程因为某种原因放弃了 CPU 使用权，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：<ul><li>(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中</li><li>(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中</li><li>(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态</li></ul></li><li>5.死亡（dead）：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生<br><img src="http://uploadfiles.nowcoder.com/images/20151217/149974_1450349079825_4697A22AC611680A692472687DEC1CFD" alt="Thread state"></li></ul><ol start="14"><li>同步方法和同步代码块的区别？</li></ol><ul><li>同步方法默认用 this 或者当前类 class 对象作为锁</li><li>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法</li></ul><ol start="15"><li>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</li></ol><ul><li>监视器和锁是在 Java 虚拟机中一块使用的</li><li>监视器监视一块同步代码块，确保只有一次只有一个线程执行同步代码块</li><li>每一个监视器都和一个对象引用关联</li><li>线程在获取锁之前不允许执行同步代码块</li></ul><ol start="16"><li>什么是死锁（deadlock）？</li></ol><ul><li>两个或者两个以上的线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁，结果是这些线程都陷入了无线的等待</li></ul><ol start="17"><li>如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？</li></ol><ul><li>使用多线程的时候，简单避免死锁的方式就是：指定获取锁的顺序，并强制线程按照规定的熟悉怒获取锁；如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了</li><li>多线程产生死锁需要四个条件，分别是<strong>互斥性，保持和请求，不可剥夺性还有要形成闭环</strong>，这四个条件缺一不可，只要破坏了其中一个条件就可以破坏死锁，其中最简单的方法就是线程都是以同样的顺序加锁和释放锁，也就是破坏了第四个条件<ul><li>1.互斥条件：一个资源每次只能被一个进程使用</li><li>2.保持和请求条件：一个进程因请求资源而阻塞时，对已获得资源保持不放</li><li>3.不可剥夺调教：进程已获得资源，在未使用完成前，不能被剥夺</li><li>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li></ul></li></ul><ol start="18"><li>Java 集合类框架的基本接口有哪些？</li></ol><ul><li>集合类中指定了一组叫做元素的对象，集合类接口中的每一种具体实现类都可以选择以它的方式对元素进行保存和排序，有的集合类允许重复的键，有些不允许</li><li>Java 集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java 集合类里面最基本的接口有：</li><li>Collection：代表一组对象，每一个对象都是它的子元素<ul><li>List：有顺序的 Collection，可以包含重复元素<ul><li>ArrayList：类似一个长度可变的数组 。适合查询，不适合增删</li><li>LinkedList：底层是双向循环链表。适合增删，不适合查询</li></ul></li><li>Set：不包含重复元素的 Collection<ul><li>HashSet：根据对象的哈希值确定元素在集合中的位置</li><li>TreeSet: 以二叉树的方式存储元素，实现了对集合中的元素排序</li></ul></li></ul></li><li>Map：可以把键 key 映射到值 value 得对象，键不允许重复<ul><li>HashMap：用于存储键值映射关系，不能出现重复的键 key</li><li>TreeMap：用来存储键值映射关系，不能出现重复的键 key，所有的键按照二叉树的方式排列</li></ul></li></ul><ol start="19"><li>为什么集合类没有实现 Cloneable 和 Serializable 接口？</li></ol><ul><li>克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化</li></ul><ol start="20"><li>什么是迭代器(Iterator)？</li></ol><ul><li>Iterator 接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的 remove(Object Obj)删除，可以通过迭代器的 remove()方法删除</li></ul><ol start="21"><li>Iterator 和 ListIterator 的区别是什么？</li></ol><ul><li>Iterator 可以遍历 List 和 Set / ListIterator 只能遍历 List</li><li>Iterator 对集合只能是前向遍历 / ListIterator 既可以前向也可以后向</li><li>ListIterator 实现了 Iterator 接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引等等</li></ul><ol start="22"><li>快速失败（fail-fast）和安全失败（fail-safe）区别</li></ol><ul><li>Iterator 的安全失败是基于对底层集合进行拷贝，所以不受源集合上修改的影响</li><li>java.util 包下面的所有集合类都是快速失败</li><li>java.util.concurrent 包下面的所有的类都是安全失败的</li><li>快速失败的迭代器会抛出 ConcurrentModificationException 异常，而安全失败的迭代器永远不会抛出这样的异常</li></ul><ol start="23"><li>Java 中的 HashMap 的工作原理是什么？</li></ol><ul><li>Java 中 HashMap 是以键值对（key-value）的形式存储元素</li><li>HashMap 需要一个 hash 函数，它使用 hashCode()和 equals()方法来向集合添加元素/从集合中检索元素</li><li>当调用 put()方法的时候，HashMap 会计算 key 的 hash 值，然后把键值对存储在集合中合适的索引上。如果 key 已经存在了，value 会被更新成新值</li><li>HashMap 的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)</li></ul><ol start="24"><li>hashCode()和 equals()方法的重要性体现在什么地方？</li></ol><ul><li>Java 中的 HashMap 使用 hashCode()和 equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法</li><li>如果没有正确的实现这两个方法，两个不同的键可能会有相同的 hash 值，因此，可能会被集合认为是相等的</li><li>这两个方法也用来发现重复元素。所以这两个方法的实现对 HashMap 的精确性和正确性是至关重要的</li></ul><ol start="25"><li>HashMap 和 Hashtable 有什么区别？</li></ol><ul><li>HashMap 和 Hashtable 都实现了 Map 的接口，因此很多特性非常相似。他们不同之处在于：</li><li>HashMap 运行键和值是 null，而 Hashtable 不允许键值为 null</li><li>Hashtable 是同步的，而 HashMap 不是；所以 HashMap 更适合单线程环境，Hashtable 更适合多线程环境</li><li>HashMap 提供了可以供应用迭代的键的集合，因此 HashMap 是快速失败的；另一方，Hashtable 提供了对键的列举(Enumeration)。一般认为 Hashtable 是一个遗留的类</li></ul><ol start="26"><li>数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用 Array 而不是 ArrayList？</li></ol><ul><li>Array 可以包含基本类型和对象类型 / ArrayList 只能包含对象类型</li><li>Array 的大小是固定的 / ArrayList 的大小是动态变化的</li><li>ArrayList 提供更多的方法和特性，例如：addAll(),removeAll(),iterator()</li><li>对于基本数据类型，集合使用自动装箱来减少编码工作量；但是当处理固定大小固定大小的基本数据类型的时候，这种方式相对比较慢</li></ul><ol start="27"><li>ArrayList 和 LinkedList 有什么区别？</li></ol><ul><li>ArrayList 和 LinkedList 都实现了 List 接口，不同之处在于：</li><li>ArrayList 是基于索引的数据接口，它的底层是数组，它可以以 O(1)时间复杂度对元素进行随机访问 / 与此对应，LinkedList 是以元素列表的形式存储它的数据，每一个元素都和它的前一个元素和后一个元素链接在一起，查找某个元素的时间复杂度是 O(N)</li><li>相对于 ArrayList，LinkedList 的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引</li><li>LinkedList 比 ArrayList 更占内存，因为 LinkedList 为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素</li></ul><ol start="28"><li>Comparable 和 Comparator 接口是干什么的？列出它们的区别</li></ol><ul><li>Java 提供了只包含一个 compareTo()方法的 Comparable 接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象</li><li>Java 提供了包含 compare()和 equals()两个方法的 Comparator 接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和 comparator 相等。只有当输入参数也是一个 comparator 并且输入参数和当前 comparator 的排序结果是相同的时候，这个方法才返回 true</li></ul><ol start="29"><li>什么是 Java 优先级队列(Priority Queue)？</li></ol><ul><li>Priority Queue 一个基于优先级堆得无线队列，它的元素是按照自然顺序排序的</li><li>在创建的时候，我们可以给它提供一个负责给元素排序的比较器</li><li>PriorityQueue 不允许 null 值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器</li><li>PriorityQueue 不是线程安全的，入队和出队的时间复杂度是 O(log(n))</li></ul><ol start="30"><li>你了解大 O 符号(big-O notation)么？你能给出不同数据结构的例子么？</li></ol><ul><li>大 O 符号描述了当数据结构里面的元素增加的时候，算法的规模或者是性能在最坏的场景下有多么好。</li><li>大 O 符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大 O 符号基于时间，内存和性能来选择最好的实现。大 O 符号可以对大量数据的性能给出一个很好的说明</li></ul><ol><li><p>如何权衡是使用无序的数组还是有序的数组？</p><ul><li>有序数组最大的好处在于查找的时间复杂度是 O(log n)，而无序数组是 O(n)。有序数组的缺点是插入操作的时间复杂度是 O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量 O(1)</li></ul></li><li><p>Java 集合类框架的最佳实践</p><ul><li>根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用 Array 而不是 ArrayList</li><li>有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算 hash 值或者是扩容</li><li>为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的 ClassCastException</li><li>使用 JDK 提供的不变类(immutable class)作为 Map 的键可以避免为我们自己的类实现 hashCode()和 equals()方法</li><li>编程的时候接口优于实现</li><li>底层的集合实际上是空的情况下，返回长度是 0 的集合或者是数组，不要返回 null</li></ul></li><li><p>Enumeration 接口和 Iterator 接口的区别</p><ul><li>Enumeration 速度是 Iterator 的 2 倍，同时占用更少的内存</li><li>但是，Iterator 远远比 Enumeration 安全，因为其他线程不能够修改正在被 iterator 遍历的集合里面的对象</li><li>同时，Iterator 允许调用者删除底层集合里面的元素，这对 Enumeration 来说是不可能的</li></ul></li><li><p>HashSet 和 TreeSet 有区别</p><ul><li>HashSet 是由一个 hash 表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是 O(1)</li><li>TreeSet 是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是 O(logn)</li></ul></li><li><p>Java 垃圾回收目的</p><ul><li>垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源</li></ul></li><li><p>System.gc()和 Runtime.gc()会做什么事情</p><ul><li>用来提示 JVM 要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于 JVM 的</li></ul></li><li><p>finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？</p><ul><li>垃圾回收器(garbage colector)决定回收某对象时，就会运行该对象的 finalize()方法 但是在 Java 中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，也就是说 filalize()可能永远不被执行，显然指望它做收尾工作是靠不住的，它最主要的用途是回收特殊渠道申请的内存。</li><li>析构 finalization，比如你在调用了一些 native 的方法，可以要在 finaliztion 里去调用释放函数</li></ul></li><li><p>如果对象的引用被置为 null，垃圾收集器是否会立即释放对象占用的内存？</p><ul><li>不会，在下一个垃圾回收周期中，这个对象将是可被回收的</li></ul></li><li><p>Java 堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?</p><ul><li>JVM 的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在 JVM 启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收</li><li>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间</li></ul></li><li><p>串行(serial)收集器和吞吐量(throughput)收集器的区别</p><ul><li>串行收集器对大多数的小应用(在现代处理器上需要大概 100M 左右的内存)就足够了</li><li>吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序</li></ul></li><li><p>在 Java 中，对象什么时候可以被垃圾回收</p><ul><li>当没有任何对象的引用指向对象时在一个不可预期的时间内对象才会被回收(对于那些循环应用的时候，也要被回收)</li><li>当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了</li></ul></li><li><p>JVM 的永久代中会发生垃圾回收么？</p><ul><li>垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)</li><li>如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的</li></ul></li><li><p>Java 中的两种异常类型是什么？他们有什么区别？</p><ul><li>Java 中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常</li><li>不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面</li><li>受检查的异常必须要用 throws 语句在方法或者是构造函数上声明</li></ul></li><li><p>Java 中 Exception 和 Error 有什么区别？</p><ul><li>Exception 和 Error 都是 Throwable 的子类</li><li>Exception 用于用户程序可以捕获的异常情况</li><li>Error 定义了不期望被用户程序捕获的异常</li></ul></li><li><p>throw 和 throws 有什么区别？</p><ul><li>throw 关键字用来在程序中明确的抛出异常，相反，throws 语句用来表明方法不能处理的异常</li><li>Throw 用于方法内部，Throws 用于方法声明上;Throw 后跟异常对象，Throws 后跟异常类型;Throw 后只能跟一个异常对象，Throws 后可以一次声明多种异常类型</li><li>每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的(语法：修饰符 返回值类型 方法名 参数类型 throws 异常类<br>public void test throws Exception1,Exception2(){})</li></ul></li><li><p>异常处理完成以后，Exception 对象会发生什么变化？</p><ul><li>Exception 对象会在下一个垃圾回收过程中被回收掉</li></ul></li><li><p>finally 代码块和 finalize()方法有什么区别？</p><ul><li>无论 try catch 语句块中的代码块是否抛出异常，finally 代码块都会执行，它主要是用来释放应用占用的资源</li><li>finalize()方法是 Object 类的一个 protected 方法，它是在对象被垃圾回收之前由 Java 虚拟机来调用的</li></ul></li><li><p>什么是 Applet？</p><ul><li>java applet 是能够被包含在 HTML 页面中并且能被启用了 java 的客户端浏览器执行的程序。Applet 主要用来创建动态交互的 web 应用程序</li></ul></li><li><p>Applet 的生命周期:</p><ul><li>Init：每次被载入的时候都会被初始化</li><li>Start：开始执行 applet</li><li>Stop：结束执行 applet</li><li>Destroy：卸载 applet 之前，做最后的清理工作</li></ul></li><li><p>当 applet 被载入的时候会发生什么？</p><ul><li>首先创建 applet 控制类的实例;然后初始化 applet;最后开始运行</li></ul></li><li><p>Applet 和普通的 Java 应用程序有什么区别？</p><ul><li>applet 是运行在启用了 java 的浏览器中，Java 应用程序是可以在浏览器之外运行的独立的 Java 程序</li><li>Java 应用程序需要一个有特定方法签名的 main 函数来开始执行。Java applet 不需要这样的函数来开始执行</li><li>Java applet 一般会使用很严格的安全策略，Java 应用一般使用比较宽松的安全策略</li></ul></li><li><p>Java applet 有哪些限制条件？</p><ul><li>applet 不能够载入类库或者定义本地方法</li><li>applet 不能在宿主机上读写文件</li><li>applet 不能读取特定的系统属性</li><li>applet 不能发起网络连接，除非是跟宿主机</li><li>applet 不能够开启宿主机上其他任何的程序</li></ul></li><li><p>什么是不受信任的 applet？</p><ul><li>不受信任的 applet 是不能访问或是执行本地系统文件的 Java applet，默认情况下，所有下载的 applet 都是不受信任的</li></ul></li><li><p>从网络上加载的 applet 和从本地文件系统加载的 applet 有什么区别？</p><ul><li>当 applet 是从网络上加载的时候，applet 是由 applet 类加载器载入的，它受 applet 安全管理器的限制</li><li>当 applet 是从客户端的本地磁盘载入的时候，applet 是由文件系统加载器载入的</li><li>从文件系统载入的 applet 允许在客户端读文件，写文件，加载类库，并且也允许执行其他程序，但是，却通不过字节码校验</li></ul></li><li><p>applet 类加载器是什么？它会做哪些工作？</p><ul><li>当 applet 是从网络上加载的时候，它是由 applet 类加载器载入的。类加载器有自己的 java 名称空间等级结构。类加载器会保证来自文件系统的类有唯一的名称空间，来自网络资源的类有唯一的名称空间</li><li>当浏览器通过网络载入 applet 的时候，applet 的类被放置于和 applet 的源相关联的私有的名称空间中。然后，那些被类加载器载入进来的类都是通过了验证器验证的。验证器会检查类文件格式是否遵守 Java 语言规范，确保不会出现堆栈溢出(stack overflow)或者下溢(underflow)，传递给字节码指令的参数是正确的</li></ul></li><li><p>applet 安全管理器是什么？它会做哪些工作？</p><ul><li>applet 安全管理器是给 applet 施加限制条件的一种机制。浏览器可以只有一个安全管理器。安全管理器在启动的时候被创建，之后不能被替换覆盖或者是扩展</li></ul></li><li><p>弹出式选择菜单(Choice)和列表(List)有什么区别</p><ul><li>Choice 是以一种紧凑的形式展示的，需要下拉才能看到所有的选项。Choice 中一次只能选中一个选项</li><li>List 同时可以有多个元素可见，支持选中一个或者多个元素</li></ul></li><li><p>布局管理器</p><ul><li>布局管理器用来在容器中组织组件</li></ul></li><li><p>滚动条(Scrollbar)和滚动面板(JScrollPane)区别</p><ul><li>Scrollbar 是一个组件，不是容器。而 JScrollPane 是容器。JScrollPane 自己处理滚动事件</li><li>在设置界面时，可能会遇到在一个较小的容器窗体中显示一个较大部分的内容，这时可以使用 JScrollPane 面板，JscrollPane 面板是带滚动条的面板，也是一种容器，但是常用于布置单个控件，并且不可以使用布局管理器。如果需要在 JScrollPane 面板中放置多个控件，需要将多个控件放置到 JPanel 面板上，然后将 JPanel 面板作为一个整体控件添加到 JScrollPane 控件上</li></ul></li><li><p>哪些 Swing 的方法是线程安全的？</p><ul><li>只有 3 个线程安全的方法： repaint(), revalidate(), and invalidate()</li></ul></li><li><p>支持重绘(painting)的组件</p><ul><li>Canvas, Frame, Panel,和 Applet 支持重绘</li></ul></li><li><p>什么是裁剪(clipping)？</p><ul><li>限制在一个给定的区域或者形状的绘图操作就做裁剪</li></ul></li><li><p>MenuItem 和 CheckboxMenuItem 的区别是什么？</p><ul><li>CheckboxMenuItem 类继承自 MenuItem 类，支持菜单选项可以选中或者不选中</li></ul></li><li><p>边缘布局(BorderLayout)里面的元素是如何布局的？</p><ul><li>BorderLayout 里面的元素是按照容器的东西南北中进行布局的</li></ul></li><li><p>网格包布局(GridBagLayout)里面的元素是如何布局的？</p><ul><li>GridBagLayout 里面的元素是按照网格进行布局的。不同大小的元素可能会占据网格的多于 1 行或一列。因此，行数和列数可以有不同的大小</li></ul></li><li><p>Windows 和 Frame 区别</p><ul><li>Frame 类继承了 Window 类，它定义了一个可以有菜单栏的主应用窗口</li></ul></li><li><p>裁剪(clipping)和重绘(repainting)有什么联系？</p><ul><li>当窗口被 AWT 重绘线程重绘的时候，它会把裁剪区域设置成重绘的窗口区域</li></ul></li><li><p>事件监听器接口(event-listener interface)和事件适配器(event-adapter)的关系</p><ul><li>事件监听器接口定义了对特定的事件，事件处理器必须要实现的方法</li><li>事件适配器给事件监听器接口提供了默认的实现（适配器是一种设计模式，就是我写一个抽象方法，实现接口所有方法，但是都没有语句，你要实现哪个方法，就重写哪个方法）</li></ul></li><li><p>GUI 组件如何来处理它自己的事件？</p><ul><li>GUI 组件可以处理它自己的事件，只要它实现相对应的事件监听器接口，并且把自己作为事件监听器</li></ul></li><li><p>Java 的布局管理器比传统的窗口系统有哪些优势？</p><ul><li>Java 使用布局管理器以一种一致的方式在所有的窗口平台上摆放组件。</li><li>因为布局管理器不会和组件的绝对大小和位置相绑定，所以他们能够适应跨窗口系统的特定平台的不同</li></ul></li><li><p>Java 的 Swing 组件的种设计模式</p><ul><li>Java 中的 Swing 组件使用了 MVC(视图-模型-控制器)设计模式</li></ul></li><li><p>JDBC 是允许用户在不同数据库之间做选择的一个抽象层。JDBC 允许开发者用 JAVA 写数据库应用程序，而不需要关心底层特定数据库的细节</p></li><li><p>驱动(Driver)在 JDBC 中的角色</p><ul><li>JDBC 驱动提供了特定厂商对 JDBC API 接口类的实现</li><li>驱动必须要提供 java.sql 包下面这些类的实现：Connection, Statement, PreparedStatement,CallableStatement, ResultSet 和 Driver</li></ul></li><li><p>Class.forName()方法作用</p><ul><li>初始化参数指定的类，并且返回此类对应的 Class 对象</li><li>在初始化一个类，生成一个实例的时候，newInstance()方法使用类加载机制，new 关键字是创建一个新类；从 JVM 的角度看，我们使用关键字 new 创建一个类的时候，这个类可以没有被加载。但是使用 newInstance()方法的时候就要求： 1、这个类已经加载； 2、这个类已经连接了；完成上面两个步骤的正是 Class 的静态方法 forName()所完成的，这个静态方法调用了启动类加载器，即加载 java API 的那个加载器</li></ul></li><li><p>PreparedStatement 比 Statement 有什么优势？</p><ul><li>PreparedStatements 是预编译的，PreparedStatements 实例包涵已编译的 sql 语句，所以其执行速度要快于 statement 对象，性能会更好</li><li>PreparedStatements 作为 statement 的子类，继承了 statement 的所有方法，三种方法，excute,excuteQuery 和 excuteUpdate 已被更改以使之不再需要参数</li><li>PreparedStatements 的代码可读性，可维护性强于 statement.</li><li>极大的提高了安全性</li></ul></li><li><p>什么时候使用 CallableStatement？用来准备 CallableStatement 的方法是什么？</p><ul><li>CallableStatement 用来执行存储过程。存储过程是由数据库存储和提供的，它还提供了安全性和模块化</li><li>存储过程可以接受输入参数，也可以有返回结果</li><li>准备一个 CallableStatement 的方法是：CallableStament.prepareCall();</li></ul></li><li><p>RMI:Java 远程方法调用(Java RMI)是 Java API 对远程过程调用(RPC)提供的面向对象的等价形式，支持直接传输序列化的 Java 对象和分布式垃圾回收。远程方法调用可以看做是激活远程正在运行的对象上的方法的步骤。RMI 对调用者是位置透明的，因为调用者感觉方法是执行在本地运行的对象上的。看下 RMI 的一些注意事项</p></li><li><p>RMI 体系结构的基本原则</p><ul><li>RMI 体系结构是基于一个非常重要的行为定义和行为实现相分离的原则。RMI 允许定义行为的代码和实现行为的代码相分离，并且运行在不同的 JVM 上</li></ul></li><li><p>RMI 体系结构分层</p><ul><li>存根和骨架层(Stub and Skeleton layer)：这一层对程序员是透明的，它主要负责拦截客户端发出的方法调用请求，然后把请求重定向给远程的 RMI 服务</li><li>远程引用层(Remote Reference Layer)：RMI 体系结构的第二层用来解析客户端对服务端远程对象的引用。这一层解析并管理客户端对服务端远程对象的引用。连接是点到点的</li><li>传输层(Transport layer)：这一层负责连接参与服务的两个 JVM。这一层是建立在网络上机器间的 TCP/IP 连接之上的。它提供了基本的连接服务，还有一些防火墙穿透策略</li></ul></li><li><p>RMI 中的远程接口(Remote Interface)扮演了什么样的角色？</p><ul><li>远程接口用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现</li></ul></li><li><p>RMI 中的远程接口(Remote Interface)扮演了什么样的角色？</p><ul><li>远程接口用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现。</li></ul></li><li><p>java.rmi.Naming 类扮演了什么样的角色？</p><ul><li>java.rmi.Naming 类用来存储和获取在远程对象注册表里面的远程对象的引用。Naming 类的每一个方法接收一个 URL 格式的 String 对象作为它的参数</li></ul></li><li><p>RMI 的绑定(Binding)</p><ul><li>绑定是为了查询找远程对象而给远程对象关联或者是注册以后会用到的名称的过程。远程对象可以使用 Naming 类的 bind()或者 rebind()方法跟名称相关联</li></ul></li><li><p>Naming 类的 bind()和 rebind()方法有什么区别？</p><ul><li>bind()方法负责把指定名称绑定给远程对象，rebind()方法负责把指定名称重新绑定到一个新的远程对象。如果那个名称已经绑定过了，先前的绑定会被替换掉</li></ul></li><li><p>让 RMI 程序能正确运行有哪些步骤？</p><ul><li>编译所有的源文件</li><li>使用 rmic 生成 stub</li><li>启动 rmiregistry</li><li>启动 RMI 服务器</li><li>运行客户端程序</li></ul></li><li><p>RMI 的 stub 扮演了什么样的角色？</p><ul><li>远程对象的 stub 扮演了远程对象的代表或者代理的角色。调用者在本地 stub 上调用方法，它负责在远程对象上执行方法。当 stub 的方法被调用的时候，会经历以下几个步骤：</li><li>初始化到包含了远程对象的 JVM 的连接</li><li>序列化参数到远程的 JVM</li><li>等待方法调用和执行的结果</li><li>反序列化返回的值或者是方法没有执行成功情况下的异常</li><li>把值返回给调用者</li></ul></li><li><p>什么是分布式垃圾回收(DGC)？它是如何工作的？</p><ul><li>DGC 叫做分布式垃圾回收。RMI 使用 DGC 来做自动垃圾回收。因为 RMI 包含了跨虚拟机的远程对象的引用，垃圾回收是很困难的。DGC 使用引用计数算法来给远程对象提供自动内存管理</li></ul></li><li><p>RMI 中使用 RMI 安全管理器(RMISecurityManager)的目的是什么？</p><ul><li>RMISecurityManager 使用下载好的代码提供可被 RMI 应用程序使用的安全管理器。如果没有设置安全管理器，RMI 的类加载器就不会从远程下载任何的类。</li></ul></li><li><p>解释下 Marshalling 和 demarshalling</p><ul><li>当应用程序希望把内存对象跨网络传递到另一台主机或者是持久化到存储的时候，就必须要把对象在内存里面的表示转化成合适的格式。这个过程就叫做 Marshalling，反之就是 demarshalling</li></ul></li><li><p>解释下 Serialization 和 Deserialization</p><ul><li><p>Java 提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等</p></li><li><p>序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。反序列化是把对象从扁平状态转化成活动对象的相反的步骤</p></li><li><p>Servlet 是用来处理客户端请求并产生动态网页内容的 Java 类。</p></li><li><p>Servlet 主要是用来处理或者是存储 HTML 表单提交的数据，产生动态内容，在无状态的 HTTP 协议下管理状态信息</p></li></ul></li><li><p>Servlet 的体系结构</p><ul><li>所有的 Servlet 都必须要实现的核心的接口是 javax.servlet.Servlet</li><li>每一个 Servlet 都必须要直接或者是间接实现这个接口，或者是继承 javax.servlet.GenericServlet 或者 javax.servlet.http.HTTPServlet</li><li>最后，Servlet 使用多线程可以并行的为多个请求服务</li></ul></li><li><p>Applet 和 Servlet 有什么区别？</p><ul><li>Applet 是运行在客户端主机的浏览器上的客户端 Java 程序。而 Servlet 是运行在 web 服务器上的服务端的组件</li><li>applet 可以使用用户界面类，而 Servlet 没有用户界面，相反，Servlet 是等待客户端的 HTTP 请求，然后为请求产生响应</li></ul></li><li><p>GenericServlet 和 HttpServlet 区别</p><ul><li>GenericServlet 是一个通用的协议无关的 Servlet，它实现了 Servlet 和 ServletConfig 接口。继承自 GenericServlet 的 Servlet 应该要覆盖 service()方法</li><li>若要开发一个能用在网页上服务于使用 HTTP 协议请求的 Servlet，你的 Servlet 必须要继承自 HttpServlet</li></ul></li><li><p>Servlet 的生命周期</p><ul><li>1）对每一个客户端的请求，Servlet 引擎载入 Servlet，调用它的 init()方法，完成 Servlet 的初始化</li><li>2）Servlet 对象通过为每一个请求单独调用 service()方法来处理所有随后来自客户端的请求</li><li>3）最后，调用 Servlet 的 destroy()方法把 Servlet 删除掉</li></ul></li><li><p>doGet()方法和 doPost()方法区别</p><ul><li>doGet：GET 方法会把名值对追加在请求的 URL 后面。因为 URL 对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递</li><li>doPOST：POST 方法通过把请求参数值放在请求体中来克服 GET 方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过 POST 请求传递的敏感信息对外部客户端是不可见的</li></ul></li><li><p>Web 应用程序</p><ul><li>Web 应用程序是对 Web 或者是应用服务器的动态扩展</li><li>有两种类型的 Web 应用：面向表现的和面向服务的。面向表现的 Web 应用程序会产生包含了很多种标记语言和动态内容的交互的 web 页面作为对请求的响应。而面向服务的 Web 应用实现了 Web 服务的端点(endpoint)</li></ul></li><li><p>什么是服务端包含(Server Side Include)？</p><ul><li>服务端包含(SSI)是一种简单的解释型服务端脚本语言，大多数时候仅用在 Web 上，用 servlet 标签嵌入进来</li><li>SSI 最常用的场景把一个或多个文件包含到 Web 服务器的一个 Web 页面中。当浏览器访问 Web 页面的时候，Web 服务器会用对应的 servlet 产生的文本来替换 Web 页面中的 servlet 标签</li></ul></li><li><p>Servlet 链(Servlet Chaining)</p><ul><li>Servlet 链是把一个 Servlet 的输出发送给另一个 Servlet 的方法。第二个 Servlet 的输出可以发送给第三个 Servlet，依次类推。链条上最后一个 Servlet 负责把响应发送给客户端</li></ul></li><li><p>如何知道是哪一个客户端的机器正在请求你的 Servlet？</p><ul><li>ServletRequest 类可以找出客户端机器的 IP 地址或者是主机名</li><li>etRemoteAddr()方法获取客户端主机的 IP 地址，getRemoteHost()可以获取主机名</li></ul></li><li><p>HTTP 响应的结构是怎么样的？</p><ul><li>状态码(Status Code)：描述了响应的状态。可以用来检查是否成功的完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果 Servlet 没有返回状态码，默认会返回成功的状态码 HttpServletResponse.SC_OK</li><li>HTTP 头部(HTTP Header)：它们包含了更多关于响应的信息。比如：头部可以指定认为响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式</li><li>主体(Body)：它包含了响应的内容。它可以包含 HTML 代码，图片，等等。主体是由传输在 HTTP 消息中紧跟在头部后面的数据字节组成的</li></ul></li><li><p>什么是 cookie？session 和 cookie 有什么区别？</p><ul><li>cookie 是 Web 服务器发送给浏览器的一块信息。浏览器会在本地文件中给每一个 Web 服务器存储 cookie。以后浏览器在给特定的 Web 服务器发请求的时候，同时会发送所有为该服务器存储的 cookie</li><li>无论客户端浏览器做怎么样的设置，session 都应该能正常工作。客户端可以选择禁用 cookie，但是，session 仍然是能够工作的，因为客户端无法禁用服务端的 session</li><li>在存储的数据量方面 session 和 cookies 也是不一样的。session 能够存储任意的 Java 对象，cookie 只能存储 String 类型的对象</li></ul></li><li><p>浏览器和 Servlet 通信使用的是 HTTP 协议</p></li><li><p>HTTP 隧道:HTTP 隧道是一种利用 HTTP 或者是 HTTPS 把多种网络协议封装起来进行通信的技术。因此，HTTP 协议扮演了一个打通用于通信的网络协议的管道的包装器的角色。把其他协议的请求掩盖成 HTTP 的请求就是 HTTP 隧道</p></li><li><p>sendRedirect()和 forward()方法有什么区别？</p><ul><li>sendRedirect()方法会创建一个新的请求，而 forward()方法只是把请求转发到一个新的目标上</li><li>重定向(redirect)以后，之前请求作用域范围以内的对象就失效了，因为会产生一个新的请求，而转发(forwarding)以后，之前请求作用域范围以内的对象还是能访问的</li><li>一般认为 sendRedirect()比 forward()要慢</li></ul></li><li><p>什么是 URL 编码和 URL 解码？</p><ul><li>URL 编码是负责把 URL 里面的空格和其他的特殊字符替换成对应的十六进制表示，反之就是解码</li></ul></li><li><p>什么是 JSP 页面？</p><ul><li>JSP 页面是一种包含了静态数据和 JSP 元素两种类型的文本的文本文档</li><li>静态数据可以用任何基于文本的格式来表示，比如：HTML 或者 XML</li><li>JSP 是一种混合了静态内容和动态产生的内容的技术</li></ul></li><li><p>JSP 请求是如何被处理的？</p><ul><li>浏览器首先要请求一个以.jsp 扩展名结尾的页面，发起 JSP 请求，然后，Web 服务器读取这个请求，使用 JSP 编译器把 JSP 页面转化成一个 Servlet 类。</li><li>需要注意的是，只有当第一次请求页面或者是 JSP 文件发生改变的时候 JSP 文件才会被编译，然后服务器调用 servlet 类，处理浏览器的请求。一旦请求执行结束，servlet 会把响应发送给客户端</li></ul></li><li><p>JSP 优点</p><ul><li>JSP 页面是被动态编译成 Servlet 的，因此，开发者可以很容易的更新展现代码</li><li>JSP 页面可以被预编译</li><li>JSP 页面可以很容易的和静态模板结合，包括：HTML 或者 XML，也可以很容易的和产生动态内容的代码结合起来</li><li>开发者可以提供让页面设计者以类 XML 格式来访问的自定义的 JSP 标签库</li><li>开发者可以在组件层做逻辑上的改变，而不需要编辑单独使用了应用层逻辑的页面。</li></ul></li><li><p>什么是 JSP 指令(Directive)？JSP 中有哪些不同类型的指令？</p><ul><li>Directive 是当 JSP 页面被编译成 Servlet 的时候，JSP 引擎要处理的指令。Directive 用来设置页面级别的指令，从外部文件插入数据，指定自定义的标签库。Directive 是定义在 &lt;%@ 和 %&gt;之间的。下面列出了不同类型的 Directive：</li><li>包含指令(Include directive)：用来包含文件和合并文件内容到当前的页面。</li><li>页面指令(Page directive)：用来定义 JSP 页面中特定的属性，比如错误页面和缓冲区。</li><li>Taglib 指令： 用来声明页面中使用的自定义的标签库。</li></ul></li><li><p>JSP 动作(JSP action)</p><ul><li>JSP 动作以 XML 语法的结构来控制 Servlet 引擎的行为。当 JSP 页面被请求的时候，JSP 动作会被执行。它们可以被动态的插入到文件中，重用 JavaBean 组件，转发用户到其他的页面，或者是给 Java 插件产生 HTML 代码。下面列出了可用的动作：</li><li>jsp:include-当 JSP 页面被请求的时候包含一个文件</li><li>jsp:useBean-找出或者是初始化 Javabean</li><li>jsp:setProperty-设置 JavaBean 的属性</li><li>jsp:getProperty-获取 JavaBean 的属性</li><li>jsp:forward-把请求转发到新的页面</li><li>jsp:plugin-产生特定浏览器的代码。</li></ul></li><li><p>什么是 Scriptlets？</p><ul><li>JSP 技术中，scriptlet 是嵌入在 JSP 页面中的一段 Java 代码。scriptlet 是位于标签内部的所有的东西，在标签与标签之间，用户可以添加任意有效的 scriplet</li></ul></li><li><p>声明(Decalaration)在哪里？</p><ul><li>声明跟 Java 中的变量声明很相似，它用来声明随后要被表达式或者 scriptlet 使用的变量。添加的声明必须要用开始和结束标签包起来</li></ul></li><li><p>什么是表达式(Expression)？</p><ul><li>【列表很长，可以分上、中、下发布】</li><li>JSP 表达式是 Web 服务器把脚本语言表达式的值转化成一个 String 对象，插入到返回给客户端的数据流中。表达式是在&lt;%=和%&gt;这两个标签之间定义的</li></ul></li><li><p>隐含对象是什么意思？有哪些隐含对象？</p><ul><li>JSP 隐含对象是页面中的一些 Java 对象，JSP 容器让这些 Java 对象可以为开发者所使用。开发者不用明确的声明就可以直接使用他们。JSP 隐含对象也叫做预定义变量。下面列出了 JSP 页面中的隐含对象：application、page、request、response、session、exception、out、config、pageContext</li></ul></li><li><p>面向对象软件开发的优点有哪些？</p><ul><li>代码开发模块化，更易维护和修改</li><li>代码复用</li><li>增强代码的可靠性和灵活性</li><li>增加代码的可理解性</li><li>面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象</li></ul></li><li><p>封装的定义和好处有哪些？</p><ul><li>封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。在 Java 当中，有 3 种修饰符：public，private 和 protected。每一种修饰符给其他的位于同一个包或者不同包下面对象赋予了不同的访问权限。下面列出了使用封装的一些好处：</li><li>通过隐藏对象的属性来保护对象内部的状态</li><li>提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展</li><li>禁止对象之间的不良交互提高模块化</li><li>参考这个文档获取更多关于封装的细节和示例</li></ul></li><li><p>多态的定义？</p><ul><li>多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力</li><li>一个多态类型上的操作可以应用到其他类型的值上面</li></ul></li><li><p>继承的定义？</p><ul><li>继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性</li></ul></li><li><p>抽象的定义？抽象和封装的不同点？</p><ul><li>抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java 支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开</li><li>抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之学习UML类图和时序图</title>
      <link href="/20160724/designpattern-uml/"/>
      <url>/20160724/designpattern-uml/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学习-UML-类图和时序图"><a href="#学习-UML-类图和时序图" class="headerlink" title="学习 UML 类图和时序图"></a>学习 UML 类图和时序图</h1><p>类图中各个类之间的关系； 能看懂类图中各个类之间的线条、箭头代表什么意思后，也就足够应对 日常的工作和交流； 同时，我们应该能将类图所表达的含义和最终的代码对应起来</p><span id="more"></span><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/29rXZX.jpg"></p><ul><li>车的类图结构为&lt;&lt;abstract&gt;&gt;，表示车是一个抽象类；</li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与 SUV 之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><h2 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h2><h3 id="1-泛化关系-generalization"><a href="#1-泛化关系-generalization" class="headerlink" title="1.泛化关系(generalization)"></a>1.泛化关系(generalization)</h3><ul><li>类的继承结构表现在 UML 中为：泛化(generalize)与实现(realize)</li><li>继承关系为 is-a 的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</li><li>例如：汽车是车，狗是动物，地球是行星</li><li>泛化关系用一条带空心箭头的直接表示；如下图表示（A 继承自 B）<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/arL9Qf.jpg"></li><li>例如：汽车在现实中有实现，可用汽车定义具体的对象；汽车与 SUV 之间为泛化关系；<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/yqaZ1R.jpg"></li></ul><blockquote><ul><li>注：最终代码中，泛化关系表现为<em>继承非抽象类</em></li></ul></blockquote><h3 id="2-实现关系-realize"><a href="#2-实现关系-realize" class="headerlink" title="2.实现关系(realize)"></a>2.实现关系(realize)</h3><ul><li>实现关系用一条带空心箭头的虚线表示</li><li>例如：eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在 C++中用抽象类表示，在 JAVA 中有接口这个概念，更容易理解）<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/9oBm7t.jpg"></li></ul><blockquote><ul><li>注：最终代码中，实现关系表现为<em>继承抽象类</em></li></ul></blockquote><h3 id="3-聚合关系-aggregation"><a href="#3-聚合关系-aggregation" class="headerlink" title="3.聚合关系(aggregation)"></a>3.聚合关系(aggregation)</h3><ul><li>聚合关系用一条带空心菱形箭头的直线表示，如下图表示 A 聚合到 B 上，或者说 B 由 A 组成<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/o52AIJ.jpg"></li><li>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成</li><li>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在</li></ul><h3 id="4-组合关系-composition"><a href="#4-组合关系-composition" class="headerlink" title="- 4.组合关系(composition)"></a>- 4.组合关系(composition)</h3><ul><li>组合关系用一条带实心菱形箭头直线表示，如下图表示 A 组成 B，或者 B 由 A 组成<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/PZnMM8.jpg"></li><li>与聚合关系相比相同之处：同样表示整体由部分构成的语义；比如公司由多个部门组成</li><li>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了</li></ul><h3 id="5-关联关系-association"><a href="#5-关联关系-association" class="headerlink" title="5.关联关系(association)"></a>5.关联关系(association)</h3><ul><li>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系</li><li>例如：乘车人和车票之间就是一种关联关系；主板和 PC 主机之间的一种关联关系</li><li>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示 A 知道 B，但 B 不知道 A<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/GvpcSE.jpg"></li></ul><blockquote><ul><li>注：在最终代码中，关联对象通常是<em>以成员变量的形式实现的</em></li></ul></blockquote><h3 id="6-依赖关系-dependency"><a href="#6-依赖关系-dependency" class="headerlink" title="6.依赖关系(dependency)"></a>6.依赖关系(dependency)</h3><ul><li>依赖关系是用一套带箭头的虚线表示的；如下图表示 A 依赖于 B；他描述一个对象在运行期间会用到另一个对象的关系<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/eKl57t.jpg"></li><li>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化</li><li>依赖也有方向，其中双向依赖是一种非常糟糕的结构，一般都应该只保持单向依赖</li></ul><blockquote><ul><li>注：在最终代码中，依赖关系体现为<em>类构造方法及类方法的传入参数</em>，箭头的指向为调用关系；依赖关系处理临时知道对方外，还是“使用”对方的方法和属性</li></ul></blockquote><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><ul><li>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</li><li>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</li><li>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html">看懂 UML 类图和时序图</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android面试要点总结</title>
      <link href="/20160715/interview-android-summary/"/>
      <url>/20160715/interview-android-summary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Android-面试要点总结"><a href="#Android-面试要点总结" class="headerlink" title="Android 面试要点总结"></a>Android 面试要点总结</h1><h2 id="1-Java-技术"><a href="#1-Java-技术" class="headerlink" title="1.Java 技术"></a>1.Java 技术</h2><ul><li><p>1.1 Java 基础<br>_ 对象、继承、多态理解<br>_ 泛型作用及使用场景<br>_ 枚举的特点及使用场景<br>_ 线程 sleep 和 wait 的区别<br>_ Java 反射机制<br>_ weak/soft/strong 的区别 * Object 的 hasCode()与 equals()的区别和作用</p><span id="more"></span></li><li><p>1.2 集合类</p><ul><li>Java 常用集合类、区别和性能</li><li>并发相关集合类</li><li>部分常用集合类的内部实现方式</li></ul></li><li><p>1.3 多线程相关</p><ul><li>Thread、Runable、Callable、Futrue 类关系和区别</li><li>JDK 中默认提供哪些线程池，有何区别</li><li>线程同步有几种方式，分别阐述在项目中的用法</li><li>在理解默认线程池前提下，自己实现线程池</li></ul></li><li><p>1.4 字符</p><ul><li>注解的使用</li><li>注解的级别及意义</li><li>如何自定义注解</li></ul></li></ul><h2 id="2-Android-技术"><a href="#2-Android-技术" class="headerlink" title="2.Android 技术"></a>2.Android 技术</h2><ul><li><p>2.1 Android 基础</p><ul><li>四大组件的意义及使用，生命周期回调及意义</li><li>AsynTask、Handle 的使用</li><li>Android 系统层次框架结构</li><li>AsynTask 的实现方式</li><li>AsynTask 使用的时候应该注意什么</li><li>Android 常见的存储方式</li><li>Looper、Handler 和 MessageQueue 的关系</li><li>Activity 的启动流程（考察队 Framework 的熟悉程度）、</li><li>多进程开发注意事项（Application 类区分进程，进程间内存不可见、进程间通讯方式）</li></ul></li><li><p>2.2 Resource 相关</p><ul><li>.9 图片的意义</li><li>style 和 theme 的作用和用法</li><li>dpi、sp、px 的区别以及转换关系</li><li>raw 和 assets 的文件夹作用，二者的区别</li><li>Android 系统如何在多个资源文件夹下查找匹配最合适的资源</li></ul></li><li><p>2.3 虚拟机</p><ul><li>Java 内存模型</li><li>Android 虚拟机特点</li><li>Dalvik 和 Art 的区别</li><li>熟悉垃圾回收的实现机制，了解虚拟机的 GC 类型</li></ul></li><li><p>2.4 View 相关</p><ul><li>常用组件的使用：ListView、RecyclerView 及 Adapter 的使用</li><li>View 之间的继承关系</li><li>Invalidate 与 postInvalidate 的区别</li><li>自定义 View 的实现方式（根据项目经验询问相关条件）</li><li>onMeasure/onLayout/onDraw 的作用</li><li>Paint、Matrix、Shader 等绘制相关类的方法作用</li><li>详细描述事件分发机制</li></ul></li><li><p>2.5 动画</p><ul><li>Android 动画的实现方式</li><li>Interpolatio 类的意义和常用的 Interpolator</li><li>ViewAnimation 与属性动画有什么区别</li><li>如何自定义 ViewAnimation</li><li>属性动画的实现原理</li></ul></li><li><p>2.6 图片处理</p><ul><li>一般图片中如何加载大图</li><li>图片压缩方式</li><li>如何不压缩图片加载高清图</li><li>图片加载过程中，一般会使用缓存，这个缓存的主要作用是什么</li><li>谈谈自己熟悉的图片加载框架</li></ul></li></ul><h2 id="3-项目经验"><a href="#3-项目经验" class="headerlink" title="3.项目经验"></a>3.项目经验</h2><ul><li><p>3.1 开发工具</p><ul><li>代码管理工具：SVN、Git</li><li>常用调试工具：Hierarchy Viewer、 DDMS 等</li><li>CI 工具：Lint 检查，Findbugs，Jenkins</li><li>内存分析工具：dumpsys、memoinfo、MAT</li></ul></li><li><p>3.2 项目工程</p><ul><li>APP 更新策略：推送/拉取</li><li>如何统一处理错误* 如何收集用户行为</li><li>日志管理有哪些要点？(Debug 包开放，release 包关闭，错误日志反馈)</li><li>打包方式 Ant、Maven、Gradle</li><li>机型适配情况</li></ul></li><li><p>3.3 开发平台</p><ul><li>是否使用过第三方平台</li><li>常用开放平台的熟悉度(微信、QQ、微博、支付宝等常用的支付和分享)</li><li>是否进行过对第三方平台的统一封装？</li><li>是否自己开发过 SDK？</li></ul></li><li><p>3.4 设计相关</p><ul><li>有哪些常用的设计模式、设计原则</li><li>设计模式在 Android 源码中的应用</li><li>设计模式在项目中的应用</li><li>项目中的分包方式</li><li>MVC 在 android 中的应用，利弊</li><li>android 项目中的常见层次结构,包划分</li><li>有没有设计过项目中的层级结构、包划分</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS X 终端命令学习</title>
      <link href="/20151229/mac-terminalusing/"/>
      <url>/20151229/mac-terminalusing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mac-OS-X-终端命令学习"><a href="#Mac-OS-X-终端命令学习" class="headerlink" title="Mac OS X 终端命令学习"></a>Mac OS X 终端命令学习</h1><ol><li>显示当前目录的路径</li></ol><ul><li>pwd<span id="more"></span></li></ul><ol start="2"><li>列出文件</li></ol><ul><li>ls 参数 目录名</li><li>参数: -w 显示中文，-l 详细信息， -a 包括隐藏文件，每一行开头是 “d” 则为文件夹，开头是 “-” 则为文件。</li><li>例: 看看驱动目录下有什么：<br>ls /System/Library/Extensions</li></ul><ol start="3"><li>打开目录</li></ol><ul><li>cd 目录名</li><li>cd .. ：返回上一级目录</li><li>cd ../.. ：cd ../.. /..：返回上两级/三级目录</li><li>cd . ：当前目录</li><li>例：想到驱动目录下溜达一圈：<br>cd /System/Library/Extensions</li></ul><ol start="4"><li>建立新目录</li></ol><ul><li>mkdir 目录名</li><li>例：在驱动目录下建一个备份目录<br>backup：mkdir/System/Library/Extensions/backup</li></ul><ol start="5"><li>新建文件</li></ol><ul><li>touch 文件名</li><li>例：在当前目录下建一个备份文件 backup：<br>touch backup.txt</li></ul><ol start="6"><li>拷贝文件</li></ol><ul><li>cp 参数 源文件 目标文件</li><li>例：想把桌面的 Natit.kext 拷贝到驱动目录中<br> cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions</li><li>参数 R 表示对目录进行递归操作，kext 在图形界面下看起来是个文件，实际上是个文件夹。</li><li>把驱动目录下的所有文件备份到桌面 backup：<br>cp -R /System/Library/Extensions/ /User/用户名/Desktop/backup</li></ul><ol start="7"><li>删除文件</li></ol><ul><li>rm 参数 文件</li><li>参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了</li><li>例：想删除驱动的缓存：<code>rm </code>-rf /System/Library/Extensions.kextcache<code> rm -rf /System/Library/Extensions.mkext</code></li></ul><ol start="8"><li>移动文件</li></ol><ul><li>mv 源文件 目标文件</li><li>例：想把 AppleHDA.Kext 移到桌面：<br>mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</li></ul><ol start="9"><li>文本编辑</li></ol><ul><li>nano 文件名<br>例：编辑 Info.plist：nano /System/Library/Extensions/Natit.kext/Info.plist</li></ul><ol start="10"><li>清屏</li></ol><ul><li>clear</li></ul><ol start="11"><li>目录操作：</li></ol><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>mkdir</td><td>创建一个目录</td><td>mkdir dirname</td></tr><tr><td>rmdir</td><td>删除一个目录</td><td>rmdir dirname</td></tr><tr><td>mvdir</td><td>移动或重命名一个目录</td><td>mvdir dir1 dir2</td></tr><tr><td>cd</td><td>改变当前目录</td><td>cd dirname</td></tr><tr><td>pwd</td><td>显示当前目录的路径名</td><td>pwd</td></tr><tr><td>ls</td><td>显示当前目录的内容</td><td>ls -la</td></tr></tbody></table><ol start="12"><li>文件操作：</li></ol><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>cat</td><td>显示或连接文件</td><td>cat filename</td></tr><tr><td>od</td><td>显示非文本文件的内容</td><td>od -c filename</td></tr><tr><td>cp</td><td>复制文件或目录</td><td>cp file1 file2</td></tr><tr><td>rm</td><td>删除文件或目录</td><td>rm filename</td></tr><tr><td>mv</td><td>改变文件名或所在目录</td><td>mv file1 file2</td></tr><tr><td>find</td><td>使用匹配表达式查找文件</td><td>find . -name “*.c” -print</td></tr><tr><td>file</td><td>显示文件类型</td><td>file filename</td></tr></tbody></table><ol start="13"><li>选择操作：</li></ol><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>head</td><td>显示文件的最初几行</td><td>head -20 filename</td></tr><tr><td>tail</td><td>显示文件的最后几行</td><td>tail -15 filename</td></tr><tr><td>cut</td><td>显示文件每行中的某些域</td><td>cut -f1,7 -d: /etc/passwd</td></tr><tr><td>colrm</td><td>从标准输入中删除若干列</td><td>colrm 8 20 file2</td></tr><tr><td>diff</td><td>比较并显示两个文件的差异</td><td>diff file1 file2</td></tr><tr><td>sort</td><td>排序或归并文件</td><td>sort -d -f -u file1</td></tr><tr><td>uniq</td><td>去掉文件中的重复行</td><td>uniq file1 file2</td></tr><tr><td>comm</td><td>显示两有序文件的公共和非公共行</td><td>comm file1 file2</td></tr><tr><td>wc</td><td>统计文件的字符数、词数和行数</td><td>wc filename</td></tr><tr><td>nl</td><td>给文件加上行号</td><td>nl file1 &gt;file2</td></tr></tbody></table><ol start="14"><li><p>进程操作：</p><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>ps</td><td>显示进程当前状态</td><td>ps u</td></tr><tr><td>kill</td><td>终止进程</td><td>kill -9 30142</td></tr></tbody></table></li><li><p>时间操作：</p><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>date</td><td>显示系统的当前日期和时间</td><td>date</td></tr><tr><td>cal</td><td>显示日历</td><td>cal 8 1996</td></tr><tr><td>time</td><td>统计程序的执行时间</td><td>time a.out</td></tr></tbody></table></li><li><p>网络与通信操作：</p><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>telnet</td><td>远程登录</td><td>telnet hpc.sp.net.edu.cn</td></tr><tr><td>rlogin</td><td>远程登录</td><td>rlogin hostname -l username</td></tr><tr><td>rsh</td><td>在远程主机执行指定命令</td><td>rsh f01n03 date</td></tr><tr><td>ftp</td><td>在本地主机与远程主机之间传输文件</td><td>ftpftp.sp.net.edu.cn</td></tr><tr><td>rcp</td><td>在本地主机与远程主机 之间复制文件</td><td>rcp file1 host1:file2</td></tr><tr><td>ping</td><td>给一个网络主机发送 回应请求</td><td>ping hpc.sp.net.edu.cn</td></tr><tr><td>mail</td><td>阅读和发送电子邮件</td><td>mail</td></tr><tr><td>write</td><td>给另一用户发送报文</td><td>write username pts/1</td></tr><tr><td>mesg</td><td>允许或拒绝接收报文</td><td>mesg n</td></tr></tbody></table></li><li><p>Korn Shell 命令：</p><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>history</td><td>列出最近执行过的 几条命令及编号</td><td>history</td></tr><tr><td>r</td><td>重复执行最近执行过的 某条命令</td><td>r -2</td></tr><tr><td>alias</td><td>给某个命令定义别名</td><td>alias del=rm -i</td></tr><tr><td>unalias</td><td>取消对某个别名的定义</td><td>unalias del</td></tr></tbody></table></li><li><p>其它命令：</p><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>uname</td><td>显示操作系统的有关信息</td><td>uname -a</td></tr><tr><td>clear</td><td>清除屏幕或窗口内容</td><td>clear</td></tr><tr><td>env</td><td>显示当前所有设置过的环境变量</td><td>env</td></tr><tr><td>who</td><td>列出当前登录的所有用户</td><td>who</td></tr><tr><td>whoami</td><td>显示当前正进行操作的用户名</td><td>whoami</td></tr><tr><td>tty</td><td>显示终端或伪终端的名称</td><td>tty</td></tr><tr><td>stty</td><td>显示或重置控制键定义</td><td>stty -a</td></tr><tr><td>du</td><td>查询磁盘使用情况</td><td>du -k subdir</td></tr><tr><td>df</td><td>显示文件系统的总空间和可用空间</td><td>df</td></tr><tr><td>w</td><td>显示当前系统活动的总信息</td><td>w</td></tr></tbody></table></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HexoBlog搭建</title>
      <link href="/20151124/hexo-blog-build/"/>
      <url>/20151124/hexo-blog-build/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HexoBlog-搭建"><a href="#HexoBlog-搭建" class="headerlink" title="HexoBlog 搭建"></a>HexoBlog 搭建</h1><p>更详细教程参考：<a href="https://easyhexo.com/">https://easyhexo.com/</a></p><h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h2><h3 id="1-安装-git"><a href="#1-安装-git" class="headerlink" title="1. 安装 git"></a>1. 安装 git</h3><pre><code>- Mac OSX下:安装Xcode即可/或者安装命令行工具- Windows下:安装git bash</code></pre><span id="more"></span><h3 id="2-安装-node-js"><a href="#2-安装-node-js" class="headerlink" title="2. 安装 node.js"></a>2. 安装 node.js</h3><ul><li><p>1）Mac OSX 下:首先安装 Ruby 环境，然后安装 HomeBrew（详情 Google）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ruby <span class="token parameter variable">-e</span> "<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.github.com/Homebrew/homebrew/go/install<span class="token variable">)</span></span>”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2）使用 Homebrew 安装 Node.js (注意检查 Node 版本，截止 2020.05.12 14.x 版本 会导致 hexo 部署出错)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew update$ brew <span class="token function">install</span> <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>3）Windows/OSX 下也可以进入<a href="https://nodejs.org/en/">Node.js 官网</a>下载安装包安装</p></li><li><p>4）一般 Node modules 通常被安装在每个项目的本地文件夹 node_modules，Npm 使用(更详细的命令操作参考百度/Google)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>     <span class="token comment"># 安装在本地项目中</span>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>  <span class="token comment"># 安装在全局</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="二-安装-Hexo（参考Hexo）"><a href="#二-安装-Hexo（参考Hexo）" class="headerlink" title="二.安装 Hexo（参考Hexo）"></a>二.安装 Hexo（参考<a href="https://hexo.io/">Hexo</a>）</h2><h3 id="1-初始化和安装"><a href="#1-初始化和安装" class="headerlink" title="1. 初始化和安装"></a>1. 初始化和安装</h3><p>在 Finder 中建立新的文件夹 Hexo，cd 进入这个目录下(推荐使用 iTerm2)进行操作</p><pre><code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /Users/weico/Hexo<span class="token comment">#这是我的电脑</span>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span>$ hexo init blog$ <span class="token builtin class-name">cd</span> blog$ <span class="token function">npm</span> <span class="token function">install</span>$ hexo g    <span class="token comment">#生成静态博客</span>$ hexo s<span class="token comment">#也可以指定端口$ hexo server -p 5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h3 id="2-Hexo-简单使用"><a href="#2-Hexo-简单使用" class="headerlink" title="2. Hexo 简单使用"></a>2. Hexo 简单使用</h3><ul><li><p>1）常用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"postName"</span> <span class="token comment">#新建文章</span>$ hexo new page <span class="token string">"pageName"</span> <span class="token comment">#新建页面</span>$ hexo generate <span class="token comment">#生成静态页面至public目录</span>$ hexo server <span class="token comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>$ hexo deploy <span class="token comment">#将.deploy目录部署到GitHub</span>$ hexo <span class="token builtin class-name">help</span>  <span class="token comment"># 查看帮助</span>$ hexo version  <span class="token comment">#查看Hexo的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2）复合命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy <span class="token parameter variable">-g</span>  <span class="token comment">#生成加部署</span>$ hexo server <span class="token parameter variable">-g</span>  <span class="token comment">#生成加预览</span>$ hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo cl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>3）命令简写</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo n <span class="token operator">==</span> hexo new$ hexo g <span class="token operator">==</span> hexo generate$ hexo s <span class="token operator">==</span> hexo server$ hexo d <span class="token operator">==</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-部署到-GitHub"><a href="#3-部署到-GitHub" class="headerlink" title="3. 部署到 GitHub"></a>3. 部署到 GitHub</h3><ul><li>1）首先设置你的用户名密码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"bu.ru@qq.com"</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"bruce-sha"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>2）生成密钥<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"bu.ru@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>3）到/Users/用户名/.ssh 下打开.pub 文件将其添加到 Github 上的 SSH Key</li><li>4）执行 npm install hexo-deployer-git –save ## 安装部署所需要的插件</li><li>5）部署到 Github 前需要配置_config.yml 文件，首先找到下面的内容<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: http://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span><span class="token comment"># 将上面内容修改为：</span><span class="token comment"># Deployment</span><span class="token comment">## Docs: http://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token comment">#这里使用git，而不使用github</span>  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>weikeet/weikeet.github.io.git<span class="token comment">#这是我的Github账户</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token comment">#部署分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-插件安装"><a href="#4-插件安装" class="headerlink" title="4. 插件安装"></a>4. 插件安装</h3><ul><li><p>1）sitemap 插件安装、使用-可以将你站点地图提交给搜索引擎，文件路径\sitemap.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># ExtensionsPlugins:- hexo-generator-sitemap#sitemapsitemap:  path: sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2）feed 插件安装、使用-RSS 的生成插件，你可以在配置显示你站点的 RSS，文件路径\atom.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># ExtensionsPlugins:- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-公益-404-页面"><a href="#5-公益-404-页面" class="headerlink" title="5. 公益 404 页面"></a>5. 公益 404 页面</h3><ul><li>腾讯公益 404 页面-在主题的 source 目录下创建 404.html，内容如下<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html;charset=utf-8;<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge,chrome=1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.qq.com/404/search_children.js<span class="token punctuation">"</span></span>      <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span>      <span class="token attr-name">homePageUrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>your site url <span class="token punctuation">"</span></span>      <span class="token attr-name">homePageName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>回到我的主页<span class="token punctuation">"</span></span>    <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-主体选择和配置"><a href="#6-主体选择和配置" class="headerlink" title="6. 主体选择和配置"></a>6. 主体选择和配置</h3><p>GitHub 或者在官网可以找到很多很漂亮的主题，安装对应的文档进行配置即可</p><p>也可以参考 <a href="https://easyhexo.com/">https://easyhexo.com/</a> 里面所罗列到的主题，都是非常不错的</p><h3 id="7-Q-amp-A"><a href="#7-Q-amp-A" class="headerlink" title="7. Q &amp; A"></a>7. Q &amp; A</h3><ul><li><p>1）hexo ERROR Deployer not found: github，不能部署到 github。</p><pre class="line-numbers language-none"><code class="language-none">解决办法：1.安装 npm install hexo-deployer-git –save；2.将Hexo的配置文件_config.yml中的deploy 的 type由github改为git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>2）生成 SSH key 时，在那个目录下执行的 ssh-keygen -t rsa -C “<a href="mailto:xxxx@xxxx.com">xxxx@xxxx.com</a>”就会在那生成.pub 文件，并不是在.ssh 里面 QAQ</p></li><li><p>3）SSH 无法连接到 GitHub 时，尝试 ssh-add ~/.ssh/私钥文件名</p></li><li><p>4）安装的时候最好加上 sudo</p></li></ul><h2 id="Hexo-自动构建-By-Travis"><a href="#Hexo-自动构建-By-Travis" class="headerlink" title="Hexo 自动构建 By Travis"></a>Hexo 自动构建 By Travis</h2><h3 id="配置-GitHub-Token"><a href="#配置-GitHub-Token" class="headerlink" title="配置 GitHub Token"></a>配置 GitHub Token</h3><p>如果需要使用 travis 自动化构建你的博客，travis 自然需要读写你的 GitHub 上的 Repo。GitHub 提供了 token 机制来供外部访问你的仓库。</p><p>进入<a href="https://github.com/settings/tokens">github.com/settings/tokens</a>，生成一个供 travis 读写你的 GitHub 用的 token，至于 token 的权限，不会的直接全选了，但是不建议这样做，风险比较大，或者选择能够访问和提交仓库代码的权限即可，token 注意保密，待会会用到。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892123178972.jpg" alt="-w1028"></p><h3 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis-CI"></a>配置 Travis-CI</h3><p>使用 GitHub 账号登陆 travis，在 travis 进入仓库同步管理进入 travis-ci.org/profile，打开刚才托管的 hexo 博客源码仓库同步开关<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892124687030.jpg" alt="-w682"></p><p>进入设置页，设置自动化编译时机，自动化编译过程中需要用到的变量。<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892127916778.jpg" alt="-w1015"><br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892128991659.jpg" alt="-w1171"></p><p>添加必要的 Shell 变量<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892129715179.jpg" alt="-w1475"><br>记住 NAME 在配置 travis.yml 会用到</p><h3 id="编写-travis-yml-文件"><a href="#编写-travis-yml-文件" class="headerlink" title="编写.travis.yml 文件"></a>编写.travis.yml 文件</h3><p>.travis.yml 是 travis 平台进行自动化构建的配置文件，travis 会根据配置文件生成一个 shell 自动化脚本。</p><p>进入 hexo 博客源码本地 repo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hexo<span class="token function">touch</span> .travis.yml<span class="token function">vim</span> .travis.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 指定构建环境是Node.js</span><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js<span class="token comment"># 指定版本，当前最新版14.x会导致hexo部署失败，改为12.16</span><span class="token key atrule">node_js</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 12.16.3<span class="token comment"># 指定需要sudo权限</span><span class="token key atrule">sudo</span><span class="token punctuation">:</span> required<span class="token comment"># 设置缓存文件</span><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">directories</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> node_modules<span class="token comment"># 设置钩子只检测hexo分支的push变动</span><span class="token key atrule">branches</span><span class="token punctuation">:</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> hexo<span class="token comment"># 在构建之前安装hexo环境</span><span class="token key atrule">before_install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>cli<span class="token comment"># 安装git插件和搜索功能插件</span><span class="token key atrule">install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> npm install  <span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>deployer<span class="token punctuation">-</span>git <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span class="token comment"># 执行清缓存，生成网页操作</span><span class="token key atrule">script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> hexo clean  <span class="token punctuation">-</span> hexo generate<span class="token comment"># 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署</span><span class="token key atrule">after_script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> git config user.name "weikeet"  <span class="token punctuation">-</span> git config user.email "1570682285@qq.com"  <span class="token comment"># 替换同目录下的 `_config.yml` 文件中 `github_token` 字符串为travis后台刚才配置的变量，注意&gt;此处sed命令用了双引号，单引号无效</span>  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/github_token/$<span class="token punctuation">{</span>GITHUB_TOKEN<span class="token punctuation">}</span>/g" ./_config.yml  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/coding_token/$<span class="token punctuation">{</span>CODING_TOKEN<span class="token punctuation">}</span>/g" ./_config.yml  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/phone_number/$<span class="token punctuation">{</span>CODING_NUMBER<span class="token punctuation">}</span>/g" ./_config.yml  <span class="token punctuation">-</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改下_config.yml 文件的 deploy 节点：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 修改前</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>userName/RepoName.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token comment"># github_token 会被 .travis.yml 中sed命令替换</span>    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github_token@github.com/weikeet/weikeet.github.io.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token comment"># 新的e.coding 只能用电话和邮箱，不能使用账户名，邮箱带@字符会导致Git链接识别错误</span>    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//phone_number<span class="token punctuation">:</span>coding_token@e.coding.net/weicools/Weicools.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h3><ul><li><a href="https://michael728.github.io/2019/06/16/cicd-hexo-blog-travis/">https://michael728.github.io/2019/06/16/cicd-hexo-blog-travis/</a></li><li><a href="http://duansm.top/2018/08/05/hexo-travis/">http://duansm.top/2018/08/05/hexo-travis/</a></li><li><a href="https://juejin.im/post/5a1fa30c6fb9a045263b5d2a">https://juejin.im/post/5a1fa30c6fb9a045263b5d2a</a></li><li><a href="https://github.com/xiong-it/xiong-it.github.io/blob/hexo/.travis.yml">https://github.com/xiong-it/xiong-it.github.io/blob/hexo/.travis.yml</a></li><li><a href="https://github.com/xiong-it/xiong-it.github.io/blob/hexo/_config.yml">https://github.com/xiong-it/xiong-it.github.io/blob/hexo/_config.yml</a></li></ul><h2 id="双线部署-GitHub-Coding"><a href="#双线部署-GitHub-Coding" class="headerlink" title="双线部署 GitHub+Coding"></a>双线部署 GitHub+Coding</h2><p>hexo deploy 时(由于部署的环境上没有配置 SSH)，所以需要使用 https+TOKEN 模式 实现更快部署<br>GitHub 格式：<a href="https://github_token@github.com/useName/RepoName.git">https://github_token@github.com/useName/RepoName.git</a><br>Coding 格式：https://[phone_number]:[coding_token/coding_password]@e.coding.net/useName/RepoName.git</p><blockquote><p>coding_password 不能带有@ 否则会导致 GitUrl 识别错误</p></blockquote><h3 id="开启-Coding-Page"><a href="#开启-Coding-Page" class="headerlink" title="开启 Coding Page"></a>开启 Coding Page</h3><p>打开仓库设置，打开持续集成和持续部署<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892135165321.jpg" alt="-w1760"><br>然后打开持续部署中的静态网站，点击立即部署，就会得到一个 coding 的博客网址<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892136176032.jpg" alt="-w1893"><br>然后点击设置，配置域名，配置之前需要先在域名解析中添加 CNAME 解析道 Coding 的博客地址例如：<a href="https://030dsd.coding-pages.com/">https://xxxx.coding-pages.com</a>，注意如果有 GitHub 的解析的话需要先删除，否则无法开启 https。(Coding Pages 申请 SSL/TLS 安全证书出现以下错误：urn:acme:error:unauthorized: Invalid response from <a href="http://www.xxxx.cn/.well-known/acme-challenge/ysOz9wW3U_GFPP8kRP4w8uknBZ9UfiUT7t2xpu9pDCw">http://www.xxxx.cn/.well-known/acme-challenge/ysOz9wW3U_GFPP8kRP4w8uknBZ9UfiUT7t2xpu9pDCw</a> [185.199.111.153]: ，因为这种情况下，在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败)<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/141psU.png" alt="141psU"><br>配置好域名解析之后，在 Coding 中绑定域名，然后强制开启 https，开启成功后再去配置 GitHub 的解析<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2020-05-12/15892138072661.jpg" alt="-w1578"></p><h3 id="双线部署参考"><a href="#双线部署参考" class="headerlink" title="双线部署参考"></a>双线部署参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/111608743?from_voters_page=true">新版 coding-page 与 Gridea 免费搭建个人博客</a></li><li><a href="https://www.cnblogs.com/sunhang32/p/11969964.html">加速自己的 hexo，使用 GitHub+Coding 实现国内外网站加速</a></li><li><a href="https://huaien.co/technology/enable-https-on-coding-pages/">给托管在 Coding Pages 上的博客开启 HTTPS 支持 申请失败的原因</a></li><li><a href="https://www.cnblogs.com/TRHX/p/11699949.html">Coding Pages 申请 SSL 证书错误</a></li></ul><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://easyhexo.com/">https://easyhexo.com/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
